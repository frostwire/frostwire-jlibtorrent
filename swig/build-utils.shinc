#!/usr/bin/env bash

unset_env_variables() {
  # The user's build environment might already have pre-set
  # flags that can interfere with the compilation process
  echo "unset_env_variables()"
  unset CPPFLAGS
  unset BOOST_LIB_PATH
  unset BOOST_ROOT
  unset BOOST_LIB_SUFFIX #BOOST_LIB_SUFFIX=-mt
  unset OPENSSL_ROOT_DIR
  unset OPENSSL_BIN_PATH
  unset OPENSSL_INCLUDE_PATH
  unset OPENSSL_LIB_PATH
}
unset_env_variables


LIBRARY_VERSION=`cat ../build.gradle | grep "version '" | awk '{ print $2 }' | sed "s/'//g"`
LIBRARY_NAME=jlibtorrent

LIBTORRENT_REVISION=471e772cb7038f1bf5f44c32a09eb42fbb80ee99 # bump version to 1.2.11 (branch:RC_1_2) Nov 28,2020

OPENSSL_VERSION="1.1.1i"
BOOST_VERSION="73"
# TEMP NOTE, DEC 12 2020
# Reverting to boost 1.73.

# 1.74 seems to require -frtti linking
#In file included from /Users/gubatron/src/libtorrent/src/announce_entry.cpp:34:
#In file included from /Users/gubatron/src/libtorrent/include/libtorrent/announce_entry.hpp:41:
#In file included from /Users/gubatron/src/libtorrent/include/libtorrent/socket.hpp:53:
#In file included from /Users/gubatron/src/boost_1_74_0/boost/asio/ip/tcp.hpp:19:
#In file included from /Users/gubatron/src/boost_1_74_0/boost/asio/basic_socket_acceptor.hpp:19:
#In file included from /Users/gubatron/src/boost_1_74_0/boost/asio/any_io_executor.hpp:22:
#In file included from /Users/gubatron/src/boost_1_74_0/boost/asio/execution.hpp:19:
#/Users/gubatron/src/boost_1_74_0/boost/asio/execution/any_executor.hpp:811:12: error: use of typeid requires -frtti
#    return typeid(void);

# 1.75 causes swig to not generate error_code.java and other error handling classes
# With boost 1.75 swig will issue these boost related warnings, something must have changed
# Warning 315: Nothing known about 'boost::system::generic_category'
# 'boost::system::system_category'

BOOST_MAJOR="1"
BOOST_MINOR="0"
SWIG=`pwd`
SRC="${HOME}/src"
BOOST_ROOT="${SRC}/boost_${BOOST_MAJOR}_${BOOST_VERSION}_${BOOST_MINOR}"
LIBTORRENT_ROOT="${SRC}/libtorrent"
OPENSSL_SOURCE="${SRC}/openssl-${OPENSSL_VERSION}"
OPENSSL_ROOT="${SRC}/openssl"
OPENSSL_NO_OPTS="no-afalgeng no-async no-autoalginit no-autoerrinit no-capieng no-cms no-comp no-deprecated no-dgram no-dso no-dtls no-dynamic-engine no-egd no-engine no-err no-filenames no-gost no-hw no-makedepend no-multiblock no-nextprotoneg no-posix-io no-psk no-rdrand no-sctp no-shared no-sock no-srp no-srtp no-static-engine no-stdio no-threads no-ui-console no-zlib no-zlib-dynamic -fno-strict-aliasing -fvisibility=hidden -Os"

prompt_msg() {
 echo
 echo "============================================================================="
 echo $1
 echo "============================================================================="
 echo
}

press_any_to_continue() {
 echo "[Press any key to continue]"
 read -n 1 -s -r -p ""
}

create_folder_if_it_doesnt_exist() {
 if [[ ! -d $1 ]]; then mkdir -p $1; fi;
}

abort_if_var_unset() {
  var_name=${1}
  var_value=${2}
  if [[ ! -n ${var_value} ]]; then
    prompt_msg "Error ${var_name} not set. Aborting"
    exit 1
  fi
  echo ${var_name} set to ${var_value}
}

check_min_req_vars() {
  abort_if_var_unset "LIBTORRENT_REVISION" ${LIBTORRENT_REVISION}
  abort_if_var_unset "LIBRARY_VERSION" ${LIBRARY_VERSION}
  abort_if_var_unset "LIBRARY_NAME" ${LIBRARY_NAME}
  abort_if_var_unset "OPENSSL_VERSION" ${OPENSSL_VERSION}
  abort_if_var_unset "BOOST_VERSION" ${BOOST_VERSION}
  abort_if_var_unset "BOOST_MAJOR" ${BOOST_MAJOR}
  abort_if_var_unset "BOOST_MINOR" ${BOOST_MINOR}
  abort_if_var_unset "SWIG" ${SWIG}
  abort_if_var_unset "SRC" ${SRC}
  abort_if_var_unset "BOOST_ROOT" ${BOOST_ROOT}
  abort_if_var_unset "LIBTORRENT_ROOT" ${LIBTORRENT_ROOT}
  abort_if_var_unset "OPENSSL_SOURCE" ${OPENSSL_SOURCE}
  abort_if_var_unset "OPENSSL_ROOT" ${OPENSSL_ROOT}
  abort_if_var_unset "OPENSSL_NO_OPTS" ${OPENSSL_NO_OPTS}
}

prepare_boost() {
  abort_if_var_unset "BOOST_ROOT" ${BOOST_ROOT}
  abort_if_var_unset "BOOST_VERSION" ${BOOST_VERSION}
  abort_if_var_unset "BOOST_MAJOR" ${BOOST_MAJOR}
  abort_if_var_unset "BOOST_MINOR" ${BOOST_MINOR}

  if ! [ -x "$(command -v wget)" ]; then
      echo "Error: wget is not installed."
      exit 1
  fi
  
  pushd ${SRC}
  echo "Checking for ${BOOST_ROOT}..."
  if [ ! -d ${BOOST_ROOT} ]; then
    prompt_msg "Downloading BOOST ${BOOST_MAJOR}_${BOOST_VERSION}_${BOOST_MINOR}"
    wget -4 -O boost.zip https://dl.bintray.com/boostorg/release/${BOOST_MAJOR}.${BOOST_VERSION}.${BOOST_MINOR}/source/boost_${BOOST_MAJOR}_${BOOST_VERSION}_${BOOST_MINOR}.zip
    unzip -qq boost.zip
    rm -f boost.zip
  fi
  pushd ${BOOST_ROOT}
  pwd
  ./bootstrap.sh
  ./b2
  ./b2 /headers
  popd
  popd
}

prepare_android_toolchain() {
  abort_if_var_unset "SRC" ${SRC}
  abort_if_var_unset "NDK_VERSION" ${NDK_VERSION}
  abort_if_var_unset "os_arch" ${os_arch}
  abort_if_var_unset "android_api" ${android_api}
  pushd ${SRC}

  host_os="linux"
  if [[ "$OSTYPE" == "darwin"* ]]; then
      host_os="darwin"
  fi
  
  if [ ! -f android-ndk-${NDK_VERSION}.zip ]; then
    prompt_msg "Downloading android-ndk-${NDK_VERSION}"
    wget -4 -O android-ndk-${NDK_VERSION}.zip https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-${host_os}-x86_64.zip;
    prompt_msg "Extracting NDK...wait";
    unzip -qq android-ndk-${NDK_VERSION}.zip;
  fi
  NDK=$PWD/android-ndk-${NDK_VERSION};
  prompt_msg "NDK=${NDK}"
  TOOLCHAIN_FOLDER="android-toolchain-${os_arch}-api_${android_api}"
  prompt_msg "Creating android toolchain --arch ${os_arch} --api ${android_api} --stl libc++ --install-dir ${TOOLCHAIN_FOLDER}"
  $NDK/build/tools/make_standalone_toolchain.py --arch ${os_arch} --api ${android_api} --stl libc++ --install-dir ${TOOLCHAIN_FOLDER};
  ANDROID_TOOLCHAIN=${PWD}/${TOOLCHAIN_FOLDER}
  #prompt_msg "Setting prebuilt ANDROID_TOOLCHAIN (arch ${os_arch}, api ${android_api})"
  prompt_msg "ANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN}"
  popd
}

prepare_linux_toolchain() {
  echo "preparing linux toolchain..."
  sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  sudo apt-get update -qq
  sudo apt-get install -qq g++-7 g++-7-multilib
  echo "done preparing linux toolchain"
  #echo "...skipping prepare_linux_toolchain"
}

prepare_openssl() {
  abort_if_var_unset "SRC" ${SRC}
  abort_if_var_unset "OPENSSL_VERSION" ${OPENSSL_VERSION}
  abort_if_var_unset "OPENSSL_SOURCE" ${OPENSSL_SOURCE}
  if [ ! -d ${OPENSSL_SOURCE} ]; then
    prompt_msg "Downloading OPENSSL ${OPENSSL_VERSION} to '{$OPENSSL_SOURCE}'"
    pushd ${SRC}
    wget -4 -O openssl.tar.gz https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
    tar xvfz openssl.tar.gz
    rm -f openssl.tar.gz
    popd
  fi
}

build_openssl() {
  abort_if_var_unset "OPENSSL_SOURCE" ${OPENSSL_SOURCE}
  abort_if_var_unset "run_openssl_configure" ${run_openssl_configure}
  if [ -d ${OPENSSL_ROOT} ]; then
    rm -fr ${OPENSSL_ROOT}
  fi
  if [ -d ${OPENSSL_SOURCE} ]; then
    pushd ${OPENSSL_SOURCE}
    make clean
    $run_openssl_configure
    make -j 8
    make install_sw
    popd
  fi
}

prepare_libtorrent() {
  echo "prepare_libtorrent started..."
  abort_if_var_unset "SRC" ${SRC}
  abort_if_var_unset "LIBTORRENT_ROOT" ${LIBTORRENT_ROOT}
  abort_if_var_unset "LIBTORRENT_REVISION" ${LIBTORRENT_REVISION}
  if [ ! -d ${LIBTORRENT_ROOT} ]; then
    pushd ${SRC}
    git clone https://github.com/arvidn/libtorrent
    popd
  fi 
  pushd ${LIBTORRENT_ROOT}
  prompt_msg "Checking if you have any uncommited changes"
  git status
  prompt_msg "Abort with Ctrl-C if there's pending changes above or you will lose them"
  press_any_to_continue
  git fetch origin RC_1_2
  git reset --hard ${LIBTORRENT_REVISION}
  git submodule init
  git submodule update
  make clean
  popd
  echo "prepare_libtorrent finished."
}

build_libraries() {
  abort_if_var_unset "OPENSSL_ROOT" ${OPENSSL_ROOT}
  abort_if_var_unset "SWIG" ${SWIG}
  abort_if_var_unset "os_build" ${os_build}
  abort_if_var_unset "os_arch" ${os_arch}
  abort_if_var_unset "SHARED_LIB" ${SHARED_LIB}
  abort_if_var_unset "SHARED_LIB_FINAL" ${SHARED_LIB_FINAL}
  abort_if_var_unset "run_bjam" ${run_bjam}
  abort_if_var_unset "run_objcopy" ${run_objcopy}
  abort_if_var_unset "run_strip" ${run_strip}
  abort_if_var_unset "run_readelf" ${run_readelf}
  set -x
  cd ${SWIG}
  export PATH=${PATH}:${BOOST_ROOT}/tools/build/src/engine
  echo "Added boost tools to PATH:"
  echo ${PATH}
  export OPENSSL_ROOT=${OPENSSL_ROOT}
  export LIBTORRENT_ROOT=${LIBTORRENT_ROOT}
  export BOOST_ROOT=${BOOST_ROOT}
  export BOOST_BUILD_PATH=${BOOST_ROOT}
  $run_bjam
  $run_objcopy
  $run_strip
  if [[ $os_build == "windows" ]]; then
    # expected but parametrized for flexibility and project
    # SHARED_LIB = lib${LIBRARY_NAME}.dll, libtorrent4j.dll
    # SHARED_LIB_FINAL = ${LIBRARY_NAME}.dll, torrent4j.dll
    mv bin/release/windows/${os_arch}/${SHARED_LIB} bin/release/windows/${os_arch}/${SHARED_LIB_FINAL};
  fi
  cd ..
  if [[ $os_build == "macosx" || $os_build == "linux" ]]; then
    cp swig/bin/release/${os_build}/${os_arch}/${SHARED_LIB} .
  fi
  if [[ $os_build == "android" && $os_arch == "arm" ]]; then
    cp swig/bin/release/${os_build}/${os_arch}eabi-v7a/${SHARED_LIB} .
  fi
  # TODO: the copying of android-x86 library
  gradle clean
  gradle build
}

cleanup_objects() {
  abort_if_var_unset "SWIG" ${SWIG}
  # cleanup (when it's finally working, enable this)
  if [ -d ${SWIG}/bin ]; then
    cd ${SWIG}/bin
    find . -type f | egrep -v '.*\.so$|.*\.dll$|.*\.dylib$|.*\.debug$' | xargs rm
    find . -empty -type d | xargs rm -r
  else
    echo ${SWIG}/bin folder not found, nothing to clean  
  fi
  cd ${SWIG}
  cd ..
  find . -type f | egrep '\d.\d.\d.\d\d.jar$'
  cd ${SWIG}
}

