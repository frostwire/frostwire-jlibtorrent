/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>
#include <string>
#include <ios>

#include <boost/system/error_code.hpp>
    
#include "libtorrent/version.hpp"
#include "libtorrent/error_code.hpp"
#include "libtorrent/time.hpp"
#include "libtorrent/fingerprint.hpp"
#include "libtorrent/bitfield.hpp"
#include "libtorrent/stat.hpp"
#include "libtorrent/peer_request.hpp"
#include "libtorrent/address.hpp"
#include "libtorrent/entry.hpp"
#include "libtorrent/sha1_hash.hpp"
#include "libtorrent/storage_defs.hpp"
#include "libtorrent/storage.hpp"
#include "libtorrent/file_storage.hpp"
#include "libtorrent/torrent_info.hpp"
#include "libtorrent/torrent_handle.hpp"
#include "libtorrent/add_torrent_params.hpp"
#include "libtorrent/rss.hpp"
#include "libtorrent/operations.hpp"
#include "libtorrent/performance_counters.hpp"
#include "libtorrent/close_reason.hpp"
#include "libtorrent/alert.hpp"
#include "libtorrent/alert_types.hpp"
#include "libtorrent/alert_manager.hpp"
#include "libtorrent/disk_io_thread.hpp"
#include "libtorrent/peer.hpp"
#include "libtorrent/peer_info.hpp"
#include "libtorrent/bandwidth_socket.hpp"
#include "libtorrent/ip_voter.hpp"
#include "libtorrent/torrent_peer.hpp"
#include "libtorrent/peer_connection.hpp"
#include "libtorrent/session_status.hpp"
#include "libtorrent/session_settings.hpp"
#include "libtorrent/aux_/session_settings.hpp"
#include "libtorrent/settings_pack.hpp"
#include "libtorrent/peer_class.hpp"
#include "libtorrent/peer_class_type_filter.hpp"
#include "libtorrent/torrent.hpp"
#include "libtorrent/session.hpp"
#include "libtorrent/extensions.hpp"
#include "libtorrent/disk_io_job.hpp"
#include "libtorrent/disk_buffer_holder.hpp"
#include "libtorrent/disk_buffer_pool.hpp"
#include "libtorrent/bt_peer_connection.hpp"
#include "libtorrent/file_pool.hpp"
#include "libtorrent/ip_filter.hpp"
#include "libtorrent/bdecode.hpp"
#include "libtorrent/buffer.hpp"
#include "libtorrent/tracker_manager.hpp"
#include "libtorrent/bencode.hpp"
#include "libtorrent/magnet_uri.hpp"
#include "libtorrent/create_torrent.hpp"
#include "libtorrent/upnp.hpp"
#include "libtorrent/bloom_filter.hpp"

#include "libtorrent/extensions/ut_pex.hpp"
#include "libtorrent/extensions/ut_metadata.hpp"
#include "libtorrent/extensions/lt_trackers.hpp"
#include "libtorrent/extensions/smart_ban.hpp"

#include "libtorrent/kademlia/item.hpp"
#include "libtorrent/ed25519.hpp"
    
// aditional includes

using namespace boost;
using namespace boost::system;
    
using namespace libtorrent;
    
// dummy implementation due to issues of SWIG with alert type pure virtual functions
namespace libtorrent {
    
    int type() { return 0; }
    int category() { return 0; }
    char* what() { return NULL; }
}
    
void translate_cpp_exception(JNIEnv *jenv) {
    try {
        throw;
    } catch (const std::out_of_range &e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, e.what());
    } catch (const std::invalid_argument &e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, e.what());
    } catch (const std::bad_alloc &e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, e.what());
    } catch (const std::ios_base::failure &e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIOException, e.what());
    } catch (const std::exception &e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaUnknownError, e.what());
    } catch (...) {
        SWIG_JavaThrowException(jenv, SWIG_JavaUnknownError, "Unknown exception type");
    }
}

class ed25519 {
public:

    static const int seed_size = ed25519_seed_size;
    static const int private_key_size = ed25519_private_key_size;
    static const int public_key_size = ed25519_public_key_size;
    static const int signature_size = ed25519_signature_size;
    static const int scalar_size = ed25519_scalar_size;
    static const int shared_secret_size = ed25519_shared_secret_size;

    static int create_seed(std::vector<char>& seed) {
        return ed25519_create_seed((unsigned char*)seed.data());
    }

    static void create_keypair(std::vector<char>& public_key,
                               std::vector<char>& private_key,
                               std::vector<char>& seed) {
        ed25519_create_keypair((unsigned char*)public_key.data(),
                               (unsigned char*)private_key.data(),
                               (unsigned char*)seed.data());
    }

    static void sign(std::vector<char>& signature,
                     std::vector<char>& message,
                     std::vector<char>& public_key,
                     std::vector<char>& private_key) {
        ed25519_sign((unsigned char*)signature.data(),
                     (unsigned char*)message.data(),
                     message.size(),
                     (unsigned char*)public_key.data(),
                     (unsigned char*)private_key.data());
    }

    static int verify(std::vector<char>& signature,
                      std::vector<char>& message,
                      std::vector<char>& private_key) {
        return ed25519_verify((unsigned char*)signature.data(),
                              (unsigned char*)message.data(),
                              message.size(),
                              (unsigned char*)private_key.data());
    }

    static void add_scalar(std::vector<char>& public_key,
                           std::vector<char>& private_key,
                           std::vector<char>& scalar) {
        ed25519_add_scalar((unsigned char*)public_key.data(),
                           (unsigned char*)private_key.data(),
                           (unsigned char*)scalar.data());
    }

    static void key_exchange(std::vector<char>& shared_secret,
                             std::vector<char>& public_key,
                             std::vector<char>& private_key) {
        ed25519_key_exchange((unsigned char*)shared_secret.data(),
                             (unsigned char*)public_key.data(),
                             (unsigned char*)private_key.data());
    }
};

std::string to_hex(std::vector<char>& v) {
    std::vector<char> s(2 * v.size());
    to_hex(v.data(), v.size(), s.data());
    return std::string(s.begin(), s.end());
}

namespace libtorrent {
namespace dht {
    // code copied from item.cpp
    enum { canonical_length = 1200 };
    int canonical_string(std::pair<char const*, int> v, boost::uint64_t seq
        , std::pair<char const*, int> salt, char out[canonical_length])
    {
        // v must be valid bencoding!
#ifdef TORRENT_DEBUG
        bdecode_node e;
        error_code ec;
        TORRENT_ASSERT(bdecode(v.first, v.first + v.second, e, ec) == 0);
#endif
        char* ptr = out;

        int left = canonical_length - (ptr - out);
        if (salt.second > 0)
        {
            ptr += snprintf(ptr, left, "4:salt%d:", salt.second);
            left = canonical_length - (ptr - out);
            memcpy(ptr, salt.first, (std::min)(salt.second, left));
            ptr += (std::min)(salt.second, left);
            left = canonical_length - (ptr - out);
        }
        ptr += snprintf(ptr, canonical_length - (ptr - out)
            , "3:seqi%" PRId64 "e1:v", seq);
        left = canonical_length - (ptr - out);
        memcpy(ptr, v.first, (std::min)(v.second, left));
        ptr += (std::min)(v.second, left);
        TORRENT_ASSERT((ptr - out) <= canonical_length);
        return ptr - out;
    }
}
}

class dht_item {
public:

    static int canonical_string(std::vector<char>& v, long seq, std::string& salt, std::vector<char>& out) {
        return dht::canonical_string(std::pair<char const*, int>(v.data(), v.size()),
                                     seq,
                                     std::pair<char const*, int>(salt.data(), salt.size()),
                                     out.data());
    }

    static sha1_hash item_target_id(std::vector<char>& v) {
        return dht::item_target_id(std::pair<char const*, int>(v.data(), v.size()));
    }

    static sha1_hash item_target_id(std::vector<char>& salt, std::vector<char>& pk) {
        return dht::item_target_id(std::pair<char const*, int>(salt.data(), salt.size()), pk.data());
    }

    static bool verify_mutable_item(std::vector<char>& v, std::string& salt, long seq, std::vector<char>& pk, std::vector<char>& sig) {
        return dht::verify_mutable_item(std::pair<char const*, int>(v.data(), v.size()),
                                        std::pair<char const*, int>(salt.data(), salt.size()),
                                        seq,
                                        pk.data(),
                                        sig.data());
    }

    static void sign_mutable_item(std::vector<char>& v, std::string& salt, long seq, std::vector<char>& pk, std::vector<char>& sk, std::vector<char>& sig) {
        dht::sign_mutable_item(std::pair<char const*, int>(v.data(), v.size()),
                               std::pair<char const*, int>(salt.data(), salt.size()),
                               seq,
                               pk.data(),
                               sk.data(),
                               sig.data());
    }
};



#include <stdint.h>		// Use the C99 official header


#include <string>


#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <deque>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <stdexcept>


#include <boost/asio/ip/address.hpp>
#include <boost/asio/ip/address_v4.hpp>
#include <boost/asio/ip/address_v6.hpp>

#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/ip/udp.hpp>

boost::chrono::high_resolution_clock::duration to_seconds(long long n) {
    return boost::chrono::seconds(n);
}

boost::chrono::high_resolution_clock::duration to_milliseconds(long long n) {
    return boost::chrono::milliseconds(n);
}

boost::chrono::high_resolution_clock::duration to_microseconds(long long n) {
    return boost::chrono::microseconds(n);
}

boost::chrono::high_resolution_clock::duration to_minutes(long long n) {
    return boost::chrono::minutes(n);
}

boost::chrono::high_resolution_clock::duration to_hours(long long n) {
    return boost::chrono::hours(n);
}


SWIGINTERN std::string tcp_endpoint_address(tcp::endpoint *self){
                return self->address().to_string();
            }
SWIGINTERN std::string udp_endpoint_address(udp::endpoint *self){
                return self->address().to_string();
            }

#include "session_extend.h"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< long long,long > >::const_reference std_vector_Sl_std_pair_Sl_long_SS_long_Sc_long_Sg__Sg__get(std::vector< std::pair< long long,long > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_long_SS_long_Sc_long_Sg__Sg__set(std::vector< std::pair< long long,long > > *self,int i,std::vector< std::pair< long long,long > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,int > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(std::vector< std::pair< std::string,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(std::vector< std::pair< std::string,int > > *self,int i,std::vector< std::pair< std::string,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::pair< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::pair< std::string,std::string > > *self,int i,std::vector< std::pair< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< int,int > >::const_reference std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get(std::vector< std::pair< int,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set(std::vector< std::pair< int,int > > *self,int i,std::vector< std::pair< int,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_unsigned_SS_char_Sg__get(std::vector< unsigned char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__set(std::vector< unsigned char > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned long long >::const_reference std_vector_Sl_unsigned_SS_long_SS_long_Sg__get(std::vector< unsigned long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__set(std::vector< unsigned long long > *self,int i,std::vector< unsigned long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::sha1_hash >::const_reference std_vector_Sl_libtorrent_sha1_hash_Sg__get(std::vector< libtorrent::sha1_hash > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_sha1_hash_Sg__set(std::vector< libtorrent::sha1_hash > *self,int i,std::vector< libtorrent::sha1_hash >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::torrent_status >::const_reference std_vector_Sl_libtorrent_torrent_status_Sg__get(std::vector< libtorrent::torrent_status > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_torrent_status_Sg__set(std::vector< libtorrent::torrent_status > *self,int i,std::vector< libtorrent::torrent_status >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::torrent_handle >::const_reference std_vector_Sl_libtorrent_torrent_handle_Sg__get(std::vector< libtorrent::torrent_handle > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_torrent_handle_Sg__set(std::vector< libtorrent::torrent_handle > *self,int i,std::vector< libtorrent::torrent_handle >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::feed_handle >::const_reference std_vector_Sl_libtorrent_feed_handle_Sg__get(std::vector< libtorrent::feed_handle > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_feed_handle_Sg__set(std::vector< libtorrent::feed_handle > *self,int i,std::vector< libtorrent::feed_handle >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::feed_item >::const_reference std_vector_Sl_libtorrent_feed_item_Sg__get(std::vector< libtorrent::feed_item > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_feed_item_Sg__set(std::vector< libtorrent::feed_item > *self,int i,std::vector< libtorrent::feed_item >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::file_slice >::const_reference std_vector_Sl_libtorrent_file_slice_Sg__get(std::vector< libtorrent::file_slice > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_file_slice_Sg__set(std::vector< libtorrent::file_slice > *self,int i,std::vector< libtorrent::file_slice >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::peer_request >::const_reference std_vector_Sl_libtorrent_peer_request_Sg__get(std::vector< libtorrent::peer_request > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_peer_request_Sg__set(std::vector< libtorrent::peer_request > *self,int i,std::vector< libtorrent::peer_request >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::dht_routing_bucket >::const_reference std_vector_Sl_libtorrent_dht_routing_bucket_Sg__get(std::vector< libtorrent::dht_routing_bucket > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_dht_routing_bucket_Sg__set(std::vector< libtorrent::dht_routing_bucket > *self,int i,std::vector< libtorrent::dht_routing_bucket >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::dht_lookup >::const_reference std_vector_Sl_libtorrent_dht_lookup_Sg__get(std::vector< libtorrent::dht_lookup > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_dht_lookup_Sg__set(std::vector< libtorrent::dht_lookup > *self,int i,std::vector< libtorrent::dht_lookup >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::partial_piece_info >::const_reference std_vector_Sl_libtorrent_partial_piece_info_Sg__get(std::vector< libtorrent::partial_piece_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_partial_piece_info_Sg__set(std::vector< libtorrent::partial_piece_info > *self,int i,std::vector< libtorrent::partial_piece_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::cached_piece_info >::const_reference std_vector_Sl_libtorrent_cached_piece_info_Sg__get(std::vector< libtorrent::cached_piece_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_cached_piece_info_Sg__set(std::vector< libtorrent::cached_piece_info > *self,int i,std::vector< libtorrent::cached_piece_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::peer_info >::const_reference std_vector_Sl_libtorrent_peer_info_Sg__get(std::vector< libtorrent::peer_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_peer_info_Sg__set(std::vector< libtorrent::peer_info > *self,int i,std::vector< libtorrent::peer_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::stats_metric >::const_reference std_vector_Sl_libtorrent_stats_metric_Sg__get(std::vector< libtorrent::stats_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_stats_metric_Sg__set(std::vector< libtorrent::stats_metric > *self,int i,std::vector< libtorrent::stats_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::entry >::const_reference std_vector_Sl_libtorrent_entry_Sg__get(std::vector< libtorrent::entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1

SWIGINTERN void std_vector_Sl_libtorrent_entry_Sg__set(std::vector< libtorrent::entry > *self,int i,std::vector< libtorrent::entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::web_seed_entry >::const_reference std_vector_Sl_libtorrent_web_seed_entry_Sg__get(std::vector< libtorrent::web_seed_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_web_seed_entry_Sg__set(std::vector< libtorrent::web_seed_entry > *self,int i,std::vector< libtorrent::web_seed_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::peer_entry >::const_reference std_vector_Sl_libtorrent_peer_entry_Sg__get(std::vector< libtorrent::peer_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_peer_entry_Sg__set(std::vector< libtorrent::peer_entry > *self,int i,std::vector< libtorrent::peer_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::announce_entry >::const_reference std_vector_Sl_libtorrent_announce_entry_Sg__get(std::vector< libtorrent::announce_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_announce_entry_Sg__set(std::vector< libtorrent::announce_entry > *self,int i,std::vector< libtorrent::announce_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::peer_list_entry >::const_reference std_vector_Sl_libtorrent_peer_list_entry_Sg__get(std::vector< libtorrent::peer_list_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_peer_list_entry_Sg__set(std::vector< libtorrent::peer_list_entry > *self,int i,std::vector< libtorrent::peer_list_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::ipv4_peer_entry >::const_reference std_vector_Sl_libtorrent_ipv4_peer_entry_Sg__get(std::vector< libtorrent::ipv4_peer_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_ipv4_peer_entry_Sg__set(std::vector< libtorrent::ipv4_peer_entry > *self,int i,std::vector< libtorrent::ipv4_peer_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::ipv6_peer_entry >::const_reference std_vector_Sl_libtorrent_ipv6_peer_entry_Sg__get(std::vector< libtorrent::ipv6_peer_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libtorrent_ipv6_peer_entry_Sg__set(std::vector< libtorrent::ipv6_peer_entry > *self,int i,std::vector< libtorrent::ipv6_peer_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< tcp::endpoint >::const_reference std_vector_Sl_tcp_endpoint_Sg__get(std::vector< tcp::endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_tcp_endpoint_Sg__set(std::vector< tcp::endpoint > *self,int i,std::vector< tcp::endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libtorrent::entry > std_list_Sl_libtorrent_entry_Sg__to_vector(std::list< libtorrent::entry > *self){
                    std::vector<libtorrent::entry> v(self->begin(), self->end());
                    return v;
                }
SWIGINTERN long const &std_map_Sl_std_string_Sc_long_Sg__get(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_long_Sg__set(std::map< std::string,long > *self,std::string const &key,long const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_long_Sg__del(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_long_Sg__has_key(std::map< std::string,long > *self,std::string const &key){
                std::map<std::string,long >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_long_Sg__keys(std::map< std::string,long > *self){
                std::vector<std::string> v;
                for(std::map<std::string, long>::iterator it = self->begin(); it != self->end(); ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN libtorrent::entry const &std_map_Sl_std_string_Sc_libtorrent_entry_Sg__get(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libtorrent_entry_Sg__set(std::map< std::string,libtorrent::entry > *self,std::string const &key,libtorrent::entry const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libtorrent_entry_Sg__del(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_libtorrent_entry_Sg__has_key(std::map< std::string,libtorrent::entry > *self,std::string const &key){
                std::map<std::string,libtorrent::entry >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_libtorrent_entry_Sg__keys(std::map< std::string,libtorrent::entry > *self){
                std::vector<std::string> v;
                for(std::map<std::string, libtorrent::entry>::iterator it = self->begin(); it != self->end(); ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN libtorrent::sha1_hash const &std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__get(std::map< int,libtorrent::sha1_hash > *self,int const &key){
                std::map<int,libtorrent::sha1_hash >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__set(std::map< int,libtorrent::sha1_hash > *self,int const &key,libtorrent::sha1_hash const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__del(std::map< int,libtorrent::sha1_hash > *self,int const &key){
                std::map<int,libtorrent::sha1_hash >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__has_key(std::map< int,libtorrent::sha1_hash > *self,int const &key){
                std::map<int,libtorrent::sha1_hash >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< int > std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__keys(std::map< int,libtorrent::sha1_hash > *self){
                std::vector<int> v;
                for(std::map<int, libtorrent::sha1_hash>::iterator it = self->begin(); it != self->end(); ++it) {
                    v.push_back(it->first);
                }
                return v;
            }
SWIGINTERN std::deque< libtorrent::alert * >::const_reference std_deque_Sl_libtorrent_alert_Sm__Sg__getitem(std::deque< libtorrent::alert * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_libtorrent_alert_Sm__Sg__setitem(std::deque< libtorrent::alert * > *self,int i,libtorrent::alert *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_libtorrent_alert_Sm__Sg__delitem(std::deque< libtorrent::alert * > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< libtorrent::alert * > std_deque_Sl_libtorrent_alert_Sm__Sg__getslice(std::deque< libtorrent::alert * > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque<libtorrent::alert * > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_libtorrent_alert_Sm__Sg__setslice(std::deque< libtorrent::alert * > *self,int i,int j,std::deque< libtorrent::alert * > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_libtorrent_alert_Sm__Sg__delslice(std::deque< libtorrent::alert * > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
SWIGINTERN std::vector< char > libtorrent_entry_bencode(libtorrent::entry *self){
        std::vector<char> buffer;
        libtorrent::bencode(std::back_inserter(buffer), *self);
        return buffer;
    }
SWIGINTERN libtorrent::entry libtorrent_entry_bdecode(std::vector< char > &buffer){
        return bdecode(buffer.begin(), buffer.end());
    }
SWIGINTERN std::string libtorrent_sha1_hash_to_hex(libtorrent::sha1_hash *self){
        return to_hex(self->to_string());
    }
SWIGINTERN bool libtorrent_sha1_hash_from_hex(char *hex,libtorrent::sha1_hash &h){
        return from_hex(hex, 40, (char*)&h[0]);
    }
SWIGINTERN time_t libtorrent_torrent_info_get_creation_date(libtorrent::torrent_info *self){
        return self->creation_date().get_value_or(0);
    }
SWIGINTERN long long libtorrent_add_torrent_params_getFlags(libtorrent::add_torrent_params *self){
        return (long long)self->flags;
    }
SWIGINTERN void libtorrent_add_torrent_params_setFlags(libtorrent::add_torrent_params *self,long long flags){
        self->flags = flags;
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_create_instance(){
        return add_torrent_params();
    }
SWIGINTERN libtorrent::add_torrent_params libtorrent_add_torrent_params_create_instance_no_storage(){
        return add_torrent_params(disabled_storage_constructor);
    }
SWIGINTERN libtorrent::torrent_alert *libtorrent_alert_cast_to_torrent_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_alert *>(alert);      }
SWIGINTERN libtorrent::peer_alert *libtorrent_alert_cast_to_peer_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_alert *>(alert);      }
SWIGINTERN libtorrent::tracker_alert *libtorrent_alert_cast_to_tracker_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::tracker_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_added_alert *libtorrent_alert_cast_to_torrent_added_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_added_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_removed_alert *libtorrent_alert_cast_to_torrent_removed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_removed_alert *>(alert);      }
SWIGINTERN libtorrent::read_piece_alert *libtorrent_alert_cast_to_read_piece_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::read_piece_alert *>(alert);      }
SWIGINTERN libtorrent::file_completed_alert *libtorrent_alert_cast_to_file_completed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::file_completed_alert *>(alert);      }
SWIGINTERN libtorrent::file_renamed_alert *libtorrent_alert_cast_to_file_renamed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::file_renamed_alert *>(alert);      }
SWIGINTERN libtorrent::file_rename_failed_alert *libtorrent_alert_cast_to_file_rename_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::file_rename_failed_alert *>(alert);      }
SWIGINTERN libtorrent::performance_alert *libtorrent_alert_cast_to_performance_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::performance_alert *>(alert);      }
SWIGINTERN libtorrent::state_changed_alert *libtorrent_alert_cast_to_state_changed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::state_changed_alert *>(alert);      }
SWIGINTERN libtorrent::tracker_error_alert *libtorrent_alert_cast_to_tracker_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::tracker_error_alert *>(alert);      }
SWIGINTERN libtorrent::tracker_warning_alert *libtorrent_alert_cast_to_tracker_warning_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::tracker_warning_alert *>(alert);      }
SWIGINTERN libtorrent::scrape_reply_alert *libtorrent_alert_cast_to_scrape_reply_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::scrape_reply_alert *>(alert);      }
SWIGINTERN libtorrent::scrape_failed_alert *libtorrent_alert_cast_to_scrape_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::scrape_failed_alert *>(alert);      }
SWIGINTERN libtorrent::tracker_reply_alert *libtorrent_alert_cast_to_tracker_reply_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::tracker_reply_alert *>(alert);      }
SWIGINTERN libtorrent::dht_reply_alert *libtorrent_alert_cast_to_dht_reply_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_reply_alert *>(alert);      }
SWIGINTERN libtorrent::tracker_announce_alert *libtorrent_alert_cast_to_tracker_announce_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::tracker_announce_alert *>(alert);      }
SWIGINTERN libtorrent::hash_failed_alert *libtorrent_alert_cast_to_hash_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::hash_failed_alert *>(alert);      }
SWIGINTERN libtorrent::peer_ban_alert *libtorrent_alert_cast_to_peer_ban_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_ban_alert *>(alert);      }
SWIGINTERN libtorrent::peer_unsnubbed_alert *libtorrent_alert_cast_to_peer_unsnubbed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_unsnubbed_alert *>(alert);      }
SWIGINTERN libtorrent::peer_snubbed_alert *libtorrent_alert_cast_to_peer_snubbed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_snubbed_alert *>(alert);      }
SWIGINTERN libtorrent::peer_error_alert *libtorrent_alert_cast_to_peer_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_error_alert *>(alert);      }
SWIGINTERN libtorrent::peer_connect_alert *libtorrent_alert_cast_to_peer_connect_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_connect_alert *>(alert);      }
SWIGINTERN libtorrent::peer_disconnected_alert *libtorrent_alert_cast_to_peer_disconnected_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_disconnected_alert *>(alert);      }
SWIGINTERN libtorrent::invalid_request_alert *libtorrent_alert_cast_to_invalid_request_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::invalid_request_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_finished_alert *libtorrent_alert_cast_to_torrent_finished_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_finished_alert *>(alert);      }
SWIGINTERN libtorrent::piece_finished_alert *libtorrent_alert_cast_to_piece_finished_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::piece_finished_alert *>(alert);      }
SWIGINTERN libtorrent::request_dropped_alert *libtorrent_alert_cast_to_request_dropped_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::request_dropped_alert *>(alert);      }
SWIGINTERN libtorrent::block_timeout_alert *libtorrent_alert_cast_to_block_timeout_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::block_timeout_alert *>(alert);      }
SWIGINTERN libtorrent::block_finished_alert *libtorrent_alert_cast_to_block_finished_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::block_finished_alert *>(alert);      }
SWIGINTERN libtorrent::block_downloading_alert *libtorrent_alert_cast_to_block_downloading_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::block_downloading_alert *>(alert);      }
SWIGINTERN libtorrent::unwanted_block_alert *libtorrent_alert_cast_to_unwanted_block_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::unwanted_block_alert *>(alert);      }
SWIGINTERN libtorrent::storage_moved_alert *libtorrent_alert_cast_to_storage_moved_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::storage_moved_alert *>(alert);      }
SWIGINTERN libtorrent::storage_moved_failed_alert *libtorrent_alert_cast_to_storage_moved_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::storage_moved_failed_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_deleted_alert *libtorrent_alert_cast_to_torrent_deleted_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_deleted_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_delete_failed_alert *libtorrent_alert_cast_to_torrent_delete_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_delete_failed_alert *>(alert);      }
SWIGINTERN libtorrent::save_resume_data_alert *libtorrent_alert_cast_to_save_resume_data_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::save_resume_data_alert *>(alert);      }
SWIGINTERN libtorrent::save_resume_data_failed_alert *libtorrent_alert_cast_to_save_resume_data_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::save_resume_data_failed_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_paused_alert *libtorrent_alert_cast_to_torrent_paused_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_paused_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_resumed_alert *libtorrent_alert_cast_to_torrent_resumed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_resumed_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_checked_alert *libtorrent_alert_cast_to_torrent_checked_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_checked_alert *>(alert);      }
SWIGINTERN libtorrent::url_seed_alert *libtorrent_alert_cast_to_url_seed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::url_seed_alert *>(alert);      }
SWIGINTERN libtorrent::file_error_alert *libtorrent_alert_cast_to_file_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::file_error_alert *>(alert);      }
SWIGINTERN libtorrent::metadata_failed_alert *libtorrent_alert_cast_to_metadata_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::metadata_failed_alert *>(alert);      }
SWIGINTERN libtorrent::metadata_received_alert *libtorrent_alert_cast_to_metadata_received_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::metadata_received_alert *>(alert);      }
SWIGINTERN libtorrent::udp_error_alert *libtorrent_alert_cast_to_udp_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::udp_error_alert *>(alert);      }
SWIGINTERN libtorrent::external_ip_alert *libtorrent_alert_cast_to_external_ip_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::external_ip_alert *>(alert);      }
SWIGINTERN libtorrent::listen_failed_alert *libtorrent_alert_cast_to_listen_failed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::listen_failed_alert *>(alert);      }
SWIGINTERN libtorrent::listen_succeeded_alert *libtorrent_alert_cast_to_listen_succeeded_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::listen_succeeded_alert *>(alert);      }
SWIGINTERN libtorrent::portmap_error_alert *libtorrent_alert_cast_to_portmap_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::portmap_error_alert *>(alert);      }
SWIGINTERN libtorrent::portmap_alert *libtorrent_alert_cast_to_portmap_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::portmap_alert *>(alert);      }
SWIGINTERN libtorrent::portmap_log_alert *libtorrent_alert_cast_to_portmap_log_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::portmap_log_alert *>(alert);      }
SWIGINTERN libtorrent::fastresume_rejected_alert *libtorrent_alert_cast_to_fastresume_rejected_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::fastresume_rejected_alert *>(alert);      }
SWIGINTERN libtorrent::peer_blocked_alert *libtorrent_alert_cast_to_peer_blocked_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_blocked_alert *>(alert);      }
SWIGINTERN libtorrent::dht_announce_alert *libtorrent_alert_cast_to_dht_announce_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_announce_alert *>(alert);      }
SWIGINTERN libtorrent::dht_get_peers_alert *libtorrent_alert_cast_to_dht_get_peers_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_get_peers_alert *>(alert);      }
SWIGINTERN libtorrent::stats_alert *libtorrent_alert_cast_to_stats_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::stats_alert *>(alert);      }
SWIGINTERN libtorrent::cache_flushed_alert *libtorrent_alert_cast_to_cache_flushed_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::cache_flushed_alert *>(alert);      }
SWIGINTERN libtorrent::anonymous_mode_alert *libtorrent_alert_cast_to_anonymous_mode_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::anonymous_mode_alert *>(alert);      }
SWIGINTERN libtorrent::lsd_peer_alert *libtorrent_alert_cast_to_lsd_peer_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::lsd_peer_alert *>(alert);      }
SWIGINTERN libtorrent::trackerid_alert *libtorrent_alert_cast_to_trackerid_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::trackerid_alert *>(alert);      }
SWIGINTERN libtorrent::dht_bootstrap_alert *libtorrent_alert_cast_to_dht_bootstrap_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_bootstrap_alert *>(alert);      }
SWIGINTERN libtorrent::rss_alert *libtorrent_alert_cast_to_rss_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::rss_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_error_alert *libtorrent_alert_cast_to_torrent_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_error_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_need_cert_alert *libtorrent_alert_cast_to_torrent_need_cert_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_need_cert_alert *>(alert);      }
SWIGINTERN libtorrent::incoming_connection_alert *libtorrent_alert_cast_to_incoming_connection_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::incoming_connection_alert *>(alert);      }
SWIGINTERN libtorrent::add_torrent_alert *libtorrent_alert_cast_to_add_torrent_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::add_torrent_alert *>(alert);      }
SWIGINTERN libtorrent::state_update_alert *libtorrent_alert_cast_to_state_update_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::state_update_alert *>(alert);      }
SWIGINTERN libtorrent::mmap_cache_alert *libtorrent_alert_cast_to_mmap_cache_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::mmap_cache_alert *>(alert);      }
SWIGINTERN libtorrent::session_stats_alert *libtorrent_alert_cast_to_session_stats_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::session_stats_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_update_alert *libtorrent_alert_cast_to_torrent_update_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_update_alert *>(alert);      }
SWIGINTERN libtorrent::rss_item_alert *libtorrent_alert_cast_to_rss_item_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::rss_item_alert *>(alert);      }
SWIGINTERN libtorrent::dht_error_alert *libtorrent_alert_cast_to_dht_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_error_alert *>(alert);      }
SWIGINTERN libtorrent::dht_immutable_item_alert *libtorrent_alert_cast_to_dht_immutable_item_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_immutable_item_alert *>(alert);      }
SWIGINTERN libtorrent::dht_mutable_item_alert *libtorrent_alert_cast_to_dht_mutable_item_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_mutable_item_alert *>(alert);      }
SWIGINTERN libtorrent::dht_put_alert *libtorrent_alert_cast_to_dht_put_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_put_alert *>(alert);      }
SWIGINTERN libtorrent::i2p_alert *libtorrent_alert_cast_to_i2p_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::i2p_alert *>(alert);      }
SWIGINTERN libtorrent::dht_outgoing_get_peers_alert *libtorrent_alert_cast_to_dht_outgoing_get_peers_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_outgoing_get_peers_alert *>(alert);      }
SWIGINTERN libtorrent::log_alert *libtorrent_alert_cast_to_log_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::log_alert *>(alert);      }
SWIGINTERN libtorrent::torrent_log_alert *libtorrent_alert_cast_to_torrent_log_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::torrent_log_alert *>(alert);      }
SWIGINTERN libtorrent::peer_log_alert *libtorrent_alert_cast_to_peer_log_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::peer_log_alert *>(alert);      }
SWIGINTERN libtorrent::lsd_error_alert *libtorrent_alert_cast_to_lsd_error_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::lsd_error_alert *>(alert);      }
SWIGINTERN libtorrent::dht_stats_alert *libtorrent_alert_cast_to_dht_stats_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_stats_alert *>(alert);      }
SWIGINTERN libtorrent::dht_get_peers_reply_alert *libtorrent_alert_cast_to_dht_get_peers_reply_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::dht_get_peers_reply_alert *>(alert);      }
SWIGINTERN libtorrent::set_piece_hashes_alert *libtorrent_alert_cast_to_set_piece_hashes_alert(libtorrent::alert *alert){          return dynamic_cast<libtorrent::set_piece_hashes_alert *>(alert);      }
SWIGINTERN std::vector< int > libtorrent_stats_alert_transferred_v(libtorrent::stats_alert *self){
        return std::vector<int>(self->transferred, self->transferred + stats_alert::stats_channel::num_channels);
    }
SWIGINTERN std::vector< char > libtorrent_dht_mutable_item_alert_key_v(libtorrent::dht_mutable_item_alert *self){
        boost::array<char, 32> arr = self->key;
        return std::vector<char>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< char > libtorrent_dht_mutable_item_alert_signature_v(libtorrent::dht_mutable_item_alert *self){
        boost::array<char, 64> arr = self->signature;
        return std::vector<char>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< char > libtorrent_dht_put_alert_public_key_v(libtorrent::dht_put_alert *self){
        boost::array<char, 32> arr = self->public_key;
        return std::vector<char>(arr.begin(), arr.end());
    }
SWIGINTERN std::vector< char > libtorrent_dht_put_alert_signature_v(libtorrent::dht_put_alert *self){
        boost::array<char, 64> arr = self->signature;
        return std::vector<char>(arr.begin(), arr.end());
    }
SWIGINTERN void libtorrent_session_add_lt_trackers_extension(libtorrent::session *self){
        self->add_extension(&libtorrent::create_lt_trackers_plugin);
    }
SWIGINTERN void libtorrent_session_add_smart_ban_extension(libtorrent::session *self){
         self->add_extension(&libtorrent::create_smart_ban_plugin);
    }
SWIGINTERN void libtorrent_session_dht_get_item__SWIG_1(libtorrent::session *self,std::vector< char > &key_v,std::string salt=std::string()){
        boost::array<char, 32> key;

        for (int i = 0; i < 32; i++) {
            key[i] = key_v[i];
        }

        self->dht_get_item(key, salt);
    }
SWIGINTERN void libtorrent_session_dht_put_item__SWIG_1(libtorrent::session *self,std::vector< char > &public_key,std::vector< char > &private_key,libtorrent::entry &data,std::string salt=std::string()){
        if (public_key.size() != 32) {
            throw std::invalid_argument("Public key must be of size 32");
        }
        if (private_key.size() != 64) {
            throw std::invalid_argument("Private key must be of size 64");
        }
        boost::array<char, 32> key;

    	for (int i = 0; i < 32; i++) {
    	    key[i] = public_key[i];
    	}

        self->dht_put_item(key, boost::bind(&dht_put_item_cb, _1, _2, _3, _4,
            public_key.data(), private_key.data(), data), salt);
    }
SWIGINTERN void libtorrent_session_dht_get_peers(libtorrent::session *self,libtorrent::sha1_hash const &info_hash){
        dht_get_peers(self, info_hash);
    }
SWIGINTERN void libtorrent_session_dht_announce__SWIG_0(libtorrent::session *self,libtorrent::sha1_hash const &info_hash,int port,int flags){
        dht_announce(self, info_hash, port, flags);
    }
SWIGINTERN void libtorrent_session_dht_announce__SWIG_1(libtorrent::session *self,libtorrent::sha1_hash const &info_hash){
        dht_announce(self, info_hash);
    }
SWIGINTERN void libtorrent_session_set_piece_hashes(libtorrent::session *self,std::string const &id,libtorrent::create_torrent &t,std::string const &p,libtorrent::error_code &ec){
        set_piece_hashes(self, id, t, p, ec);
    }
SWIGINTERN libtorrent::upnp *libtorrent_session_get_upnp(libtorrent::session *self){
        return get_upnp(self);
    }
SWIGINTERN int libtorrent_bdecode_node_bdecode(std::vector< char > &buffer,libtorrent::bdecode_node &ret,libtorrent::error_code &ec){
        return libtorrent::bdecode(&buffer[0], &buffer[0] + buffer.size(), ret, ec);
    }
SWIGINTERN bool libtorrent_upnp_get_mapping(libtorrent::upnp *self,int mapping_index,std::vector< int > &res){

        int local_port = 0;
        int external_port = 0;
        int protocol = 0;

        bool r = self->get_mapping(mapping_index, local_port, external_port, protocol);

        res[0] = local_port;
        res[1] = external_port;
        res[2] = protocol;

        return r;
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hundredth_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::date_time::time_resolutions result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::date_time::time_resolutions)boost::date_time::hundredth;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1posix_1time_1duration_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::posix_time::time_duration *)new boost::posix_time::time_duration();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1posix_1time_1duration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  boost::int64_t arg1 ;
  boost::int64_t arg2 ;
  boost::int64_t arg3 ;
  boost::int64_t arg4 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::int64_t)jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (boost::int64_t)jarg4; 
  {
    try {
      result = (boost::posix_time::time_duration *)new boost::posix_time::time_duration(arg1,arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1posix_1time_1duration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration arg1 ;
  boost::posix_time::time_duration *argp1 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::posix_time::time_duration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::posix_time::time_duration");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::posix_time::time_duration *)new boost::posix_time::time_duration(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1posix_1time_1duration_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  boost::date_time::special_values arg1 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::date_time::special_values)jarg1; 
  {
    try {
      result = (boost::posix_time::time_duration *)new boost::posix_time::time_duration(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1unit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = boost::posix_time::time_duration::unit();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::posix_time::time_duration **)&jresult = new boost::posix_time::time_duration((const boost::posix_time::time_duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1ticks_1per_1second(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::int64_t)boost::posix_time::time_duration::ticks_per_second();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1resolution(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::date_time::time_resolutions result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::date_time::time_resolutions)boost::posix_time::time_duration::resolution();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1hours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->hours();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1minutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->minutes();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1seconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->seconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1total_1seconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->total_seconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1total_1milliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->total_milliseconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1total_1nanoseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->total_nanoseconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1total_1microseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->total_microseconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1fractional_1seconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->fractional_seconds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1num_1fractional_1digits(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (unsigned short)boost::posix_time::time_duration::num_fractional_digits();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1is_1negative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_negative();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1ticks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (boost::int64_t)(arg1)->ticks();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1is_1special(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_special();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1is_1pos_1infinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_pos_infinity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1is_1neg_1infinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_neg_infinity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_posix_1time_1duration_1is_1not_1a_1date_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_not_a_date_time();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1posix_1time_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::posix_time::time_duration *arg1 = (boost::posix_time::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::posix_time::time_duration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::asio::ip::address *)new boost::asio::ip::address();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 arg1 ;
  boost::asio::ip::address_v4 *argp1 ;
  boost::asio::ip::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v4");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::asio::ip::address *)new boost::asio::ip::address(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v6 arg1 ;
  boost::asio::ip::address_v6 *argp1 ;
  boost::asio::ip::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v6");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::asio::ip::address *)new boost::asio::ip::address(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address arg1 ;
  boost::asio::ip::address *argp1 ;
  boost::asio::ip::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::asio::ip::address *)new boost::asio::ip::address(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1is_1v4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_v4();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1is_1v6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_v6();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1to_1v4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (arg1)->to_v4();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1to_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1to_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  boost::system::error_code arg2 ;
  boost::system::error_code *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  argp2 = *(boost::system::error_code **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::system::error_code");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->to_string(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1is_1loopback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_loopback();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1is_1unspecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_unspecified();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1is_1multicast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_multicast();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1address(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::asio::ip::address *arg1 = (boost::asio::ip::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::asio::ip::address **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1v4_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::asio::ip::address_v4 *)new boost::asio::ip::address_v4();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1v4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long arg1 ;
  boost::asio::ip::address_v4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    try {
      result = (boost::asio::ip::address_v4 *)new boost::asio::ip::address_v4(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1v4_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 arg1 ;
  boost::asio::ip::address_v4 *argp1 ;
  boost::asio::ip::address_v4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v4");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::asio::ip::address_v4 *)new boost::asio::ip::address_v4(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1to_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->to_ulong();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1to_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1to_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  boost::system::error_code arg2 ;
  boost::system::error_code *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  argp2 = *(boost::system::error_code **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::system::error_code");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->to_string(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1from_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = boost::asio::ip::address_v4::from_string(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1from_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  boost::system::error_code arg2 ;
  boost::system::error_code *argp2 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(boost::system::error_code **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::system::error_code");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = boost::asio::ip::address_v4::from_string(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1loopback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_loopback();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1unspecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_unspecified();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1class_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_class_a();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1class_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_class_b();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1class_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_class_c();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1is_1multicast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_multicast();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1any(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = boost::asio::ip::address_v4::any();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1loopback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = boost::asio::ip::address_v4::loopback();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1broadcast_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = boost::asio::ip::address_v4::broadcast();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1broadcast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 arg1 ;
  boost::asio::ip::address_v4 arg2 ;
  boost::asio::ip::address_v4 *argp1 ;
  boost::asio::ip::address_v4 *argp2 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v4");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(boost::asio::ip::address_v4 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v4");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = boost::asio::ip::address_v4::broadcast(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v4_1netmask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v4 arg1 ;
  boost::asio::ip::address_v4 *argp1 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v4");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = boost::asio::ip::address_v4::netmask(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1address_1v4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::asio::ip::address_v4 *arg1 = (boost::asio::ip::address_v4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::asio::ip::address_v4 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1v6_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::asio::ip::address_v6 *)new boost::asio::ip::address_v6();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1address_1v6_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v6 arg1 ;
  boost::asio::ip::address_v6 *argp1 ;
  boost::asio::ip::address_v6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::asio::ip::address_v6");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (boost::asio::ip::address_v6 *)new boost::asio::ip::address_v6(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1scope_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->scope_id();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1scope_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  {
    try {
      (arg1)->scope_id(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1to_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1to_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  boost::system::error_code arg2 ;
  boost::system::error_code *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  argp2 = *(boost::system::error_code **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::system::error_code");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->to_string(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1to_1v4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  boost::asio::ip::address_v4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (arg1)->to_v4();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::asio::ip::address_v4 **)&jresult = new boost::asio::ip::address_v4((const boost::asio::ip::address_v4 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1loopback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_loopback();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1unspecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_unspecified();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1link_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_link_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1site_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_site_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1v4_1mapped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_v4_mapped();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1v4_1compatible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_v4_compatible();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast_1global(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast_global();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast_1link_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast_link_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast_1node_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast_node_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast_1org_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast_org_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1v6_1is_1multicast_1site_1local(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      result = (bool)((boost::asio::ip::address_v6 const *)arg1)->is_multicast_site_local();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1address_1v6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::asio::ip::address_v6 *arg1 = (boost::asio::ip::address_v6 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::asio::ip::address_v6 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1high_1resolution_1clock_1time_1point(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::chrono::high_resolution_clock::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::chrono::high_resolution_clock::time_point *)new boost::chrono::high_resolution_clock::time_point();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1high_1resolution_1clock_1time_1point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::chrono::high_resolution_clock::time_point *arg1 = (boost::chrono::high_resolution_clock::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::chrono::high_resolution_clock::time_point **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1high_1resolution_1clock_1duration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::chrono::high_resolution_clock::duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::chrono::high_resolution_clock::duration *)new boost::chrono::high_resolution_clock::duration();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1high_1resolution_1clock_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::chrono::high_resolution_clock::duration *arg1 = (boost::chrono::high_resolution_clock::duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::chrono::high_resolution_clock::duration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1high_1resolution_1clock(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::chrono::high_resolution_clock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::chrono::high_resolution_clock *)new boost::chrono::high_resolution_clock();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1high_1resolution_1clock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::chrono::high_resolution_clock *arg1 = (boost::chrono::high_resolution_clock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::chrono::high_resolution_clock **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tcp::endpoint *arg1 = (tcp::endpoint *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tcp::endpoint **)&jarg1; 
  {
    try {
      result = (unsigned short)(arg1)->port();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  tcp::endpoint *arg1 = (tcp::endpoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tcp::endpoint **)&jarg1; 
  {
    try {
      result = tcp_endpoint_address(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tcp_1endpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (tcp::endpoint *)new tcp::endpoint();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tcp_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tcp::endpoint *arg1 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tcp::endpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1endpoint_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  udp::endpoint *arg1 = (udp::endpoint *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(udp::endpoint **)&jarg1; 
  {
    try {
      result = (unsigned short)(arg1)->port();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1endpoint_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  udp::endpoint *arg1 = (udp::endpoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(udp::endpoint **)&jarg1; 
  {
    try {
      result = udp_endpoint_address(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1udp_1endpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (udp::endpoint *)new udp::endpoint();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1udp_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  udp::endpoint *arg1 = (udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(udp::endpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1seconds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  boost::chrono::high_resolution_clock::duration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    try {
      result = to_seconds(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = new boost::chrono::high_resolution_clock::duration((const boost::chrono::high_resolution_clock::duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1milliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  boost::chrono::high_resolution_clock::duration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    try {
      result = to_milliseconds(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = new boost::chrono::high_resolution_clock::duration((const boost::chrono::high_resolution_clock::duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1microseconds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  boost::chrono::high_resolution_clock::duration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    try {
      result = to_microseconds(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = new boost::chrono::high_resolution_clock::duration((const boost::chrono::high_resolution_clock::duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1minutes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  boost::chrono::high_resolution_clock::duration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    try {
      result = to_minutes(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = new boost::chrono::high_resolution_clock::duration((const boost::chrono::high_resolution_clock::duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1hours(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  boost::chrono::high_resolution_clock::duration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    try {
      result = to_hours(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::chrono::high_resolution_clock::duration **)&jresult = new boost::chrono::high_resolution_clock::duration((const boost::chrono::high_resolution_clock::duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1char_1const_1ptr_1int_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< char const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< char const *,int > *)new std::pair< char const *,int >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< char const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1char_1const_1ptr_1int_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  std::pair< char const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::pair< char const *,int > *)new std::pair< char const *,int >((char const *)arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< char const *,int > **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1char_1const_1ptr_1int_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< char const *,int > *arg1 = 0 ;
  std::pair< char const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< char const *,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< char const *,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< char const *,int > *)new std::pair< char const *,int >((std::pair< char const *,int > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< char const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1const_1ptr_1int_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< char const *,int > *arg1 = (std::pair< char const *,int > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< char const *,int > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->first = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->first, (const char *)arg2);
    } else {
      arg1->first = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1const_1ptr_1int_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< char const *,int > *arg1 = (std::pair< char const *,int > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< char const *,int > **)&jarg1; 
  result = (char *) ((arg1)->first);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1const_1ptr_1int_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< char const *,int > *arg1 = (std::pair< char const *,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< char const *,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1const_1ptr_1int_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< char const *,int > *arg1 = (std::pair< char const *,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< char const *,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1char_1const_1ptr_1int_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< char const *,int > *arg1 = (std::pair< char const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< char const *,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1int_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< int,int > *)new std::pair< int,int >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1int_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1int_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,int > *arg1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1int_1int_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1int_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1int_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1int_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,int > *arg1 = 0 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >((std::pair< std::string,int > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1int_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1string_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1string_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1string_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1string_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1long_1long_1long_12_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< long long,long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< long long,long > *)new std::pair< long long,long >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< long long,long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1long_1long_1long_12_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  long long arg1 ;
  long arg2 ;
  std::pair< long long,long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (std::pair< long long,long > *)new std::pair< long long,long >(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< long long,long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1long_1long_1long_12_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< long long,long > *arg1 = 0 ;
  std::pair< long long,long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< long long,long > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< long long,long > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< long long,long > *)new std::pair< long long,long >((std::pair< long long,long > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< long long,long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< long long,long > *arg1 = (std::pair< long long,long > *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< long long,long > **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< long long,long > *arg1 = (std::pair< long long,long > *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< long long,long > **)&jarg1; 
  result = (long long) ((arg1)->first);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< long long,long > *arg1 = (std::pair< long long,long > *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< long long,long > **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< long long,long > *arg1 = (std::pair< long long,long > *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< long long,long > **)&jarg1; 
  result = (long) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1long_1long_1long_12_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< long long,long > *arg1 = (std::pair< long long,long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< long long,long > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1bdecode_1node_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,libtorrent::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::string,libtorrent::bdecode_node > *)new std::pair< std::string,libtorrent::bdecode_node >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,libtorrent::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1bdecode_1node_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libtorrent::bdecode_node arg2 ;
  libtorrent::bdecode_node *argp2 ;
  std::pair< std::string,libtorrent::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(libtorrent::bdecode_node **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::bdecode_node");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< std::string,libtorrent::bdecode_node > *)new std::pair< std::string,libtorrent::bdecode_node >(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,libtorrent::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1bdecode_1node_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = 0 ;
  std::pair< std::string,libtorrent::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,libtorrent::bdecode_node > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,libtorrent::bdecode_node > *)new std::pair< std::string,libtorrent::bdecode_node >((std::pair< std::string,libtorrent::bdecode_node > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,libtorrent::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1bdecode_1node_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = (std::pair< std::string,libtorrent::bdecode_node > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1bdecode_1node_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = (std::pair< std::string,libtorrent::bdecode_node > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1bdecode_1node_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = (std::pair< std::string,libtorrent::bdecode_node > *) 0 ;
  libtorrent::bdecode_node *arg2 = (libtorrent::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1; 
  arg2 = *(libtorrent::bdecode_node **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1bdecode_1node_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = (std::pair< std::string,libtorrent::bdecode_node > *) 0 ;
  libtorrent::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1; 
  result = (libtorrent::bdecode_node *)& ((arg1)->second);
  *(libtorrent::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1bdecode_1node_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,libtorrent::bdecode_node > *arg1 = (std::pair< std::string,libtorrent::bdecode_node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,libtorrent::bdecode_node > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1char_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< char > *)new std::vector< char >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = ((std::vector< char > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = ((std::vector< char > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< char > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jchar JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_char_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1char_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bool_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< bool > *)new std::vector< bool >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bool_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  {
    try {
      result = (std::vector< bool > *)new std::vector< bool >(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = ((std::vector< bool > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = ((std::vector< bool > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< bool > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (bool)std_vector_Sl_bool_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bool_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bool_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1long_1long_1long_12_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< long long,long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< long long,long > > *)new std::vector< std::pair< long long,long > >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< long long,long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  std::vector< std::pair< long long,long > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< long long,long > > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  std::vector< std::pair< long long,long > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< long long,long > > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  std::vector< std::pair< long long,long > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  arg2 = (std::vector< std::pair< long long,long > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< long long,long > > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  std::vector< std::pair< long long,long > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< long long,long > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< long long,long > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< long long,long > >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< long long,long > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< long long,long > >::value_type *) &std_vector_Sl_std_pair_Sl_long_SS_long_Sc_long_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< long long,long > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_long_1long_1long_12_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< long long,long > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< long long,long > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< long long,long > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_long_SS_long_Sc_long_Sg__Sg__set(arg1,arg2,(std::pair< long long,long > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1long_1long_1long_12_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< long long,long > > *arg1 = (std::vector< std::pair< long long,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< long long,long > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1int_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< std::string,int > > *)new std::vector< std::pair< std::string,int > >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,int > > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,int > > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,int > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< std::string,int > > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,int > >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,int > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1int_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(arg1,arg2,(std::pair< std::string,int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1int_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1string_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,std::string > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1string_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1string_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1int_1pair_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< int,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< int,int > > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = (std::vector< std::pair< int,int > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< int,int > >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< int,int > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::pair< int,int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1int_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< int,int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set(arg1,arg2,(std::pair< int,int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1int_1int_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1unsigned_1char_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  {
    try {
      result = ((std::vector< unsigned char > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  {
    try {
      result = ((std::vector< unsigned char > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unsigned_1char_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1unsigned_1char_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1int_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int64_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< long long > *)new std::vector< long long >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< long long > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< long long > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< long long > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int64_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1int64_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1uint64_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< unsigned long long > *)new std::vector< unsigned long long >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< unsigned long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< unsigned long long > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< unsigned long long > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  arg2 = (std::vector< unsigned long long >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< unsigned long long > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::value_type *arg2 = 0 ;
  std::vector< unsigned long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    for(i=0; i<sz; i++) {
      temp2 = (temp2 << 8) | (std::vector< unsigned long long >::value_type)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      (arg1)->push_back((std::vector< unsigned long long >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< unsigned long long >::value_type *) &std_vector_Sl_unsigned_SS_long_SS_long_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_uint64_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *arg3 = 0 ;
  std::vector< unsigned long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = &temp3;
    temp3 = 0;
    for(i=0; i<sz; i++) {
      temp3 = (temp3 << 8) | (std::vector< unsigned long long >::value_type)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      try {
        std_vector_Sl_unsigned_SS_long_SS_long_Sg__set(arg1,arg2,(unsigned long long const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1uint64_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned long long > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1sha1_1hash_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::sha1_hash > *)new std::vector< libtorrent::sha1_hash >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::sha1_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::sha1_hash > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::sha1_hash > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  arg2 = (std::vector< libtorrent::sha1_hash >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::sha1_hash > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  std::vector< libtorrent::sha1_hash >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::sha1_hash >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::sha1_hash >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::sha1_hash >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::sha1_hash >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::sha1_hash >::value_type *) &std_vector_Sl_libtorrent_sha1_hash_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::sha1_hash >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::sha1_hash >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::sha1_hash >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::sha1_hash >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_sha1_hash_Sg__set(arg1,arg2,(libtorrent::sha1_hash const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1sha1_1hash_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::sha1_hash > *arg1 = (std::vector< libtorrent::sha1_hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1status_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_status > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::torrent_status > *)new std::vector< libtorrent::torrent_status >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::torrent_status > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::torrent_status > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::torrent_status > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  arg2 = (std::vector< libtorrent::torrent_status >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::torrent_status > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  std::vector< libtorrent::torrent_status >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::torrent_status >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::torrent_status >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::torrent_status >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_status >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::torrent_status >::value_type *) &std_vector_Sl_libtorrent_torrent_status_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::torrent_status >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_status >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::torrent_status >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::torrent_status >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_torrent_status_Sg__set(arg1,arg2,(libtorrent::torrent_status const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1status_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::torrent_status > *arg1 = (std::vector< libtorrent::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::torrent_status > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1handle_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_handle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::torrent_handle > *)new std::vector< libtorrent::torrent_handle >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::torrent_handle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::torrent_handle > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::torrent_handle > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  arg2 = (std::vector< libtorrent::torrent_handle >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::torrent_handle > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  std::vector< libtorrent::torrent_handle >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::torrent_handle >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::torrent_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::torrent_handle >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_handle >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::torrent_handle >::value_type *) &std_vector_Sl_libtorrent_torrent_handle_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::torrent_handle >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::torrent_handle >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::torrent_handle >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::torrent_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_torrent_handle_Sg__set(arg1,arg2,(libtorrent::torrent_handle const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1handle_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::torrent_handle > *arg1 = (std::vector< libtorrent::torrent_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::torrent_handle > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1handle_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_handle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::feed_handle > *)new std::vector< libtorrent::feed_handle >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::feed_handle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  std::vector< libtorrent::feed_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::feed_handle > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  std::vector< libtorrent::feed_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::feed_handle > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  std::vector< libtorrent::feed_handle >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  arg2 = (std::vector< libtorrent::feed_handle >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::feed_handle > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  std::vector< libtorrent::feed_handle >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::feed_handle >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::feed_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::feed_handle >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::feed_handle >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::feed_handle >::value_type *) &std_vector_Sl_libtorrent_feed_handle_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::feed_handle >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::feed_handle >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::feed_handle >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::feed_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_feed_handle_Sg__set(arg1,arg2,(libtorrent::feed_handle const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1handle_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::feed_handle > *arg1 = (std::vector< libtorrent::feed_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::feed_handle > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1item_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_item > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::feed_item > *)new std::vector< libtorrent::feed_item >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::feed_item > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  std::vector< libtorrent::feed_item >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::feed_item > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  std::vector< libtorrent::feed_item >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::feed_item > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  std::vector< libtorrent::feed_item >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  arg2 = (std::vector< libtorrent::feed_item >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::feed_item > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  std::vector< libtorrent::feed_item >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::feed_item >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::feed_item >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::feed_item >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::feed_item >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::feed_item >::value_type *) &std_vector_Sl_libtorrent_feed_item_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::feed_item >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::feed_item >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::feed_item >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::feed_item >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_feed_item_Sg__set(arg1,arg2,(libtorrent::feed_item const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1item_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::feed_item > *arg1 = (std::vector< libtorrent::feed_item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::feed_item > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1slice_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::file_slice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::file_slice > *)new std::vector< libtorrent::file_slice >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::file_slice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::file_slice > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::file_slice > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  arg2 = (std::vector< libtorrent::file_slice >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::file_slice > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  std::vector< libtorrent::file_slice >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::file_slice >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::file_slice >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::file_slice >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::file_slice >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::file_slice >::value_type *) &std_vector_Sl_libtorrent_file_slice_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::file_slice >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::file_slice >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::file_slice >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::file_slice >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_file_slice_Sg__set(arg1,arg2,(libtorrent::file_slice const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1slice_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::file_slice > *arg1 = (std::vector< libtorrent::file_slice > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::file_slice > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1request_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::peer_request > *)new std::vector< libtorrent::peer_request >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  std::vector< libtorrent::peer_request >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_request > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  std::vector< libtorrent::peer_request >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_request > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  std::vector< libtorrent::peer_request >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  arg2 = (std::vector< libtorrent::peer_request >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::peer_request > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  std::vector< libtorrent::peer_request >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_request >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_request >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::peer_request >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_request >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::peer_request >::value_type *) &std_vector_Sl_libtorrent_peer_request_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_request >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_request >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::peer_request >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_request >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_peer_request_Sg__set(arg1,arg2,(libtorrent::peer_request const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1request_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::peer_request > *arg1 = (std::vector< libtorrent::peer_request > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::peer_request > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1routing_1bucket_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::dht_routing_bucket > *)new std::vector< libtorrent::dht_routing_bucket >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::dht_routing_bucket > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  arg2 = (std::vector< libtorrent::dht_routing_bucket >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::dht_routing_bucket > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::dht_routing_bucket >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::dht_routing_bucket >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::dht_routing_bucket >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::dht_routing_bucket >::value_type *) &std_vector_Sl_libtorrent_dht_routing_bucket_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::dht_routing_bucket >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_routing_bucket >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::dht_routing_bucket >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::dht_routing_bucket >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_dht_routing_bucket_Sg__set(arg1,arg2,(libtorrent::dht_routing_bucket const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1routing_1bucket_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::dht_routing_bucket > *arg1 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1lookup_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_lookup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::dht_lookup > *)new std::vector< libtorrent::dht_lookup >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::dht_lookup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::dht_lookup > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::dht_lookup > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  arg2 = (std::vector< libtorrent::dht_lookup >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::dht_lookup > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  std::vector< libtorrent::dht_lookup >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::dht_lookup >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::dht_lookup >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::dht_lookup >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_lookup >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::dht_lookup >::value_type *) &std_vector_Sl_libtorrent_dht_lookup_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::dht_lookup >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::dht_lookup >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::dht_lookup >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::dht_lookup >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_dht_lookup_Sg__set(arg1,arg2,(libtorrent::dht_lookup const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1lookup_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::dht_lookup > *arg1 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::dht_lookup > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1partial_1piece_1info_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::partial_piece_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::partial_piece_info > *)new std::vector< libtorrent::partial_piece_info >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::partial_piece_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::partial_piece_info > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::partial_piece_info > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  arg2 = (std::vector< libtorrent::partial_piece_info >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::partial_piece_info > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  std::vector< libtorrent::partial_piece_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::partial_piece_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::partial_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::partial_piece_info >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::partial_piece_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::partial_piece_info >::value_type *) &std_vector_Sl_libtorrent_partial_piece_info_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::partial_piece_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::partial_piece_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::partial_piece_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::partial_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_partial_piece_info_Sg__set(arg1,arg2,(libtorrent::partial_piece_info const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1partial_1piece_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::partial_piece_info > *arg1 = (std::vector< libtorrent::partial_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::partial_piece_info > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1cached_1piece_1info_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::cached_piece_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::cached_piece_info > *)new std::vector< libtorrent::cached_piece_info >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::cached_piece_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  std::vector< libtorrent::cached_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::cached_piece_info > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  std::vector< libtorrent::cached_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::cached_piece_info > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  std::vector< libtorrent::cached_piece_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  arg2 = (std::vector< libtorrent::cached_piece_info >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::cached_piece_info > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  std::vector< libtorrent::cached_piece_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::cached_piece_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::cached_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::cached_piece_info >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::cached_piece_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::cached_piece_info >::value_type *) &std_vector_Sl_libtorrent_cached_piece_info_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::cached_piece_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::cached_piece_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::cached_piece_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::cached_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_cached_piece_info_Sg__set(arg1,arg2,(libtorrent::cached_piece_info const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1cached_1piece_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::cached_piece_info > *arg1 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::cached_piece_info > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1info_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::peer_info > *)new std::vector< libtorrent::peer_info >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_info > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_info > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  arg2 = (std::vector< libtorrent::peer_info >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::peer_info > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  std::vector< libtorrent::peer_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::peer_info >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::peer_info >::value_type *) &std_vector_Sl_libtorrent_peer_info_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::peer_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_peer_info_Sg__set(arg1,arg2,(libtorrent::peer_info const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::peer_info > *arg1 = (std::vector< libtorrent::peer_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::peer_info > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1stats_1metric_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::stats_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::stats_metric > *)new std::vector< libtorrent::stats_metric >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::stats_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::stats_metric > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::stats_metric > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  arg2 = (std::vector< libtorrent::stats_metric >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::stats_metric > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  std::vector< libtorrent::stats_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::stats_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::stats_metric >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::stats_metric >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::stats_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::stats_metric >::value_type *) &std_vector_Sl_libtorrent_stats_metric_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::stats_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::stats_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::stats_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::stats_metric >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_stats_metric_Sg__set(arg1,arg2,(libtorrent::stats_metric const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1stats_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::stats_metric > *arg1 = (std::vector< libtorrent::stats_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::stats_metric > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::entry > *)new std::vector< libtorrent::entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  
  arg2 = (std::vector< libtorrent::entry >::value_type *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::entry >::value_type *) &std_vector_Sl_libtorrent_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = (std::vector< libtorrent::entry >::value_type *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg3) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_entry_Sg__set(arg1,arg2,(libtorrent::entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::entry > *arg1 = (std::vector< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::web_seed_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::web_seed_entry > *)new std::vector< libtorrent::web_seed_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::web_seed_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::web_seed_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::web_seed_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::web_seed_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::web_seed_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  std::vector< libtorrent::web_seed_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::web_seed_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::web_seed_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::web_seed_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::web_seed_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::web_seed_entry >::value_type *) &std_vector_Sl_libtorrent_web_seed_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::web_seed_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::web_seed_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::web_seed_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::web_seed_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_web_seed_entry_Sg__set(arg1,arg2,(libtorrent::web_seed_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1web_1seed_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::web_seed_entry > *arg1 = (std::vector< libtorrent::web_seed_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::web_seed_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::peer_entry > *)new std::vector< libtorrent::peer_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  std::vector< libtorrent::peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  std::vector< libtorrent::peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  std::vector< libtorrent::peer_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::peer_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::peer_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  std::vector< libtorrent::peer_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::peer_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::peer_entry >::value_type *) &std_vector_Sl_libtorrent_peer_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::peer_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_peer_entry_Sg__set(arg1,arg2,(libtorrent::peer_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::peer_entry > *arg1 = (std::vector< libtorrent::peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::peer_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1announce_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::announce_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::announce_entry > *)new std::vector< libtorrent::announce_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::announce_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::announce_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::announce_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::announce_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::announce_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  std::vector< libtorrent::announce_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::announce_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::announce_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::announce_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::announce_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::announce_entry >::value_type *) &std_vector_Sl_libtorrent_announce_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::announce_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::announce_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::announce_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::announce_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_announce_entry_Sg__set(arg1,arg2,(libtorrent::announce_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1announce_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::announce_entry > *arg1 = (std::vector< libtorrent::announce_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::announce_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1list_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_list_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::peer_list_entry > *)new std::vector< libtorrent::peer_list_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_list_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  std::vector< libtorrent::peer_list_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_list_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  std::vector< libtorrent::peer_list_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::peer_list_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  std::vector< libtorrent::peer_list_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::peer_list_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::peer_list_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  std::vector< libtorrent::peer_list_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_list_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_list_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::peer_list_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_list_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::peer_list_entry >::value_type *) &std_vector_Sl_libtorrent_peer_list_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_list_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::peer_list_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::peer_list_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_list_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_peer_list_entry_Sg__set(arg1,arg2,(libtorrent::peer_list_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1list_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::peer_list_entry > *arg1 = (std::vector< libtorrent::peer_list_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::peer_list_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv4_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::ipv4_peer_entry > *)new std::vector< libtorrent::ipv4_peer_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::ipv4_peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::ipv4_peer_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::ipv4_peer_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::ipv4_peer_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::ipv4_peer_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::ipv4_peer_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::ipv4_peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::ipv4_peer_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::ipv4_peer_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::ipv4_peer_entry >::value_type *) &std_vector_Sl_libtorrent_ipv4_peer_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::ipv4_peer_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::ipv4_peer_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::ipv4_peer_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::ipv4_peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_ipv4_peer_entry_Sg__set(arg1,arg2,(libtorrent::ipv4_peer_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv4_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::ipv4_peer_entry > *arg1 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv6_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libtorrent::ipv6_peer_entry > *)new std::vector< libtorrent::ipv6_peer_entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::ipv6_peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::ipv6_peer_entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libtorrent::ipv6_peer_entry > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  arg2 = (std::vector< libtorrent::ipv6_peer_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libtorrent::ipv6_peer_entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  arg2 = *(std::vector< libtorrent::ipv6_peer_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::ipv6_peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libtorrent::ipv6_peer_entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::ipv6_peer_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libtorrent::ipv6_peer_entry >::value_type *) &std_vector_Sl_libtorrent_ipv6_peer_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::ipv6_peer_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  int arg2 ;
  std::vector< libtorrent::ipv6_peer_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtorrent::ipv6_peer_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::ipv6_peer_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libtorrent_ipv6_peer_entry_Sg__set(arg1,arg2,(libtorrent::ipv6_peer_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv6_1peer_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtorrent::ipv6_peer_entry > *arg1 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tcp_1endpoint_1vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< tcp::endpoint > *)new std::vector< tcp::endpoint >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  std::vector< tcp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< tcp::endpoint > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  std::vector< tcp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< tcp::endpoint > const *)arg1)->capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  std::vector< tcp::endpoint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  arg2 = (std::vector< tcp::endpoint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< tcp::endpoint > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  std::vector< tcp::endpoint >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  arg2 = *(std::vector< tcp::endpoint >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< tcp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< tcp::endpoint >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< tcp::endpoint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< tcp::endpoint >::value_type *) &std_vector_Sl_tcp_endpoint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< tcp::endpoint >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tcp_1endpoint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< tcp::endpoint >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< tcp::endpoint >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< tcp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_tcp_endpoint_Sg__set(arg1,arg2,(tcp::endpoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tcp_1endpoint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< tcp::endpoint > *arg1 = (std::vector< tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< tcp::endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::list< libtorrent::entry > *)new std::list< libtorrent::entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::list< libtorrent::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::list< libtorrent::entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = ((std::list< libtorrent::entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = ((std::list< libtorrent::entry > const *)arg1)->max_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (std::list< libtorrent::entry >::value_type *) &(arg1)->front();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (std::list< libtorrent::entry >::value_type *) &(arg1)->back();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  
  arg2 = (std::list< libtorrent::entry >::value_type *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< libtorrent::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_front((std::list< libtorrent::entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      (arg1)->pop_front();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::list< libtorrent::entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  
  arg2 = (std::list< libtorrent::entry >::value_type *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< libtorrent::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::list< libtorrent::entry >::value_type const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      (arg1)->pop_back();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list_1to_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  std::vector< libtorrent::entry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      result = std_list_Sl_libtorrent_entry_Sg__to_vector(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::entry > **)&jresult = new std::vector< libtorrent::entry >((const std::vector< libtorrent::entry > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1entry_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< libtorrent::entry > *arg1 = (std::list< libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< libtorrent::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1long_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,long > *)new std::map< std::string,long >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< std::string,long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1long_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,long > *arg1 = 0 ;
  std::map< std::string,long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,long > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,long > *)new std::map< std::string,long >((std::map< std::string,long > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< std::string,long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,long > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,long > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (long *) &std_map_Sl_std_string_Sc_long_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  {
    try {
      std_map_Sl_std_string_Sc_long_Sg__set(arg1,(std::string const &)*arg2,(long const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_long_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_long_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1long_1map_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  {
    try {
      result = std_map_Sl_std_string_Sc_long_Sg__keys(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1long_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,long > *arg1 = (std::map< std::string,long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,long > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1entry_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,libtorrent::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,libtorrent::entry > *)new std::map< std::string,libtorrent::entry >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< std::string,libtorrent::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1string_1entry_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = 0 ;
  std::map< std::string,libtorrent::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,libtorrent::entry > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,libtorrent::entry > *)new std::map< std::string,libtorrent::entry >((std::map< std::string,libtorrent::entry > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< std::string,libtorrent::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,libtorrent::entry > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,libtorrent::entry > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (libtorrent::entry *) &std_map_Sl_std_string_Sc_libtorrent_entry_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libtorrent::entry *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  arg3 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg3) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return ;
  } 
  {
    try {
      std_map_Sl_std_string_Sc_libtorrent_entry_Sg__set(arg1,(std::string const &)*arg2,(libtorrent::entry const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_libtorrent_entry_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_libtorrent_entry_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_string_1entry_1map_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  {
    try {
      result = std_map_Sl_std_string_Sc_libtorrent_entry_Sg__keys(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1string_1entry_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,libtorrent::entry > *arg1 = (std::map< std::string,libtorrent::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,libtorrent::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1sha1_1hash_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< int,libtorrent::sha1_hash > *)new std::map< int,libtorrent::sha1_hash >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< int,libtorrent::sha1_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1int_1sha1_1hash_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = 0 ;
  std::map< int,libtorrent::sha1_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,libtorrent::sha1_hash > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< int,libtorrent::sha1_hash > *)new std::map< int,libtorrent::sha1_hash >((std::map< int,libtorrent::sha1_hash > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< int,libtorrent::sha1_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< int,libtorrent::sha1_hash > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< int,libtorrent::sha1_hash > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (libtorrent::sha1_hash *) &std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__get(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  int *arg2 = 0 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__set(arg1,(int const &)*arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__del(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__has_key(arg1,(int const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_int_1sha1_1hash_1map_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      result = std_map_Sl_int_Sc_libtorrent_sha1_hash_Sg__keys(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1int_1sha1_1hash_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,libtorrent::sha1_hash > *arg1 = (std::map< int,libtorrent::sha1_hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,libtorrent::sha1_hash > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      result = (bool)((std::deque< libtorrent::alert * > const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1alert_1ptr_1deque_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::deque< libtorrent::alert * > *)new std::deque< libtorrent::alert * >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1alert_1ptr_1deque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  libtorrent::alert **arg2 = 0 ;
  libtorrent::alert *temp2 = 0 ;
  std::deque< libtorrent::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  temp2 = *(libtorrent::alert **)&jarg2;
  arg2 = (libtorrent::alert **)&temp2; 
  {
    try {
      result = (std::deque< libtorrent::alert * > *)new std::deque< libtorrent::alert * >(arg1,(libtorrent::alert *const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1alert_1ptr_1deque_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  std::deque< libtorrent::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (std::deque< libtorrent::alert * > *)new std::deque< libtorrent::alert * >(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1alert_1ptr_1deque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = 0 ;
  std::deque< libtorrent::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< libtorrent::alert * > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::deque< libtorrent::alert * > *)new std::deque< libtorrent::alert * >((std::deque< libtorrent::alert * > const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1alert_1ptr_1deque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  unsigned int arg2 ;
  libtorrent::alert **arg3 = 0 ;
  libtorrent::alert *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  temp3 = *(libtorrent::alert **)&jarg3;
  arg3 = (libtorrent::alert **)&temp3; 
  {
    try {
      (arg1)->assign(arg2,(libtorrent::alert *const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  std::deque< libtorrent::alert * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = *(std::deque< libtorrent::alert * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< libtorrent::alert * > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::deque< libtorrent::alert * > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::deque< libtorrent::alert * > const *)arg1)->max_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  unsigned int arg2 ;
  libtorrent::alert *arg3 = (libtorrent::alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(libtorrent::alert **)&jarg3; 
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  std::deque< libtorrent::alert * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      result = (std::deque< libtorrent::alert * >::value_type *) &(arg1)->front();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  std::deque< libtorrent::alert * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      result = (std::deque< libtorrent::alert * >::value_type *) &(arg1)->back();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  libtorrent::alert **arg2 = 0 ;
  libtorrent::alert *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  temp2 = *(libtorrent::alert **)&jarg2;
  arg2 = (libtorrent::alert **)&temp2; 
  {
    try {
      (arg1)->push_front((libtorrent::alert *const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  libtorrent::alert **arg2 = 0 ;
  libtorrent::alert *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  temp2 = *(libtorrent::alert **)&jarg2;
  arg2 = (libtorrent::alert **)&temp2; 
  {
    try {
      (arg1)->push_back((libtorrent::alert *const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      (arg1)->pop_front();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      (arg1)->pop_back();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  std::deque< libtorrent::alert * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::deque< libtorrent::alert * >::value_type *) &std_deque_Sl_libtorrent_alert_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  libtorrent::alert **arg3 = 0 ;
  libtorrent::alert *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(libtorrent::alert **)&jarg3;
  arg3 = (libtorrent::alert **)&temp3; 
  {
    try {
      try {
        std_deque_Sl_libtorrent_alert_Sm__Sg__setitem(arg1,arg2,(libtorrent::alert *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1delitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_deque_Sl_libtorrent_alert_Sm__Sg__delitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1getslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< libtorrent::alert * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = std_deque_Sl_libtorrent_alert_Sm__Sg__getslice(arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::deque< libtorrent::alert * > **)&jresult = new std::deque< libtorrent::alert * >((const std::deque< libtorrent::alert * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1setslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< libtorrent::alert * > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(std::deque< libtorrent::alert * > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< libtorrent::alert * > const & reference is null");
    return ;
  } 
  {
    try {
      std_deque_Sl_libtorrent_alert_Sm__Sg__setslice(arg1,arg2,arg3,(std::deque< libtorrent::alert * > const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ptr_1deque_1delslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< libtorrent::alert * > *arg1 = (std::deque< libtorrent::alert * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::deque< libtorrent::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      std_deque_Sl_libtorrent_alert_Sm__Sg__delslice(arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_success_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::success;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1family_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::address_family_not_supported;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1in_1use_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::address_in_use;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_address_1not_1available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::address_not_available;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_already_1connected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::already_connected;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_argument_1list_1too_1long_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::argument_list_too_long;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_argument_1out_1of_1domain_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::argument_out_of_domain;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bad_1address_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::bad_address;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bad_1file_1descriptor_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::bad_file_descriptor;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bad_1message_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::bad_message;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_broken_1pipe_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::broken_pipe;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_connection_1aborted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::connection_aborted;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_connection_1already_1in_1progress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::connection_already_in_progress;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_connection_1refused_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::connection_refused;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_connection_1reset_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::connection_reset;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cross_1device_1link_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::cross_device_link;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_destination_1address_1required_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::destination_address_required;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_device_1or_1resource_1busy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::device_or_resource_busy;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_directory_1not_1empty_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::directory_not_empty;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_executable_1format_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::executable_format_error;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1exists_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::file_exists;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1too_1large_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::file_too_large;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_filename_1too_1long_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::filename_too_long;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_function_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::function_not_supported;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_host_1unreachable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::host_unreachable;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_identifier_1removed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::identifier_removed;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_illegal_1byte_1sequence_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::illegal_byte_sequence;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_inappropriate_1io_1control_1operation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::inappropriate_io_control_operation;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_interrupted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::interrupted;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1argument_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::invalid_argument;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1seek_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::invalid_seek;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_io_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::io_error;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_is_1a_1directory_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::is_a_directory;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_message_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::message_size;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_network_1down_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::network_down;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_network_1reset_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::network_reset;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_network_1unreachable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::network_unreachable;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1buffer_1space_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_buffer_space;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1child_1process_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_child_process;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1link_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_link;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1lock_1available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_lock_available;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1message_1available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_message_available;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1message_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_message;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1protocol_1option_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_protocol_option;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1space_1on_1device_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_space_on_device;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1stream_1resources_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_stream_resources;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1such_1device_1or_1address_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_such_device_or_address;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1such_1device_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_such_device;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1such_1file_1or_1directory_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_such_file_or_directory;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_no_1such_1process_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::no_such_process;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1a_1directory_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_a_directory;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1a_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_a_socket;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1a_1stream_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_a_stream;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1connected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_connected;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1enough_1memory_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_enough_memory;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::not_supported;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1canceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::operation_canceled;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1in_1progress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::operation_in_progress;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1not_1permitted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::operation_not_permitted;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::operation_not_supported;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1would_1block_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::operation_would_block;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_owner_1dead_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::owner_dead;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_permission_1denied_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::permission_denied;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_protocol_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::protocol_error;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_protocol_1not_1supported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::protocol_not_supported;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1only_1file_1system_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::read_only_file_system;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resource_1deadlock_1would_1occur_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::resource_deadlock_would_occur;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resource_1unavailable_1try_1again_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::resource_unavailable_try_again;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_result_1out_1of_1range_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::result_out_of_range;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1not_1recoverable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::state_not_recoverable;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stream_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::stream_timeout;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_text_1file_1busy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::text_file_busy;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_timed_1out_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::timed_out;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_too_1many_1files_1open_1in_1system_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::too_many_files_open_in_system;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_too_1many_1files_1open_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::too_many_files_open;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_too_1many_1links_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::too_many_links;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_too_1many_1symbolic_1link_1levels_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::too_many_symbolic_link_levels;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_value_1too_1large_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::value_too_large;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_wrong_1protocol_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  boost::system::errc::errc_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::errc::errc_t)boost::system::errc::wrong_protocol_type;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1error_1category(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::system::error_category **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  {
    try {
      result = (char *)((boost::system::error_category const *)arg1)->name();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((boost::system::error_category const *)arg1)->message(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1default_1error_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  boost::system::error_condition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((boost::system::error_category const *)arg1)->default_error_condition(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_condition **)&jresult = new boost::system::error_condition((const boost::system::error_condition &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1equivalent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  int arg2 ;
  boost::system::error_condition *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(boost::system::error_condition **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((boost::system::error_category const *)arg1)->equivalent(arg2,(boost::system::error_condition const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1equivalent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_code *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((boost::system::error_category const *)arg1)->equivalent((boost::system::error_code const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = *(boost::system::error_category **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((boost::system::error_category const *)arg1)->operator ==((boost::system::error_category const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1op_1neq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = *(boost::system::error_category **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((boost::system::error_category const *)arg1)->operator !=((boost::system::error_category const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1category_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_category *arg1 = (boost::system::error_category *) 0 ;
  boost::system::error_category *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_category **)&jarg1; 
  arg2 = *(boost::system::error_category **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((boost::system::error_category const *)arg1)->operator <((boost::system::error_category const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_boost_1system_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &boost::system::system_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_generic_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &boost::system::generic_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1error_1condition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_condition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_condition *)new boost::system::error_condition();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_condition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1error_1condition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  boost::system::error_category *arg2 = 0 ;
  boost::system::error_condition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(boost::system::error_category **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return 0;
  } 
  {
    try {
      result = (boost::system::error_condition *)new boost::system::error_condition(arg1,(boost::system::error_category const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_condition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  int arg2 ;
  boost::system::error_category *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(boost::system::error_category **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->assign(arg2,(boost::system::error_category const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  {
    try {
      result = (int)((boost::system::error_condition const *)arg1)->value();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  {
    try {
      result = (boost::system::error_category *) &((boost::system::error_condition const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  {
    try {
      result = ((boost::system::error_condition const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1condition_1unspecified_1bool_1true(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      boost::system::error_condition::unspecified_bool_true();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1eq_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_condition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_condition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1lt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_condition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_condition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator <((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1error_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::system::error_condition *arg1 = (boost::system::error_condition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::system::error_condition **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1error_1code_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_code *)new boost::system::error_code();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1error_1code_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  boost::system::error_category *arg2 = 0 ;
  boost::system::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(boost::system::error_category **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return 0;
  } 
  {
    try {
      result = (boost::system::error_code *)new boost::system::error_code(arg1,(boost::system::error_category const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  int arg2 ;
  boost::system::error_category *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(boost::system::error_category **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_category const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->assign(arg2,(boost::system::error_category const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (int)((boost::system::error_code const *)arg1)->value();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (boost::system::error_category *) &((boost::system::error_code const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1default_1error_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  boost::system::error_condition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = ((boost::system::error_code const *)arg1)->default_error_condition();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_condition **)&jresult = new boost::system::error_condition((const boost::system::error_condition &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = ((boost::system::error_code const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1code_1unspecified_1bool_1true(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      boost::system::error_code::unspecified_bool_true();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1eq_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1lt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator <((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1error_1code(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1neq_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator !=((boost::system::error_code const &)*arg1,(boost::system::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1neq_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_condition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_condition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator !=((boost::system::error_condition const &)*arg1,(boost::system::error_condition const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1eq_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_condition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator ==((boost::system::error_code const &)*arg1,(boost::system::error_condition const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1neq_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  boost::system::error_condition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_condition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator !=((boost::system::error_code const &)*arg1,(boost::system::error_condition const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1eq_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_condition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator ==((boost::system::error_condition const &)*arg1,(boost::system::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1neq_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::system::error_condition *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::system::error_condition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_condition const & reference is null");
    return 0;
  } 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)boost::system::operator !=((boost::system::error_condition const &)*arg1,(boost::system::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::system::error_code *arg1 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = boost::system::hash_value((boost::system::error_code const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_make_1error_1code(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  boost::system::errc::errc_t arg1 ;
  boost::system::error_code result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::system::errc::errc_t)jarg1; 
  {
    try {
      result = boost::system::errc::make_error_code(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_code **)&jresult = new boost::system::error_code((const boost::system::error_code &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_make_1error_1condition(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  boost::system::errc::errc_t arg1 ;
  boost::system::error_condition result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::system::errc::errc_t)jarg1; 
  {
    try {
      result = boost::system::errc::make_error_condition(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_condition **)&jresult = new boost::system::error_condition((const boost::system::error_condition &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1VERSION_1MAJOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1VERSION_1MINOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1VERSION_1TINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1VERSION_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(((1*10000) +(1*100) +0));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("1.1.0.0");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_LIBTORRENT_1REVISION_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("$Rev$");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_get_1libtorrent_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::get_libtorrent_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_get_1http_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::get_http_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_system_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::system_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_get_1posix_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::get_posix_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1storage_1error_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::storage_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::storage_error *)new libtorrent::storage_error();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1storage_1error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::error_code arg1 ;
  libtorrent::error_code *argp1 ;
  libtorrent::storage_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libtorrent::error_code **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::error_code");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libtorrent::storage_error *)new libtorrent::storage_error(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::storage_error const *)arg1)->operator bool();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1ec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->ec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1ec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->ec);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  boost::int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  arg2 = (boost::int32_t)jarg2; 
  if (arg1) (arg1)->file = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  boost::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  result = (boost::int32_t) ((arg1)->file);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->operation);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1error_1operation_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::storage_error const *)arg1)->operation_str();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1storage_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::storage_error *arg1 = (libtorrent::storage_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::storage_error **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_min_1time(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent::min_time();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_max_1time(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent::max_time();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1fingerprint(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  libtorrent::fingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::fingerprint *)new libtorrent::fingerprint((char const *)arg1,arg2,arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::fingerprint **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  {
    try {
      result = ((libtorrent::fingerprint const *)arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 2-1);
      arg1->name[2-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  result = (char *)(char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1major_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->major_version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1major_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  result = (int) ((arg1)->major_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1minor_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minor_version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1minor_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  result = (int) ((arg1)->minor_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1revision_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->revision_version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1revision_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  result = (int) ((arg1)->revision_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1tag_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tag_version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fingerprint_1tag_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  result = (int) ((arg1)->tag_version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1fingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::fingerprint *arg1 = (libtorrent::fingerprint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::fingerprint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::bitfield *)new libtorrent::bitfield();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (libtorrent::bitfield *)new libtorrent::bitfield(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (libtorrent::bitfield *)new libtorrent::bitfield(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::bitfield *)new libtorrent::bitfield((char const *)arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bitfield *arg1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bitfield const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::bitfield *)new libtorrent::bitfield((libtorrent::bitfield const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bitfield(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->assign((char const *)arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1op_1get_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::bitfield const *)arg1)->operator [](arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1get_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::bitfield const *)arg1)->get_bit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1clear_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->clear_bit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1set_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_bit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1all_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::bitfield const *)arg1)->all_set();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1none_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::bitfield const *)arg1)->none_set();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bitfield const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1num_1words(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bitfield const *)arg1)->num_words();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::bitfield const *)arg1)->empty();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::bitfield const *)arg1)->bytes();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bitfield const *)arg1)->count();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1const_1iterator_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield::const_iterator *arg1 = (libtorrent::bitfield::const_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield::const_iterator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->operator *();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bitfield_1const_1iterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::bitfield::const_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::bitfield::const_iterator *)new libtorrent::bitfield::const_iterator();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield::const_iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1const_1iterator_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield::const_iterator *arg1 = (libtorrent::bitfield::const_iterator *) 0 ;
  libtorrent::bitfield::const_iterator *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bitfield::const_iterator **)&jarg1; 
  arg2 = *(libtorrent::bitfield::const_iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bitfield::const_iterator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::bitfield::const_iterator const *)arg1)->operator ==((libtorrent::bitfield::const_iterator const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1const_1iterator_1op_1neq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::bitfield::const_iterator *arg1 = (libtorrent::bitfield::const_iterator *) 0 ;
  libtorrent::bitfield::const_iterator *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bitfield::const_iterator **)&jarg1; 
  arg2 = *(libtorrent::bitfield::const_iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bitfield::const_iterator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::bitfield::const_iterator const *)arg1)->operator !=((libtorrent::bitfield::const_iterator const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bitfield_1const_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::bitfield::const_iterator *arg1 = (libtorrent::bitfield::const_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::bitfield::const_iterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  libtorrent::bitfield::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = ((libtorrent::bitfield const *)arg1)->begin();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield::const_iterator **)&jresult = new libtorrent::bitfield::const_iterator((const libtorrent::bitfield::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  libtorrent::bitfield::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      result = ((libtorrent::bitfield const *)arg1)->end();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield::const_iterator **)&jresult = new libtorrent::bitfield::const_iterator((const libtorrent::bitfield::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1set_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      (arg1)->set_all();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1clear_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      (arg1)->clear_all();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bitfield_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::bitfield *arg1 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bitfield **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1stat_1channel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::stat_channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::stat_channel *)new libtorrent::stat_channel();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stat_channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->add(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1second_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->second_tick(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat_channel const *)arg1)->rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1low_1pass_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat_channel const *)arg1)->low_pass_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1total(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat_channel const *)arg1)->total();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  {
    try {
      (arg1)->offset(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1counter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat_channel const *)arg1)->counter();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1channel_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1stat_1channel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::stat_channel *arg1 = (libtorrent::stat_channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::stat_channel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1sent_1syn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->sent_syn(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1received_1synack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->received_synack(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1received_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->received_bytes(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1sent_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->sent_bytes(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1trancieve_1ip_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->trancieve_ip_packet(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1ip_1overhead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->upload_ip_overhead();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1ip_1overhead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->download_ip_overhead();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1second_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->second_tick(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1low_1pass_1upload_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->low_pass_upload_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1low_1pass_1download_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->low_pass_download_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->upload_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->download_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1upload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_upload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_download();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1payload_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->upload_payload_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1payload_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->download_payload_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1payload_1upload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_payload_upload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1payload_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_payload_download();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1protocol_1upload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_protocol_upload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1protocol_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_protocol_download();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1total_1transfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)((libtorrent::stat const *)arg1)->total_transfer(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1transfer_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->transfer_rate(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1add_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  boost::int64_t arg2 ;
  boost::int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      (arg1)->add_stat(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1last_1payload_1downloaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->last_payload_downloaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1last_1payload_1uploaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->last_payload_uploaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1last_1protocol_1downloaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->last_protocol_downloaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1last_1protocol_1uploaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stat const *)arg1)->last_protocol_uploaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1payload_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::upload_payload;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::upload_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1payload_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::download_payload;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::download_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1upload_1ip_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::upload_ip_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1download_1ip_1protocol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::download_ip_protocol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1num_1channels_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stat::num_channels;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stat_1op_1get_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  int arg2 ;
  libtorrent::stat_channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stat **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::stat_channel *) &((libtorrent::stat const *)arg1)->operator [](arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stat_channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1stat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::stat *)new libtorrent::stat();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::stat *arg1 = (libtorrent::stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::stat **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  result = (int) ((arg1)->piece);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  result = (int) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  result = (int) ((arg1)->length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1request_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  arg2 = *(libtorrent::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::peer_request const *)arg1)->operator ==((libtorrent::peer_request const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1request(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_request *)new libtorrent::peer_request();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1request(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_request *arg1 = (libtorrent::peer_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_request **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry const > *smartarg1 = 0 ;
  libtorrent::entry::data_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::entry::data_type)((libtorrent::entry const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry::dictionary_type *arg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::entry::dictionary_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry::dictionary_type const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry::dictionary_type const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  libtorrent::entry::string_type *arg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  libtorrent::entry::string_type arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry::string_type const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry::list_type *arg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::entry::list_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry::list_type const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry::list_type const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libtorrent::entry::integer_type *arg1 = 0 ;
  libtorrent::entry::integer_type temp1 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (libtorrent::entry::integer_type)jarg1; 
  arg1 = &temp1; 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry::integer_type const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  libtorrent::entry::data_type arg1 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libtorrent::entry::data_type)jarg1; 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg1) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry((libtorrent::entry const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1entry_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::entry *)new libtorrent::entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::entry const *)arg1)->operator ==((libtorrent::entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1op_1neq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::entry const *)arg1)->operator !=((libtorrent::entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1integer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry::integer_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::entry::integer_type *) &(arg1)->integer();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry::string_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::entry::string_type *) &(arg1)->string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry::list_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::entry::list_type *) &(arg1)->list();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::entry::list_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1dict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry::dictionary_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::entry::dictionary_type *) &(arg1)->dict();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::entry::dictionary_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1op_1get_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libtorrent::entry *) &(arg1)->operator []((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1find_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libtorrent::entry *)(arg1)->find_key((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = result ? new boost::shared_ptr<  libtorrent::entry >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::entry const *)arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1m_1type_1queried_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::uint8_t arg2 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->m_type_queried = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1m_1type_1queried_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::uint8_t) ((arg1)->m_type_queried);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1bencode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::entry *arg1 = (libtorrent::entry *) 0 ;
  boost::shared_ptr< libtorrent::entry > *smartarg1 = 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::entry > **)&jarg1;
  arg1 = (libtorrent::entry *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = libtorrent_entry_bencode(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_entry_1bdecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  libtorrent::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent_entry_bdecode(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = new boost::shared_ptr<  libtorrent::entry >(new libtorrent::entry((libtorrent::entry &)result)); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::sha1_hash::size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1sha1_1hash_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::sha1_hash *)new libtorrent::sha1_hash();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1max(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent::sha1_hash::max();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1min(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent::sha1_hash::min();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1sha1_1hash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libtorrent::sha1_hash *)new libtorrent::sha1_hash((std::string const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->assign((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1is_1all_1zeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::sha1_hash const *)arg1)->is_all_zeros();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::sha1_hash const *)arg1)->operator ==((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1op_1neq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::sha1_hash const *)arg1)->operator !=((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::sha1_hash const *)arg1)->operator <((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  {
    try {
      result = ((libtorrent::sha1_hash const *)arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1to_1hex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  {
    try {
      result = libtorrent_sha1_hash_to_hex(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1hash_1from_1hex(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libtorrent_sha1_hash_from_hex(arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1sha1_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::sha1_hash *arg1 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::sha1_hash **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1storage_1params(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::storage_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::storage_params *)new libtorrent::storage_params();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1files_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::file_storage *arg2 = (libtorrent::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  arg2 = *(libtorrent::file_storage **)&jarg2; 
  if (arg1) (arg1)->files = (libtorrent::file_storage const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1files_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (libtorrent::file_storage *) ((arg1)->files);
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1mapped_1files_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::file_storage *arg2 = (libtorrent::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  arg2 = *(libtorrent::file_storage **)&jarg2; 
  if (arg1) (arg1)->mapped_files = (libtorrent::file_storage const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1mapped_1files_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (libtorrent::file_storage *) ((arg1)->mapped_files);
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::storage_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  arg2 = (libtorrent::storage_mode_t)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::storage_mode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (libtorrent::storage_mode_t) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1priorities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  std::vector< boost::uint8_t > *arg2 = (std::vector< boost::uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  arg2 = *(std::vector< boost::uint8_t > **)&jarg2; 
  if (arg1) (arg1)->priorities = (std::vector< boost::uint8_t > const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1priorities_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  std::vector< boost::uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (std::vector< boost::uint8_t > *) ((arg1)->priorities);
  *(std::vector< boost::uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::torrent_info *arg2 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  
  smartarg2 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg2;
  arg2 = (libtorrent::torrent_info *)(smartarg2 ? smartarg2->get() : 0); 
  if (arg1) (arg1)->info = (libtorrent::torrent_info const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1params_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  result = (libtorrent::torrent_info *) ((arg1)->info);
  
  *(boost::shared_ptr< const libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr< const libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1storage_1params(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::storage_params *arg1 = (libtorrent::storage_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::storage_params **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::storage_error *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(libtorrent::storage_error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initialize(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1has_1any_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::storage_error *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(libtorrent::storage_error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->has_any_file(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1set_1file_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  std::vector< boost::uint8_t > *arg2 = 0 ;
  libtorrent::storage_error *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(std::vector< boost::uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::uint8_t > const & reference is null");
    return ;
  } 
  arg3 = *(libtorrent::storage_error **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_file_priority((std::vector< boost::uint8_t > const &)*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1move_1storage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  libtorrent::storage_error *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(libtorrent::storage_error **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)(arg1)->move_storage((std::string const &)*arg2,arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1verify_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  libtorrent::storage_error *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  arg4 = *(libtorrent::storage_error **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->verify_resume_data((libtorrent::bdecode_node const &)*arg2,(std::vector< std::string > const *)arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1write_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  libtorrent::storage_error *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  arg3 = *(libtorrent::storage_error **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::zero_storage const *)arg1)->write_resume_data(*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1release_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::storage_error *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(libtorrent::storage_error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->release_files(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::storage_error *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libtorrent::storage_error **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->rename_file(arg2,(std::string const &)*arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_zero_1storage_1delete_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  libtorrent::storage_error *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  arg2 = *(libtorrent::storage_error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::storage_error & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->delete_files(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1zero_1storage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::zero_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::zero_storage *)new libtorrent::zero_storage();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::zero_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1zero_1storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::zero_storage *arg1 = (libtorrent::zero_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::zero_storage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1file_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->file_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1file_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  result = (int) ((arg1)->file_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  result = (boost::int64_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1slice_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  result = (boost::int64_t) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1slice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::file_slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::file_slice *)new libtorrent::file_slice();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1slice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_slice *arg1 = (libtorrent::file_slice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_slice **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1storage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::file_storage *)new libtorrent::file_storage();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::file_storage const *)arg1)->is_valid();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1pad_1file_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::flags_t)libtorrent::file_storage::pad_file;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1attribute_1hidden_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::flags_t)libtorrent::file_storage::attribute_hidden;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1attribute_1executable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::flags_t)libtorrent::file_storage::attribute_executable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1attribute_1symlink_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::flags_t)libtorrent::file_storage::attribute_symlink;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1borrow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8, jstring jarg9) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  boost::int64_t arg5 ;
  boost::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  boost::int64_t arg8 ;
  std::string *arg9 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::int64_t)jarg5; 
  arg6 = (boost::uint32_t)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (boost::int64_t)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return ;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  {
    try {
      (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7,arg8,(std::string const &)*arg9);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1borrow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jlong jarg8) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  boost::int64_t arg5 ;
  boost::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  boost::int64_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::int64_t)jarg5; 
  arg6 = (boost::uint32_t)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (boost::int64_t)jarg8; 
  {
    try {
      (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7,arg8);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1borrow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jstring jarg7) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  boost::int64_t arg5 ;
  boost::uint32_t arg6 ;
  char *arg7 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::int64_t)jarg5; 
  arg6 = (boost::uint32_t)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  {
    try {
      (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6,(char const *)arg7);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1borrow_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  boost::int64_t arg5 ;
  boost::uint32_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::int64_t)jarg5; 
  arg6 = (boost::uint32_t)jarg6; 
  {
    try {
      (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5,arg6);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1borrow_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  boost::int64_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (boost::int64_t)jarg5; 
  {
    try {
      (arg1)->add_file_borrow((char const *)arg2,arg3,(std::string const &)*arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t arg3 ;
  int arg4 ;
  std::time_t arg5 ;
  std::string *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (std::time_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      (arg1)->add_file((std::string const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t arg3 ;
  int arg4 ;
  std::time_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (std::time_t)jarg5; 
  {
    try {
      (arg1)->add_file((std::string const &)*arg2,arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->add_file((std::string const &)*arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1add_1file_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  boost::int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      (arg1)->add_file((std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1map_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  int arg4 ;
  std::vector< libtorrent::file_slice > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->map_block(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::file_slice > **)&jresult = new std::vector< libtorrent::file_slice >((const std::vector< libtorrent::file_slice > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1map_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  int arg4 ;
  libtorrent::peer_request result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->map_file(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_request **)&jresult = new libtorrent::peer_request((const libtorrent::peer_request &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1num_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->num_files();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1total_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::file_storage const *)arg1)->total_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1set_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_num_pieces(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->num_pieces();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1set_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_piece_length(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->piece_length();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->piece_size(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_name((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (std::string *) &((libtorrent::file_storage const *)arg1)->name();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  libtorrent::file_storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = *(libtorrent::file_storage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1unload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      (arg1)->unload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1is_1loaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::file_storage const *)arg1)->is_loaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1optimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->optimize(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1optimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->optimize(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1optimize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->optimize(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1optimize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->hash(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1symlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::string *) &((libtorrent::file_storage const *)arg1)->symlink(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1mtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (time_t)((libtorrent::file_storage const *)arg1)->mtime(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1path_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->file_path(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1path_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->file_path(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::file_storage const *)arg1)->file_name(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)((libtorrent::file_storage const *)arg1)->file_size(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1pad_1file_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::file_storage const *)arg1)->pad_file_at(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)((libtorrent::file_storage const *)arg1)->file_offset(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1path_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (boost::uint32_t)((libtorrent::file_storage const *)arg1)->file_path_hash(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1all_1path_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  boost::unordered_set< boost::uint32_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = *(boost::unordered_set< boost::uint32_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::unordered_set< boost::uint32_t > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::file_storage const *)arg1)->all_path_hashes(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1flag_1pad_1file_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::file_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::file_flags_t)libtorrent::file_storage::flag_pad_file;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1flag_1hidden_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::file_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::file_flags_t)libtorrent::file_storage::flag_hidden;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1flag_1executable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::file_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::file_flags_t)libtorrent::file_storage::flag_executable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1flag_1symlink_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::file_storage::file_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::file_storage::file_flags_t)libtorrent::file_storage::flag_symlink;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1paths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  {
    try {
      result = (std::vector< std::string > *) &((libtorrent::file_storage const *)arg1)->paths();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->file_flags(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1index_1at_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  boost::int64_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->file_index_at_offset(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1name_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)((libtorrent::file_storage const *)arg1)->file_name_ptr(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1storage_1file_1name_1len(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::file_storage *arg1 = (libtorrent::file_storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::file_storage const *)arg1)->file_name_len(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sanitize_1append_1path_1element(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      libtorrent::sanitize_append_path_element(*arg1,(char const *)arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1retry_1delay_1min_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)libtorrent::tracker_retry_delay_min;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1retry_1delay_1max_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)libtorrent::tracker_retry_delay_max;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1announce_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::announce_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libtorrent::announce_entry *)new libtorrent::announce_entry((std::string const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::announce_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1announce_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::announce_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::announce_entry *)new libtorrent::announce_entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::announce_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1announce_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1last_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->last_error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1last_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->last_error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1next_1announce_1in(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::announce_entry const *)arg1)->next_announce_in();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1min_1announce_1in(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::announce_entry const *)arg1)->min_announce_in();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1next_1announce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::time_point *arg2 = (libtorrent::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = *(libtorrent::time_point **)&jarg2; 
  if (arg1) (arg1)->next_announce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1next_1announce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (libtorrent::time_point *)& ((arg1)->next_announce);
  *(libtorrent::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1min_1announce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::time_point *arg2 = (libtorrent::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = *(libtorrent::time_point **)&jarg2; 
  if (arg1) (arg1)->min_announce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1min_1announce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  libtorrent::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (libtorrent::time_point *)& ((arg1)->min_announce);
  *(libtorrent::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (int) ((arg1)->scrape_incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (int) ((arg1)->scrape_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1downloaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_downloaded = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1scrape_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (int) ((arg1)->scrape_downloaded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1tier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->tier = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1tier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->tier);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1fail_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->fail_limit = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1fail_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->fail_limit);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1fails_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->fails = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1fails_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->fails);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1updating_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->updating = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1updating_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->updating);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1torrent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::announce_entry::tracker_source)libtorrent::announce_entry::source_torrent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1client_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::announce_entry::tracker_source)libtorrent::announce_entry::source_client;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1magnet_1link_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::announce_entry::tracker_source)libtorrent::announce_entry::source_magnet_link;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1tex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::announce_entry::tracker_source)libtorrent::announce_entry::source_tex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->source);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1verified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verified = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1verified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->verified);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1start_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->start_sent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1start_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->start_sent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1complete_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->complete_sent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1complete_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->complete_sent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1send_1stats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->send_stats = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1send_1stats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->send_stats);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      (arg1)->reset();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1is_1working(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::announce_entry const *)arg1)->is_working();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_announce_1entry_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::announce_entry *arg1 = (libtorrent::announce_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::announce_entry **)&jarg1; 
  {
    try {
      (arg1)->trim();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  libtorrent::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libtorrent::web_seed_entry::headers_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry::headers_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  libtorrent::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  {
    try {
      result = (libtorrent::web_seed_entry *)new libtorrent::web_seed_entry((std::string const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  arg2 = *(libtorrent::web_seed_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::web_seed_entry const *)arg1)->operator ==((libtorrent::web_seed_entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  arg2 = *(libtorrent::web_seed_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::web_seed_entry const *)arg1)->operator <((libtorrent::web_seed_entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1auth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->auth = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1auth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->auth);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1extra_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry::headers_t *arg2 = (libtorrent::web_seed_entry::headers_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  arg2 = *(libtorrent::web_seed_entry::headers_t **)&jarg2; 
  if (arg1) (arg1)->extra_headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1extra_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  libtorrent::web_seed_entry::headers_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  result = (libtorrent::web_seed_entry::headers_t *)& ((arg1)->extra_headers);
  *(libtorrent::web_seed_entry::headers_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1entry_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1web_1seed_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::web_seed_entry *arg1 = (libtorrent::web_seed_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  int arg2 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (libtorrent::torrent_info *)((*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1) ? (*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::torrent_info const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  int arg2 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::sha1_hash const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::sha1_hash const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  int arg3 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1,*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((libtorrent::bdecode_node const &)*arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  int arg3 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1,*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1info_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_info *)new libtorrent::torrent_info((std::string const &)*arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  *(boost::shared_ptr<  libtorrent::torrent_info > **)&jresult = result ? new boost::shared_ptr<  libtorrent::torrent_info >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::file_storage *) &((libtorrent::torrent_info const *)arg1)->files();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1orig_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::file_storage *) &((libtorrent::torrent_info const *)arg1)->orig_files();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1remap_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  libtorrent::file_storage *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::file_storage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->remap_files((libtorrent::file_storage const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1tracker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1tracker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< libtorrent::announce_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< libtorrent::announce_entry > *) &((libtorrent::torrent_info const *)arg1)->trackers();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::announce_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1similar_1torrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< libtorrent::sha1_hash > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->similar_torrents();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::sha1_hash > **)&jresult = new std::vector< libtorrent::sha1_hash >((const std::vector< libtorrent::sha1_hash > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1collections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->collections();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libtorrent::web_seed_entry::headers_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry::headers_t const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1http_1seed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libtorrent::web_seed_entry::headers_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry::headers_t const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_http_seed((std::string const &)*arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1http_1seed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->add_http_seed((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1http_1seed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_http_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1web_1seeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< libtorrent::web_seed_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< libtorrent::web_seed_entry > *) &((libtorrent::torrent_info const *)arg1)->web_seeds();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::web_seed_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1total_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (boost::int64_t)((libtorrent::torrent_info const *)arg1)->total_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::torrent_info const *)arg1)->piece_length();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::torrent_info const *)arg1)->num_pieces();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1info_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::sha1_hash *) &((libtorrent::torrent_info const *)arg1)->info_hash();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1num_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::torrent_info const *)arg1)->num_files();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1map_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  int arg4 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< libtorrent::file_slice > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->map_block(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::file_slice > **)&jresult = new std::vector< libtorrent::file_slice >((const std::vector< libtorrent::file_slice > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1map_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  int arg4 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::peer_request result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->map_file(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_request **)&jresult = new libtorrent::peer_request((const libtorrent::peer_request &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  libtorrent::error_code *arg4 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = *(libtorrent::error_code **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->load((char const *)arg2,arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1unload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->unload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1ssl_1cert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->ssl_cert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::torrent_info const *)arg1)->is_valid();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::torrent_info const *)arg1)->priv();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1is_1i2p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::torrent_info const *)arg1)->is_i2p();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::torrent_info const *)arg1)->piece_size(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1hash_1for_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->hash_for_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1hash_1for_1piece_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)((libtorrent::torrent_info const *)arg1)->hash_for_piece_ptr(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1is_1loaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::torrent_info const *)arg1)->is_loaded();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1merkle_1tree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< libtorrent::sha1_hash > *) &((libtorrent::torrent_info const *)arg1)->merkle_tree();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::sha1_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1set_1merkle_1tree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::vector< libtorrent::sha1_hash > *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< libtorrent::sha1_hash > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::sha1_hash > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_merkle_tree(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((libtorrent::torrent_info const *)arg1)->name();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1creator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((libtorrent::torrent_info const *)arg1)->creator();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((libtorrent::torrent_info const *)arg1)->comment();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::torrent_info::nodes_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::torrent_info::nodes_t *) &((libtorrent::torrent_info const *)arg1)->nodes();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_info::nodes_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_node((std::pair< std::string,int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1parse_1info_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  int arg4 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (bool)(arg1)->parse_info_section((libtorrent::bdecode_node const &)*arg2,*arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  char *arg2 = (char *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->info((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  libtorrent::torrent_info *arg2 = 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (libtorrent::torrent_info *)((*(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_info & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1metadata_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::torrent_info const *)arg1)->metadata_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1add_1merkle_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  std::map< int,libtorrent::sha1_hash > *arg2 = 0 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::map< int,libtorrent::sha1_hash > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,libtorrent::sha1_hash > const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)(arg1)->add_merkle_nodes((std::map< int,libtorrent::sha1_hash > const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1build_1merkle_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  std::map< int,libtorrent::sha1_hash > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::torrent_info const *)arg1)->build_merkle_list(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::map< int,libtorrent::sha1_hash > **)&jresult = new std::map< int,libtorrent::sha1_hash >((const std::map< int,libtorrent::sha1_hash > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1is_1merkle_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::torrent_info const *)arg1)->is_merkle_torrent();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1parse_1torrent_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  int arg4 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (bool)(arg1)->parse_torrent_file((libtorrent::bdecode_node const &)*arg2,*arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1info_1get_1creation_1date(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_info *arg1 = (libtorrent::torrent_info *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *smartarg1 = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::torrent_info > **)&jarg1;
  arg1 = (libtorrent::torrent_info *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (time_t)libtorrent_torrent_info_get_creation_date(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1set_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  tcp::endpoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer((tcp::endpoint const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1bytes_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytes_progress = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1bytes_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->bytes_progress);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1block_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->block_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1block_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->block_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1info_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->num_peers);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1block_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::block_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::block_info *)new libtorrent::block_info();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1block_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::block_info *arg1 = (libtorrent::block_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::block_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1blocks_1in_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->blocks_in_piece = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1blocks_1in_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->blocks_in_piece);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1finished_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->finished = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1finished_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->finished);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1writing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->writing = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1writing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->writing);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1requested_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->requested = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1requested_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->requested);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1blocks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  libtorrent::block_info *arg2 = (libtorrent::block_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = *(libtorrent::block_info **)&jarg2; 
  if (arg1) (arg1)->blocks = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1blocks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  libtorrent::block_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (libtorrent::block_info *) ((arg1)->blocks);
  *(libtorrent::block_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1piece_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  libtorrent::partial_piece_info::state_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  arg2 = (libtorrent::partial_piece_info::state_t)jarg2; 
  if (arg1) (arg1)->piece_state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_partial_1piece_1info_1piece_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  libtorrent::partial_piece_info::state_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  result = (libtorrent::partial_piece_info::state_t) ((arg1)->piece_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1partial_1piece_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::partial_piece_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::partial_piece_info *)new libtorrent::partial_piece_info();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::partial_piece_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1partial_1piece_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::partial_piece_info *arg1 = (libtorrent::partial_piece_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::partial_piece_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::torrent_handle *)new libtorrent::torrent_handle();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_handle *)new libtorrent::torrent_handle((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1overwrite_1existing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::flags_t)libtorrent::torrent_handle::overwrite_existing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1add_1piece_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->add_piece(arg2,(char const *)arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1add_1piece_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->add_piece(arg2,(char const *)arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1read_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->read_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1have_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->have_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1get_1full_1peer_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::peer_list_entry > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_list_entry > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_list_entry > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->get_full_peer_list(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1get_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::peer_info > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::peer_info > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->get_peer_info(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1distributed_1copies_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_distributed_copies;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1accurate_1download_1counters_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_accurate_download_counters;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1last_1seen_1complete_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_last_seen_complete;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_pieces;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1verified_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_verified_pieces;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1torrent_1file_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_torrent_file;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1name_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_name;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1query_1save_1path_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::status_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::status_flags_t)libtorrent::torrent_handle::query_save_path;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1status_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  boost::uint32_t arg2 ;
  libtorrent::torrent_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->status(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_status **)&jresult = new libtorrent::torrent_status((const libtorrent::torrent_status &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1status_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_status **)&jresult = new libtorrent::torrent_status((const libtorrent::torrent_status &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1get_1download_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::partial_piece_info > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libtorrent::partial_piece_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::partial_piece_info > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->get_download_queue(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1alert_1when_1available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::deadline_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::deadline_flags)libtorrent::torrent_handle::alert_when_available;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1piece_1deadline_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1piece_1deadline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1reset_1piece_1deadline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->reset_piece_deadline(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1clear_1piece_1deadlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->clear_piece_deadlines();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_priority(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1piece_1granularity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::file_progress_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::file_progress_flags_t)libtorrent::torrent_handle::piece_granularity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1file_1progress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< boost::int64_t > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< boost::int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::int64_t > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->file_progress(*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1file_1progress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< boost::int64_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< boost::int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::int64_t > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->file_progress(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1clear_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->clear_error();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::announce_entry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->trackers();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::announce_entry > **)&jresult = new std::vector< libtorrent::announce_entry >((const std::vector< libtorrent::announce_entry > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1replace_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< libtorrent::announce_entry > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libtorrent::announce_entry > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::announce_entry > const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->replace_trackers((std::vector< libtorrent::announce_entry > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1add_1tracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::announce_entry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(libtorrent::announce_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::announce_entry const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->add_tracker((libtorrent::announce_entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1add_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->add_url_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1remove_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->remove_url_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1add_1http_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->add_http_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1remove_1http_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->remove_http_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->set_metadata((char const *)arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->is_valid();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1graceful_1pause_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::pause_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::pause_flags_t)libtorrent::torrent_handle::graceful_pause;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1pause_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->pause(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1pause_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->pause();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->resume();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1upload_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_upload_mode(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1share_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_share_mode(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1flush_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->flush_cache();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1apply_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->apply_ip_filter(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1force_1recheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->force_recheck();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1flush_1disk_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::save_resume_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::save_resume_flags_t)libtorrent::torrent_handle::flush_disk_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1save_1info_1dict_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::save_resume_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::save_resume_flags_t)libtorrent::torrent_handle::save_info_dict;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1only_1if_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::torrent_handle::save_resume_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::torrent_handle::save_resume_flags_t)libtorrent::torrent_handle::only_if_modified;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1save_1resume_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->save_resume_data(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1save_1resume_1data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->save_resume_data();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1need_1save_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->need_save_resume_data();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1auto_1managed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->auto_managed(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1queue_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->queue_position();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1queue_1position_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->queue_position_up();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1queue_1position_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->queue_position_down();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1queue_1position_1top(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->queue_position_top();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1queue_1position_1bottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->queue_position_bottom();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1resolve_1countries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->resolve_countries(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1resolve_1countries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->resolve_countries();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1ssl_1certificate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      (arg1)->set_ssl_certificate((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1ssl_1certificate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->set_ssl_certificate((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1ssl_1certificate_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->set_ssl_certificate_buffer((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1torrent_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info const > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->torrent_file();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< libtorrent::torrent_info const > **)&jresult = result ? new boost::shared_ptr< libtorrent::torrent_info const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1piece_1availability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->piece_availability(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1piece_1priority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->piece_priority(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1piece_1priority_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->piece_priority(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1prioritize_1pieces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->prioritize_pieces((std::vector< int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1prioritize_1pieces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->prioritize_pieces((std::vector< std::pair< int,int > > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1piece_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->piece_priorities();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1file_1priority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->file_priority(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1file_1priority_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->file_priority(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1prioritize_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->prioritize_files((std::vector< int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1file_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->file_priorities();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->force_reannounce(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->force_reannounce(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->force_reannounce();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1force_1dht_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->force_dht_announce();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1scrape_1tracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->scrape_tracker();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1upload_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_upload_limit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1upload_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->upload_limit();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1download_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_download_limit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1download_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->download_limit();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1pinned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_pinned(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1sequential_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_sequential_download(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1connect_1peer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  tcp::endpoint *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->connect_peer((tcp::endpoint const &)*arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1connect_1peer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  tcp::endpoint *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->connect_peer((tcp::endpoint const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1connect_1peer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  tcp::endpoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->connect_peer((tcp::endpoint const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1max_1uploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_max_uploads(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1max_1uploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->max_uploads();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1max_1connections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_max_connections(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1max_1connections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_handle const *)arg1)->max_connections();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1set_1tracker_1login(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->set_tracker_login((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1move_1storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1move_1storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1super_1seeding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((libtorrent::torrent_handle const *)arg1)->super_seeding(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1info_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_handle const *)arg1)->info_hash();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->operator ==((libtorrent::torrent_handle const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1op_1neq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->operator !=((libtorrent::torrent_handle const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::torrent_handle const *)arg1)->operator <((libtorrent::torrent_handle const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1handle_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      result = (boost::uint32_t)((libtorrent::torrent_handle const *)arg1)->id();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_handle *arg1 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_handle **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1status(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::torrent_status *)new libtorrent::torrent_status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_status *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(libtorrent::torrent_status **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_status const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::torrent_status const *)arg1)->operator ==((libtorrent::torrent_status const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_handle *arg2 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::torrent_handle *)& ((arg1)->handle);
  *(libtorrent::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->error);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1save_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->save_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1save_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->save_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1next_1announce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::posix_time::time_duration *arg2 = (boost::posix_time::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(boost::posix_time::time_duration **)&jarg2; 
  if (arg1) (arg1)->next_announce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1next_1announce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::posix_time::time_duration *)& ((arg1)->next_announce);
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1announce_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::posix_time::time_duration *arg2 = (boost::posix_time::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(boost::posix_time::time_duration **)&jarg2; 
  if (arg1) (arg1)->announce_interval = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1announce_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::posix_time::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::posix_time::time_duration *)& ((arg1)->announce_interval);
  *(boost::posix_time::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1current_1tracker_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->current_tracker = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1current_1tracker_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->current_tracker);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1payload_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1payload_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_payload_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1payload_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1payload_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_payload_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1failed_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_failed_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1failed_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_failed_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1redundant_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_redundant_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1redundant_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_redundant_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(libtorrent::bitfield **)&jarg2; 
  if (arg1) (arg1)->pieces = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::bitfield *)& ((arg1)->pieces);
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1verified_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(libtorrent::bitfield **)&jarg2; 
  if (arg1) (arg1)->verified_pieces = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1verified_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::bitfield *)& ((arg1)->verified_pieces);
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_done = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_done);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1wanted_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_wanted_done = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1wanted_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_wanted_done);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1wanted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_wanted = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1total_1wanted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_wanted);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1all_1time_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->all_time_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1all_1time_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->all_time_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1all_1time_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->all_time_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1all_1time_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (boost::int64_t) ((arg1)->all_time_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1added_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->added_time = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1added_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (time_t) ((arg1)->added_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1completed_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->completed_time = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1completed_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (time_t) ((arg1)->completed_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1last_1seen_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->last_seen_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1last_1seen_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (time_t) ((arg1)->last_seen_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1storage_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::storage_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (libtorrent::storage_mode_t)jarg2; 
  if (arg1) (arg1)->storage_mode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1storage_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::storage_mode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::storage_mode_t) ((arg1)->storage_mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1progress_1ppm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->progress_ppm = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1progress_1ppm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->progress_ppm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1queue_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->queue_position = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1queue_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->queue_position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1download_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1download_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->download_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->upload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1download_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1download_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->download_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->upload_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_seeds = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_seeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1list_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->list_seeds = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1list_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->list_seeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1list_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->list_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1list_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->list_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1connect_1candidates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connect_candidates = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1connect_1candidates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->connect_candidates);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1full_1copies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distributed_full_copies = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1full_1copies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->distributed_full_copies);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1fraction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distributed_fraction = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1fraction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->distributed_fraction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1copies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distributed_copies = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1distributed_1copies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (float) ((arg1)->distributed_copies);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1block_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1block_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->block_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1uploads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_uploads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1uploads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_uploads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_connections = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1num_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_connections);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1uploads_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->uploads_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1uploads_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->uploads_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1connections_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connections_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1connections_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->connections_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1up_1bandwidth_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->up_bandwidth_queue = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1up_1bandwidth_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->up_bandwidth_queue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1down_1bandwidth_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->down_bandwidth_queue = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1down_1bandwidth_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->down_bandwidth_queue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1time_1since_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->time_since_upload = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1time_1since_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->time_since_upload);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1time_1since_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->time_since_download = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1time_1since_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->time_since_download);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1active_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->active_time = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1active_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->active_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1finished_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->finished_time = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1finished_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->finished_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seeding_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seeding_time = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seeding_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->seeding_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seed_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed_rank = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seed_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->seed_rank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1last_1scrape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_scrape = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1last_1scrape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->last_scrape);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1sparse_1regions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sparse_regions = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1sparse_1regions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->sparse_regions);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (int) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = (libtorrent::torrent_status::state_t)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::torrent_status::state_t) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1need_1save_1resume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->need_save_resume = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1need_1save_1resume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->need_save_resume);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1ip_1filter_1applies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ip_filter_applies = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1ip_1filter_1applies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->ip_filter_applies);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->upload_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1upload_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->upload_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1share_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->share_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1share_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->share_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1super_1seeding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->super_seeding = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1super_1seeding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->super_seeding);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1paused_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->paused = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1paused_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->paused);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1auto_1managed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_managed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1auto_1managed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->auto_managed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1sequential_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sequential_download = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1sequential_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->sequential_download);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1seeding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_seeding = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1seeding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->is_seeding);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1finished_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_finished = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1finished_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->is_finished);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1has_1metadata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_metadata = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1has_1metadata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->has_metadata);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1has_1incoming_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_incoming = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1has_1incoming_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->has_incoming);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seed_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->seed_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1seed_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->seed_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1moving_1storage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->moving_storage = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1moving_1storage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->moving_storage);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1loaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_loaded = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1is_1loaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->is_loaded);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1status_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_status *arg1 = (libtorrent::torrent_status *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_status **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1seed_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_seed_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1override_1resume_1data_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_override_resume_data;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1upload_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_upload_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1share_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_share_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1apply_1ip_1filter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_apply_ip_filter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1paused_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_paused;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1auto_1managed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_auto_managed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1duplicate_1is_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_duplicate_is_error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1merge_1resume_1trackers_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_merge_resume_trackers;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1update_1subscribe_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_update_subscribe;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1super_1seeding_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_super_seeding;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1sequential_1download_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_sequential_download;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1use_1resume_1save_1path_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_use_resume_save_path;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1flag_1pinned_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::flag_pinned;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1default_1flags_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::add_torrent_params::flags_t)libtorrent::add_torrent_params::default_flags;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1ti_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *arg2 = (boost::shared_ptr< libtorrent::torrent_info > *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< libtorrent::torrent_info > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->ti = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1ti_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  boost::shared_ptr< libtorrent::torrent_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (boost::shared_ptr< libtorrent::torrent_info > *)& ((arg1)->ti);
  *(boost::shared_ptr< libtorrent::torrent_info > **)&jresult = (result && *result) ? new boost::shared_ptr< libtorrent::torrent_info >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1trackers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->trackers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1trackers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->trackers);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1url_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->url_seeds = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1url_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->url_seeds);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1dht_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::pair< std::string,int > > *arg2 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,int > > **)&jarg2; 
  if (arg1) (arg1)->dht_nodes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1dht_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::vector< std::pair< std::string,int > > *)& ((arg1)->dht_nodes);
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1save_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->save_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1save_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->save_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1resume_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2; 
  if (arg1) (arg1)->resume_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1resume_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::vector< char > *)& ((arg1)->resume_data);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1storage_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::storage_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (libtorrent::storage_mode_t)jarg2; 
  if (arg1) (arg1)->storage_mode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1storage_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::storage_mode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (libtorrent::storage_mode_t) ((arg1)->storage_mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1file_1priorities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< boost::uint8_t > *arg2 = (std::vector< boost::uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< boost::uint8_t > **)&jarg2; 
  if (arg1) (arg1)->file_priorities = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1file_1priorities_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::vector< boost::uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::vector< boost::uint8_t > *)& ((arg1)->file_priorities);
  *(std::vector< boost::uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->uuid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1source_1feed_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->source_feed_url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1source_1feed_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->source_feed_url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1max_1uploads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_uploads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1max_1uploads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->max_uploads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1max_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_connections = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1max_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->max_connections);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1upload_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1upload_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->upload_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1download_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1download_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->download_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  {
    try {
      result = (long long)libtorrent_add_torrent_params_getFlags(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  arg2 = (long long)jarg2; 
  {
    try {
      libtorrent_add_torrent_params_setFlags(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1create_1instance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent_add_torrent_params_create_instance();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::add_torrent_params **)&jresult = new libtorrent::add_torrent_params((const libtorrent::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1params_1create_1instance_1no_1storage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent_add_torrent_params_create_instance_no_storage();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::add_torrent_params **)&jresult = new libtorrent::add_torrent_params((const libtorrent::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1add_1torrent_1params(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::add_torrent_params *arg1 = (libtorrent::add_torrent_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::add_torrent_params **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1item(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::feed_item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::feed_item *)new libtorrent::feed_item();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1item(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->uuid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->description);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1comment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->comment = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->comment);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->category = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (std::string *) & ((arg1)->category);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (boost::int64_t) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  libtorrent::torrent_handle *arg2 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (libtorrent::torrent_handle *)& ((arg1)->handle);
  *(libtorrent::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1item_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_item *arg1 = (libtorrent::feed_item *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_item **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1feed_1item_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = 0 ;
  libtorrent::feed_item *arg2 = 0 ;
  libtorrent::add_torrent_params *arg3 = 0 ;
  libtorrent::torrent_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::session **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::session & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::feed_item **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::feed_item const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::add_torrent_params **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent::add_feed_item(*arg1,(libtorrent::feed_item const &)*arg2,(libtorrent::add_torrent_params const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = new libtorrent::torrent_handle((const libtorrent::torrent_handle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1feed_1item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = 0 ;
  libtorrent::feed_item *arg2 = 0 ;
  libtorrent::add_torrent_params *arg3 = 0 ;
  libtorrent::error_code *arg4 = 0 ;
  libtorrent::torrent_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtorrent::session **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::session & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::feed_item **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::feed_item const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::add_torrent_params **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return 0;
  } 
  arg4 = *(libtorrent::error_code **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent::add_feed_item(*arg1,(libtorrent::feed_item const &)*arg2,(libtorrent::add_torrent_params const &)*arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = new libtorrent::torrent_handle((const libtorrent::torrent_handle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::feed_settings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::feed_settings *)new libtorrent::feed_settings();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_settings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1auto_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_download = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1auto_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  result = (bool) ((arg1)->auto_download);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1auto_1map_1handles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_map_handles = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1auto_1map_1handles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  result = (bool) ((arg1)->auto_map_handles);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1default_1ttl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->default_ttl = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1default_1ttl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  result = (int) ((arg1)->default_ttl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1add_1args_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  libtorrent::add_torrent_params *arg2 = (libtorrent::add_torrent_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2; 
  if (arg1) (arg1)->add_args = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1settings_1add_1args_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  libtorrent::add_torrent_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  result = (libtorrent::add_torrent_params *)& ((arg1)->add_args);
  *(libtorrent::add_torrent_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::feed_settings *arg1 = (libtorrent::feed_settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::feed_settings **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1status(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::feed_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::feed_status *)new libtorrent::feed_status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (std::string *) & ((arg1)->description);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1last_1update_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->last_update = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1last_1update_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (time_t) ((arg1)->last_update);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1next_1update_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->next_update = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1next_1update_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (int) ((arg1)->next_update);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1updating_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->updating = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1updating_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (bool) ((arg1)->updating);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::vector< libtorrent::feed_item > *arg2 = (std::vector< libtorrent::feed_item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = *(std::vector< libtorrent::feed_item > **)&jarg2; 
  if (arg1) (arg1)->items = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  std::vector< libtorrent::feed_item > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (std::vector< libtorrent::feed_item > *)& ((arg1)->items);
  *(std::vector< libtorrent::feed_item > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1ttl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ttl = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1status_1ttl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  result = (int) ((arg1)->ttl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::feed_status *arg1 = (libtorrent::feed_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::feed_status **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1feed_1handle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::feed_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::feed_handle *)new libtorrent::feed_handle();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1update_1feed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::feed_handle *arg1 = (libtorrent::feed_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_handle **)&jarg1; 
  {
    try {
      (arg1)->update_feed();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1get_1feed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_handle *arg1 = (libtorrent::feed_handle *) 0 ;
  libtorrent::feed_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::feed_handle const *)arg1)->get_feed_status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_status **)&jresult = new libtorrent::feed_status((const libtorrent::feed_status &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1set_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::feed_handle *arg1 = (libtorrent::feed_handle *) 0 ;
  libtorrent::feed_settings *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::feed_handle **)&jarg1; 
  arg2 = *(libtorrent::feed_settings **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::feed_settings const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_settings((libtorrent::feed_settings const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_feed_1handle_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::feed_handle *arg1 = (libtorrent::feed_handle *) 0 ;
  libtorrent::feed_settings result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::feed_handle **)&jarg1; 
  {
    try {
      result = ((libtorrent::feed_handle const *)arg1)->settings();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_settings **)&jresult = new libtorrent::feed_settings((const libtorrent::feed_settings &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1feed_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::feed_handle *arg1 = (libtorrent::feed_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::feed_handle **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_op_1bittorrent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::operation_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::operation_t)libtorrent::op_bittorrent;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1num_1checking_1torrents_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::counters::stats_gauges_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::counters::stats_gauges_t)libtorrent::counters::num_checking_torrents;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1num_1gauge_1counters_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::counters::stats_gauges_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::counters::stats_gauges_t)libtorrent::counters::num_gauge_counters;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1counters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::counters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::counters *)new libtorrent::counters();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::counters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1counters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::counters *arg1 = 0 ;
  libtorrent::counters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::counters const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::counters *)new libtorrent::counters((libtorrent::counters const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::counters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1inc_1stats_1counter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      result = (boost::int64_t)(arg1)->inc_stats_counter(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1inc_1stats_1counter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)(arg1)->inc_stats_counter(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1op_1get_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)((libtorrent::counters const *)arg1)->operator [](arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      (arg1)->set_value(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_counters_1blend_1stats_1counter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->blend_stats_counter(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1counters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::counters *arg1 = (libtorrent::counters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::counters **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_close_1no_1reason_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::close_reason_t)libtorrent::close_no_reason;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_close_1encryption_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::close_reason_t)libtorrent::close_encryption_error;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_error_1to_1close_1reason(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::error_code *arg1 = 0 ;
  libtorrent::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::close_reason_t)libtorrent::error_to_close_reason((boost::system::error_code const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_TORRENT_1MAX_1ALERT_1TYPES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(15);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1error_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::error_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1peer_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::peer_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1port_1mapping_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::port_mapping_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1storage_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::storage_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1tracker_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::tracker_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1debug_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::debug_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1status_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::status_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1progress_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::progress_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1ip_1block_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::ip_block_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1performance_1warning_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::performance_warning;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1dht_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::dht_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1stats_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::stats_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1rss_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::rss_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1session_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::session_log_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1torrent_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::torrent_log_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1peer_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::peer_log_notification;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1all_1categories_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::alert::category_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::alert::category_t)libtorrent::alert::all_categories;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::alert const *)arg1)->timestamp();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_alert *)libtorrent_alert_cast_to_torrent_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_alert *)libtorrent_alert_cast_to_peer_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1tracker_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::tracker_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::tracker_alert *)libtorrent_alert_cast_to_tracker_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1added_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_added_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_added_alert *)libtorrent_alert_cast_to_torrent_added_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_added_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1removed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_removed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_removed_alert *)libtorrent_alert_cast_to_torrent_removed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_removed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1read_1piece_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::read_piece_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::read_piece_alert *)libtorrent_alert_cast_to_read_piece_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::read_piece_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1file_1completed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::file_completed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::file_completed_alert *)libtorrent_alert_cast_to_file_completed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_completed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1file_1renamed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::file_renamed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::file_renamed_alert *)libtorrent_alert_cast_to_file_renamed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_renamed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1file_1rename_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::file_rename_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::file_rename_failed_alert *)libtorrent_alert_cast_to_file_rename_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_rename_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1performance_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::performance_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::performance_alert *)libtorrent_alert_cast_to_performance_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::performance_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1state_1changed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::state_changed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::state_changed_alert *)libtorrent_alert_cast_to_state_changed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::state_changed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1tracker_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::tracker_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::tracker_error_alert *)libtorrent_alert_cast_to_tracker_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1tracker_1warning_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::tracker_warning_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::tracker_warning_alert *)libtorrent_alert_cast_to_tracker_warning_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_warning_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1scrape_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::scrape_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::scrape_reply_alert *)libtorrent_alert_cast_to_scrape_reply_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::scrape_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1scrape_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::scrape_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::scrape_failed_alert *)libtorrent_alert_cast_to_scrape_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::scrape_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1tracker_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::tracker_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::tracker_reply_alert *)libtorrent_alert_cast_to_tracker_reply_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_reply_alert *)libtorrent_alert_cast_to_dht_reply_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1tracker_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::tracker_announce_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::tracker_announce_alert *)libtorrent_alert_cast_to_tracker_announce_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_announce_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1hash_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::hash_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::hash_failed_alert *)libtorrent_alert_cast_to_hash_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::hash_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1ban_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_ban_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_ban_alert *)libtorrent_alert_cast_to_peer_ban_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_ban_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1unsnubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_unsnubbed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_unsnubbed_alert *)libtorrent_alert_cast_to_peer_unsnubbed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_unsnubbed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1snubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_snubbed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_snubbed_alert *)libtorrent_alert_cast_to_peer_snubbed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_snubbed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_error_alert *)libtorrent_alert_cast_to_peer_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1connect_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_connect_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_connect_alert *)libtorrent_alert_cast_to_peer_connect_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_connect_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1disconnected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_disconnected_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_disconnected_alert *)libtorrent_alert_cast_to_peer_disconnected_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_disconnected_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1invalid_1request_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::invalid_request_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::invalid_request_alert *)libtorrent_alert_cast_to_invalid_request_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::invalid_request_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_finished_alert *)libtorrent_alert_cast_to_torrent_finished_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1piece_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::piece_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::piece_finished_alert *)libtorrent_alert_cast_to_piece_finished_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::piece_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1request_1dropped_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::request_dropped_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::request_dropped_alert *)libtorrent_alert_cast_to_request_dropped_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::request_dropped_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1block_1timeout_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::block_timeout_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::block_timeout_alert *)libtorrent_alert_cast_to_block_timeout_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_timeout_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1block_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::block_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::block_finished_alert *)libtorrent_alert_cast_to_block_finished_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1block_1downloading_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::block_downloading_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::block_downloading_alert *)libtorrent_alert_cast_to_block_downloading_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_downloading_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1unwanted_1block_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::unwanted_block_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::unwanted_block_alert *)libtorrent_alert_cast_to_unwanted_block_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::unwanted_block_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1storage_1moved_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::storage_moved_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::storage_moved_alert *)libtorrent_alert_cast_to_storage_moved_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_moved_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1storage_1moved_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::storage_moved_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::storage_moved_failed_alert *)libtorrent_alert_cast_to_storage_moved_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_moved_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1deleted_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_deleted_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_deleted_alert *)libtorrent_alert_cast_to_torrent_deleted_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_deleted_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1delete_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_delete_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_delete_failed_alert *)libtorrent_alert_cast_to_torrent_delete_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_delete_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1save_1resume_1data_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::save_resume_data_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::save_resume_data_alert *)libtorrent_alert_cast_to_save_resume_data_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::save_resume_data_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1save_1resume_1data_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::save_resume_data_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::save_resume_data_failed_alert *)libtorrent_alert_cast_to_save_resume_data_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::save_resume_data_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1paused_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_paused_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_paused_alert *)libtorrent_alert_cast_to_torrent_paused_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_paused_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1resumed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_resumed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_resumed_alert *)libtorrent_alert_cast_to_torrent_resumed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_resumed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1checked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_checked_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_checked_alert *)libtorrent_alert_cast_to_torrent_checked_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_checked_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1url_1seed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::url_seed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::url_seed_alert *)libtorrent_alert_cast_to_url_seed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::url_seed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1file_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::file_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::file_error_alert *)libtorrent_alert_cast_to_file_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1metadata_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::metadata_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::metadata_failed_alert *)libtorrent_alert_cast_to_metadata_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::metadata_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1metadata_1received_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::metadata_received_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::metadata_received_alert *)libtorrent_alert_cast_to_metadata_received_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::metadata_received_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1udp_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::udp_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::udp_error_alert *)libtorrent_alert_cast_to_udp_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::udp_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1external_1ip_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::external_ip_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::external_ip_alert *)libtorrent_alert_cast_to_external_ip_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::external_ip_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1listen_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::listen_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::listen_failed_alert *)libtorrent_alert_cast_to_listen_failed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::listen_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1listen_1succeeded_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::listen_succeeded_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::listen_succeeded_alert *)libtorrent_alert_cast_to_listen_succeeded_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::listen_succeeded_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1portmap_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::portmap_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::portmap_error_alert *)libtorrent_alert_cast_to_portmap_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1portmap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::portmap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::portmap_alert *)libtorrent_alert_cast_to_portmap_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1portmap_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::portmap_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::portmap_log_alert *)libtorrent_alert_cast_to_portmap_log_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1fastresume_1rejected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::fastresume_rejected_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::fastresume_rejected_alert *)libtorrent_alert_cast_to_fastresume_rejected_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::fastresume_rejected_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1blocked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_blocked_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_blocked_alert *)libtorrent_alert_cast_to_peer_blocked_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_blocked_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_announce_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_announce_alert *)libtorrent_alert_cast_to_dht_announce_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_announce_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_get_peers_alert *)libtorrent_alert_cast_to_dht_get_peers_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::stats_alert *)libtorrent_alert_cast_to_stats_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1cache_1flushed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::cache_flushed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::cache_flushed_alert *)libtorrent_alert_cast_to_cache_flushed_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::cache_flushed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1anonymous_1mode_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::anonymous_mode_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::anonymous_mode_alert *)libtorrent_alert_cast_to_anonymous_mode_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::anonymous_mode_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1lsd_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::lsd_peer_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::lsd_peer_alert *)libtorrent_alert_cast_to_lsd_peer_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::lsd_peer_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1trackerid_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::trackerid_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::trackerid_alert *)libtorrent_alert_cast_to_trackerid_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::trackerid_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1bootstrap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_bootstrap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_bootstrap_alert *)libtorrent_alert_cast_to_dht_bootstrap_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_bootstrap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1rss_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::rss_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::rss_alert *)libtorrent_alert_cast_to_rss_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::rss_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_error_alert *)libtorrent_alert_cast_to_torrent_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1need_1cert_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_need_cert_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_need_cert_alert *)libtorrent_alert_cast_to_torrent_need_cert_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_need_cert_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1incoming_1connection_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::incoming_connection_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::incoming_connection_alert *)libtorrent_alert_cast_to_incoming_connection_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::incoming_connection_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1add_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::add_torrent_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::add_torrent_alert *)libtorrent_alert_cast_to_add_torrent_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::add_torrent_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1state_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::state_update_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::state_update_alert *)libtorrent_alert_cast_to_state_update_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::state_update_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1mmap_1cache_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::mmap_cache_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::mmap_cache_alert *)libtorrent_alert_cast_to_mmap_cache_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::mmap_cache_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1session_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::session_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::session_stats_alert *)libtorrent_alert_cast_to_session_stats_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_update_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_update_alert *)libtorrent_alert_cast_to_torrent_update_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_update_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1rss_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::rss_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::rss_item_alert *)libtorrent_alert_cast_to_rss_item_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::rss_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_error_alert *)libtorrent_alert_cast_to_dht_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1immutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_immutable_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_immutable_item_alert *)libtorrent_alert_cast_to_dht_immutable_item_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_immutable_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1mutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_mutable_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_mutable_item_alert *)libtorrent_alert_cast_to_dht_mutable_item_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_mutable_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1put_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_put_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_put_alert *)libtorrent_alert_cast_to_dht_put_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_put_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1i2p_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::i2p_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::i2p_alert *)libtorrent_alert_cast_to_i2p_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::i2p_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1outgoing_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_outgoing_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_outgoing_get_peers_alert *)libtorrent_alert_cast_to_dht_outgoing_get_peers_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_outgoing_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::log_alert *)libtorrent_alert_cast_to_log_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1torrent_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::torrent_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::torrent_log_alert *)libtorrent_alert_cast_to_torrent_log_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1peer_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::peer_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::peer_log_alert *)libtorrent_alert_cast_to_peer_log_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1lsd_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::lsd_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::lsd_error_alert *)libtorrent_alert_cast_to_lsd_error_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::lsd_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_stats_alert *)libtorrent_alert_cast_to_dht_stats_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1dht_1get_1peers_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::dht_get_peers_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::dht_get_peers_reply_alert *)libtorrent_alert_cast_to_dht_get_peers_reply_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_get_peers_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_alert_1cast_1to_1set_1piece_1hashes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::alert *arg1 = (libtorrent::alert *) 0 ;
  libtorrent::set_piece_hashes_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::alert **)&jarg1; 
  {
    try {
      result = (libtorrent::set_piece_hashes_alert *)libtorrent_alert_cast_to_set_piece_hashes_alert(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::set_piece_hashes_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_operation_1name(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (char *)libtorrent::operation_name(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_user_1alert_1id_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)libtorrent::user_alert_id;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  libtorrent::torrent_handle *arg2 = (libtorrent::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  libtorrent::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  result = (libtorrent::torrent_handle *)& ((arg1)->handle);
  *(libtorrent::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_alert *arg1 = (libtorrent::torrent_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->ip);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  libtorrent::peer_id *arg2 = (libtorrent::peer_id *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  arg2 = *(libtorrent::peer_id **)&jarg2; 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  libtorrent::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  result = (libtorrent::peer_id *)& ((arg1)->pid);
  *(libtorrent::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_alert *arg1 = (libtorrent::peer_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::tracker_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_alert *arg1 = (libtorrent::tracker_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1added_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_added_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_added_alert *)new libtorrent::torrent_added_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_added_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_added_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_added_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_added_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_added_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_added_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_added_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_added_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_added_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_added_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_added_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1added_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_added_alert *arg1 = (libtorrent::torrent_added_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_added_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1removed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  libtorrent::torrent_removed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_removed_alert *)new libtorrent::torrent_removed_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_removed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_removed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_removed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_removed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_removed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_removed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_removed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_removed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1removed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_removed_alert *arg1 = (libtorrent::torrent_removed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_removed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::read_piece_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::read_piece_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::read_piece_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::read_piece_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::read_piece_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::read_piece_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::read_piece_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1ec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->ec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1ec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->ec);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  result = (int) ((arg1)->piece);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1read_1piece_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::read_piece_alert *arg1 = (libtorrent::read_piece_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::read_piece_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1completed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::file_completed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::file_completed_alert *)new libtorrent::file_completed_alert((libtorrent::torrent_handle const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_completed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_completed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_completed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_completed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::file_completed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_completed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::file_completed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  result = (int) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1completed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_completed_alert *arg1 = (libtorrent::file_completed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_completed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1renamed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  libtorrent::file_renamed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::file_renamed_alert *)new libtorrent::file_renamed_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_renamed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_renamed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_renamed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_renamed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::file_renamed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_renamed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::file_renamed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::file_renamed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  result = (int) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1renamed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_renamed_alert *arg1 = (libtorrent::file_renamed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_renamed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1rename_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::error_code arg3 ;
  libtorrent::error_code *argp3 ;
  libtorrent::file_rename_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  argp3 = *(libtorrent::error_code **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::error_code");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (libtorrent::file_rename_failed_alert *)new libtorrent::file_rename_failed_alert((libtorrent::torrent_handle const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_rename_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_rename_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_rename_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_rename_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::file_rename_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_rename_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::file_rename_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::file_rename_failed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  result = (int) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1rename_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_rename_failed_alert *arg1 = (libtorrent::file_rename_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_rename_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1performance_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::performance_alert::performance_warning_t arg2 ;
  libtorrent::performance_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (libtorrent::performance_alert::performance_warning_t)jarg2; 
  {
    try {
      result = (libtorrent::performance_alert *)new libtorrent::performance_alert((libtorrent::torrent_handle const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::performance_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::performance_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::performance_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::performance_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::performance_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::performance_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::performance_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1warning_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  libtorrent::performance_alert::performance_warning_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  arg2 = (libtorrent::performance_alert::performance_warning_t)jarg2; 
  if (arg1) (arg1)->warning_code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1warning_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  libtorrent::performance_alert::performance_warning_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  result = (libtorrent::performance_alert::performance_warning_t) ((arg1)->warning_code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1performance_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::performance_alert *arg1 = (libtorrent::performance_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::performance_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1state_1changed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  libtorrent::torrent_status::state_t arg3 ;
  libtorrent::state_changed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (libtorrent::torrent_status::state_t)jarg2; 
  arg3 = (libtorrent::torrent_status::state_t)jarg3; 
  {
    try {
      result = (libtorrent::state_changed_alert *)new libtorrent::state_changed_alert((libtorrent::torrent_handle const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::state_changed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::state_changed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::state_changed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::state_changed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::state_changed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::state_changed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::state_changed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  arg2 = (libtorrent::torrent_status::state_t)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  result = (libtorrent::torrent_status::state_t) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1prev_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  arg2 = (libtorrent::torrent_status::state_t)jarg2; 
  if (arg1) (arg1)->prev_state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1prev_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  libtorrent::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  result = (libtorrent::torrent_status::state_t) ((arg1)->prev_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1state_1changed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::state_changed_alert *arg1 = (libtorrent::state_changed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::state_changed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tracker_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  libtorrent::error_code *arg5 = 0 ;
  std::string *arg6 = 0 ;
  libtorrent::tracker_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(libtorrent::error_code **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      result = (libtorrent::tracker_error_alert *)new libtorrent::tracker_error_alert((libtorrent::torrent_handle const &)*arg1,arg2,arg3,(std::string const &)*arg4,(libtorrent::error_code const &)*arg5,(std::string const &)*arg6);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::tracker_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::tracker_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1times_1in_1row_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->times_in_row = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1times_1in_1row_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  result = (int) ((arg1)->times_in_row);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1status_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status_code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1status_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  result = (int) ((arg1)->status_code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_error_alert *arg1 = (libtorrent::tracker_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tracker_1warning_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::tracker_warning_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::tracker_warning_alert *)new libtorrent::tracker_warning_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_warning_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_warning_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_warning_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_warning_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::tracker_warning_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_warning_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::tracker_warning_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1warning_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_warning_alert *arg1 = (libtorrent::tracker_warning_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_warning_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1scrape_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  libtorrent::scrape_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (libtorrent::scrape_reply_alert *)new libtorrent::scrape_reply_alert((libtorrent::torrent_handle const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::scrape_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::scrape_reply_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::scrape_reply_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::scrape_reply_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::scrape_reply_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::scrape_reply_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  result = (int) ((arg1)->incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->complete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  result = (int) ((arg1)->complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1scrape_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::scrape_reply_alert *arg1 = (libtorrent::scrape_reply_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::scrape_reply_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1scrape_1failed_1alert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  libtorrent::scrape_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::scrape_failed_alert *)new libtorrent::scrape_failed_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(libtorrent::error_code const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::scrape_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1scrape_1failed_1alert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::scrape_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::scrape_failed_alert *)new libtorrent::scrape_failed_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::scrape_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::scrape_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::scrape_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::scrape_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::scrape_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::scrape_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::scrape_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1scrape_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::scrape_failed_alert *arg1 = (libtorrent::scrape_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::scrape_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tracker_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::tracker_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::tracker_reply_alert *)new libtorrent::tracker_reply_alert((libtorrent::torrent_handle const &)*arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_reply_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_reply_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_reply_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::tracker_reply_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::tracker_reply_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  result = (int) ((arg1)->num_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_reply_alert *arg1 = (libtorrent::tracker_reply_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_reply_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::dht_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::dht_reply_alert *)new libtorrent::dht_reply_alert((libtorrent::torrent_handle const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_reply_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_reply_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_reply_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_reply_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_reply_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  result = (int) ((arg1)->num_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_reply_alert *arg1 = (libtorrent::dht_reply_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_reply_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tracker_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  libtorrent::tracker_announce_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::tracker_announce_alert *)new libtorrent::tracker_announce_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_announce_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::tracker_announce_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_announce_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::tracker_announce_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::tracker_announce_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::tracker_announce_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1event_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1event_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  result = (int) ((arg1)->event);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_announce_alert *arg1 = (libtorrent::tracker_announce_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_announce_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1hash_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::hash_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::hash_failed_alert *)new libtorrent::hash_failed_alert((libtorrent::torrent_handle const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::hash_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::hash_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::hash_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::hash_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::hash_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::hash_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::hash_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1hash_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::hash_failed_alert *arg1 = (libtorrent::hash_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::hash_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1ban_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::peer_ban_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::peer_ban_alert *)new libtorrent::peer_ban_alert(arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_ban_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_ban_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_ban_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_ban_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_ban_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_ban_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_ban_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_ban_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_ban_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_ban_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1ban_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_ban_alert *arg1 = (libtorrent::peer_ban_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_ban_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1unsnubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::peer_unsnubbed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::peer_unsnubbed_alert *)new libtorrent::peer_unsnubbed_alert(arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_unsnubbed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_unsnubbed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_unsnubbed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_unsnubbed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_unsnubbed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_unsnubbed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_unsnubbed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_unsnubbed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_unsnubbed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_unsnubbed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1unsnubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_unsnubbed_alert *arg1 = (libtorrent::peer_unsnubbed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_unsnubbed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1snubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::peer_snubbed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::peer_snubbed_alert *)new libtorrent::peer_snubbed_alert(arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_snubbed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_snubbed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_snubbed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_snubbed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_snubbed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_snubbed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_snubbed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_snubbed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_snubbed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_snubbed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1snubbed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_snubbed_alert *arg1 = (libtorrent::peer_snubbed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_snubbed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  libtorrent::error_code *arg5 = 0 ;
  libtorrent::peer_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = *(libtorrent::error_code **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::peer_error_alert *)new libtorrent::peer_error_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,(libtorrent::error_code const &)*arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  result = (int) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_error_alert *arg1 = (libtorrent::peer_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1connect_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::peer_connect_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (libtorrent::peer_connect_alert *)new libtorrent::peer_connect_alert(arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_connect_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_connect_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_connect_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_connect_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_connect_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_connect_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_connect_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1socket_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->socket_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1socket_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  result = (int) ((arg1)->socket_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1connect_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_connect_alert *arg1 = (libtorrent::peer_connect_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_connect_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1disconnected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  libtorrent::operation_t arg4 ;
  int arg5 ;
  libtorrent::error_code *arg6 = 0 ;
  libtorrent::close_reason_t arg7 ;
  libtorrent::peer_disconnected_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (libtorrent::operation_t)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(libtorrent::error_code **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  arg7 = (libtorrent::close_reason_t)jarg7; 
  {
    try {
      result = (libtorrent::peer_disconnected_alert *)new libtorrent::peer_disconnected_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5,(libtorrent::error_code const &)*arg6,arg7);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_disconnected_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_disconnected_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_disconnected_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_disconnected_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_disconnected_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_disconnected_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_disconnected_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1socket_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->socket_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1socket_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  result = (int) ((arg1)->socket_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  arg2 = (libtorrent::operation_t)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  result = (libtorrent::operation_t) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::close_reason_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  arg2 = (libtorrent::close_reason_t)jarg2; 
  if (arg1) (arg1)->reason = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  libtorrent::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  result = (libtorrent::close_reason_t) ((arg1)->reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1disconnected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_disconnected_alert *arg1 = (libtorrent::peer_disconnected_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_disconnected_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1invalid_1request_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  libtorrent::peer_request *arg4 = 0 ;
  libtorrent::invalid_request_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = *(libtorrent::peer_request **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::invalid_request_alert *)new libtorrent::invalid_request_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,(libtorrent::peer_request const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::invalid_request_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::invalid_request_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::invalid_request_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::invalid_request_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::invalid_request_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::invalid_request_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1request_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  libtorrent::peer_request *arg2 = (libtorrent::peer_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  arg2 = *(libtorrent::peer_request **)&jarg2; 
  if (arg1) (arg1)->request = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1request_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  libtorrent::peer_request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  result = (libtorrent::peer_request *)& ((arg1)->request);
  *(libtorrent::peer_request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1invalid_1request_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::invalid_request_alert *arg1 = (libtorrent::invalid_request_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::invalid_request_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_finished_alert *)new libtorrent::torrent_finished_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_finished_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_finished_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_finished_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_finished_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_finished_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_finished_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_finished_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_finished_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_finished_alert *arg1 = (libtorrent::torrent_finished_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_finished_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1piece_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::piece_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::piece_finished_alert *)new libtorrent::piece_finished_alert((libtorrent::torrent_handle const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::piece_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::piece_finished_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::piece_finished_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::piece_finished_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::piece_finished_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::piece_finished_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::piece_finished_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1piece_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::piece_finished_alert *arg1 = (libtorrent::piece_finished_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::piece_finished_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1request_1dropped_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  libtorrent::request_dropped_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::request_dropped_alert *)new libtorrent::request_dropped_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::request_dropped_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::request_dropped_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::request_dropped_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::request_dropped_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::request_dropped_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::request_dropped_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::request_dropped_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1request_1dropped_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::request_dropped_alert *arg1 = (libtorrent::request_dropped_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::request_dropped_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1block_1timeout_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  libtorrent::block_timeout_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::block_timeout_alert *)new libtorrent::block_timeout_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_timeout_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_timeout_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_timeout_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_timeout_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::block_timeout_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_timeout_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::block_timeout_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1block_1timeout_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::block_timeout_alert *arg1 = (libtorrent::block_timeout_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::block_timeout_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1block_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  libtorrent::block_finished_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::block_finished_alert *)new libtorrent::block_finished_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_finished_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_finished_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_finished_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_finished_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::block_finished_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_finished_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::block_finished_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1block_1finished_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::block_finished_alert *arg1 = (libtorrent::block_finished_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::block_finished_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1block_1downloading_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  libtorrent::block_downloading_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::block_downloading_alert *)new libtorrent::block_downloading_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::block_downloading_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_downloading_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_downloading_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::block_downloading_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::block_downloading_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::block_downloading_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::block_downloading_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1block_1downloading_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::block_downloading_alert *arg1 = (libtorrent::block_downloading_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::block_downloading_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1unwanted_1block_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  libtorrent::unwanted_block_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::unwanted_block_alert *)new libtorrent::unwanted_block_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::unwanted_block_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::unwanted_block_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::unwanted_block_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::unwanted_block_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::unwanted_block_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::unwanted_block_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  result = (int) ((arg1)->piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1unwanted_1block_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::unwanted_block_alert *arg1 = (libtorrent::unwanted_block_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::unwanted_block_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1storage_1moved_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libtorrent::storage_moved_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libtorrent::storage_moved_alert *)new libtorrent::storage_moved_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_moved_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::storage_moved_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::storage_moved_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::storage_moved_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::storage_moved_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::storage_moved_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::storage_moved_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1storage_1moved_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::storage_moved_alert *arg1 = (libtorrent::storage_moved_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::storage_moved_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1storage_1moved_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  libtorrent::storage_moved_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (libtorrent::storage_moved_failed_alert *)new libtorrent::storage_moved_failed_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2,(std::string const &)*arg3,(char const *)arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::storage_moved_failed_alert **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::storage_moved_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::storage_moved_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::storage_moved_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::storage_moved_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::storage_moved_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::storage_moved_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->file = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->file);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->operation = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->operation, (const char *)arg2);
    } else {
      arg1->operation = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  result = (char *) ((arg1)->operation);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1storage_1moved_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::storage_moved_failed_alert *arg1 = (libtorrent::storage_moved_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::storage_moved_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1deleted_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  libtorrent::torrent_deleted_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_deleted_alert *)new libtorrent::torrent_deleted_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_deleted_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_deleted_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_deleted_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_deleted_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_deleted_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_deleted_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_deleted_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_deleted_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1deleted_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_deleted_alert *arg1 = (libtorrent::torrent_deleted_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_deleted_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1delete_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  libtorrent::torrent_delete_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_delete_failed_alert *)new libtorrent::torrent_delete_failed_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_delete_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_delete_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_delete_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_delete_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_delete_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_delete_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_delete_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_delete_failed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1delete_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_delete_failed_alert *arg1 = (libtorrent::torrent_delete_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_delete_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1save_1resume_1data_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< libtorrent::entry > *arg1 = 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry > tempnull1 ;
  libtorrent::save_resume_data_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< libtorrent::entry > **)&jarg1 : &tempnull1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::save_resume_data_alert *)new libtorrent::save_resume_data_alert((boost::shared_ptr< libtorrent::entry > const &)*arg1,(libtorrent::torrent_handle const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::save_resume_data_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::save_resume_data_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::save_resume_data_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::save_resume_data_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::save_resume_data_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::save_resume_data_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::save_resume_data_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::save_resume_data_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1resume_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  boost::shared_ptr< libtorrent::entry > *arg2 = 0 ;
  boost::shared_ptr< libtorrent::entry > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< libtorrent::entry > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->resume_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1resume_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  boost::shared_ptr< libtorrent::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  result = (boost::shared_ptr< libtorrent::entry > *) & ((arg1)->resume_data);
  *(boost::shared_ptr< libtorrent::entry > **)&jresult = *result ? new boost::shared_ptr< libtorrent::entry >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1save_1resume_1data_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::save_resume_data_alert *arg1 = (libtorrent::save_resume_data_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::save_resume_data_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1save_1resume_1data_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::save_resume_data_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::save_resume_data_failed_alert *)new libtorrent::save_resume_data_failed_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::save_resume_data_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::save_resume_data_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::save_resume_data_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::save_resume_data_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::save_resume_data_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::save_resume_data_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::save_resume_data_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::save_resume_data_failed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1save_1resume_1data_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::save_resume_data_failed_alert *arg1 = (libtorrent::save_resume_data_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::save_resume_data_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1paused_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_paused_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_paused_alert *)new libtorrent::torrent_paused_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_paused_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_paused_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_paused_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_paused_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_paused_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_paused_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_paused_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_paused_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_paused_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_paused_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_paused_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1paused_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_paused_alert *arg1 = (libtorrent::torrent_paused_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_paused_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1resumed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_resumed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_resumed_alert *)new libtorrent::torrent_resumed_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_resumed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_resumed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_resumed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_resumed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_resumed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_resumed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_resumed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_resumed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_resumed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_resumed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_resumed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1resumed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_resumed_alert *arg1 = (libtorrent::torrent_resumed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_resumed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1checked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_checked_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_checked_alert *)new libtorrent::torrent_checked_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_checked_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_checked_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_checked_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_checked_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_checked_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_checked_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_checked_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_checked_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_checked_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_checked_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_checked_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1checked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_checked_alert *arg1 = (libtorrent::torrent_checked_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_checked_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1url_1seed_1alert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  libtorrent::url_seed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::url_seed_alert *)new libtorrent::url_seed_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(libtorrent::error_code const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::url_seed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1url_1seed_1alert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::url_seed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::url_seed_alert *)new libtorrent::url_seed_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::url_seed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::url_seed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::url_seed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::url_seed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::url_seed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::url_seed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::url_seed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1url_1seed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::url_seed_alert *arg1 = (libtorrent::url_seed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::url_seed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1file_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  libtorrent::error_code *arg1 = 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  libtorrent::torrent_handle *arg4 = 0 ;
  libtorrent::file_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libtorrent::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(libtorrent::torrent_handle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::file_error_alert *)new libtorrent::file_error_alert((libtorrent::error_code const &)*arg1,(std::string const &)*arg2,(char const *)arg3,(libtorrent::torrent_handle const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_error_alert **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::file_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::file_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::file_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::file_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->file = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->file);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->operation = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->operation, (const char *)arg2);
    } else {
      arg1->operation = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  result = (char *) ((arg1)->operation);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1file_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::file_error_alert *arg1 = (libtorrent::file_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::file_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1metadata_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::metadata_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::metadata_failed_alert *)new libtorrent::metadata_failed_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::metadata_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::metadata_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::metadata_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::metadata_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::metadata_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::metadata_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::metadata_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1metadata_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::metadata_failed_alert *arg1 = (libtorrent::metadata_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::metadata_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1metadata_1received_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::metadata_received_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::metadata_received_alert *)new libtorrent::metadata_received_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::metadata_received_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::metadata_received_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_received_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::metadata_received_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_received_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::metadata_received_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_received_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::metadata_received_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::metadata_received_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::metadata_received_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::metadata_received_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1metadata_1received_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::metadata_received_alert *arg1 = (libtorrent::metadata_received_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::metadata_received_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1udp_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  udp::endpoint *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::udp_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(udp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "udp::endpoint const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::udp_error_alert *)new libtorrent::udp_error_alert((udp::endpoint const &)*arg1,(libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::udp_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::udp_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::udp_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::udp_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::udp_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::udp_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::udp_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  udp::endpoint *arg2 = (udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  arg2 = *(udp::endpoint **)&jarg2; 
  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  result = (udp::endpoint *)& ((arg1)->endpoint);
  *(udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1udp_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::udp_error_alert *arg1 = (libtorrent::udp_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::udp_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1external_1ip_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::address *arg1 = 0 ;
  libtorrent::external_ip_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::address **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::external_ip_alert *)new libtorrent::external_ip_alert((libtorrent::address const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::external_ip_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::external_ip_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::external_ip_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::external_ip_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::external_ip_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::external_ip_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::external_ip_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1external_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  arg2 = *(libtorrent::address **)&jarg2; 
  if (arg1) (arg1)->external_address = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1external_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  libtorrent::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  result = (libtorrent::address *)& ((arg1)->external_address);
  *(libtorrent::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1external_1ip_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::external_ip_alert *arg1 = (libtorrent::external_ip_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::external_ip_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1listen_1failed_1alert(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  libtorrent::error_code *arg3 = 0 ;
  libtorrent::listen_failed_alert::socket_type_t arg4 ;
  libtorrent::listen_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  arg4 = (libtorrent::listen_failed_alert::socket_type_t)jarg4; 
  {
    try {
      result = (libtorrent::listen_failed_alert *)new libtorrent::listen_failed_alert(arg1,arg2,(libtorrent::error_code const &)*arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::listen_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::listen_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::listen_failed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::listen_failed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::listen_failed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::listen_failed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::listen_failed_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::listen_failed_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1_1interface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->interface = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1_1interface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->interface);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  result = (int) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1sock_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::listen_failed_alert::socket_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  arg2 = (libtorrent::listen_failed_alert::socket_type_t)jarg2; 
  if (arg1) (arg1)->sock_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1sock_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  libtorrent::listen_failed_alert::socket_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  result = (libtorrent::listen_failed_alert::socket_type_t) ((arg1)->sock_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1listen_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::listen_failed_alert *arg1 = (libtorrent::listen_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::listen_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1listen_1succeeded_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  tcp::endpoint *arg1 = 0 ;
  libtorrent::listen_succeeded_alert::socket_type_t arg2 ;
  libtorrent::listen_succeeded_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tcp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg2 = (libtorrent::listen_succeeded_alert::socket_type_t)jarg2; 
  {
    try {
      result = (libtorrent::listen_succeeded_alert *)new libtorrent::listen_succeeded_alert((tcp::endpoint const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::listen_succeeded_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::listen_succeeded_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::listen_succeeded_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::listen_succeeded_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::listen_succeeded_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::listen_succeeded_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::listen_succeeded_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::listen_succeeded_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->endpoint);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1sock_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  libtorrent::listen_succeeded_alert::socket_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  arg2 = (libtorrent::listen_succeeded_alert::socket_type_t)jarg2; 
  if (arg1) (arg1)->sock_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1sock_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  libtorrent::listen_succeeded_alert::socket_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  result = (libtorrent::listen_succeeded_alert::socket_type_t) ((arg1)->sock_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1listen_1succeeded_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::listen_succeeded_alert *arg1 = (libtorrent::listen_succeeded_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::listen_succeeded_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1portmap_1error_1alert(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  libtorrent::error_code *arg3 = 0 ;
  libtorrent::portmap_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::portmap_error_alert *)new libtorrent::portmap_error_alert(arg1,arg2,(libtorrent::error_code const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::portmap_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::portmap_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1mapping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mapping = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1mapping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  result = (int) ((arg1)->mapping);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1map_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->map_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1map_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  result = (int) ((arg1)->map_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1portmap_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::portmap_error_alert *arg1 = (libtorrent::portmap_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::portmap_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1portmap_1alert(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  libtorrent::portmap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::portmap_alert *)new libtorrent::portmap_alert(arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::portmap_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::portmap_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1mapping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mapping = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1mapping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  result = (int) ((arg1)->mapping);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1external_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->external_port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1external_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  result = (int) ((arg1)->external_port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1map_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->map_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1map_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  result = (int) ((arg1)->map_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1portmap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::portmap_alert *arg1 = (libtorrent::portmap_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::portmap_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1portmap_1log_1alert(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  libtorrent::portmap_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libtorrent::portmap_log_alert *)new libtorrent::portmap_log_alert(arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::portmap_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_log_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::portmap_log_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::portmap_log_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::portmap_log_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::portmap_log_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1map_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->map_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1map_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  result = (int) ((arg1)->map_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1portmap_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::portmap_log_alert *arg1 = (libtorrent::portmap_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::portmap_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1fastresume_1rejected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  libtorrent::fastresume_rejected_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (libtorrent::fastresume_rejected_alert *)new libtorrent::fastresume_rejected_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2,(std::string const &)*arg3,(char const *)arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::fastresume_rejected_alert **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::fastresume_rejected_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::fastresume_rejected_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::fastresume_rejected_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::fastresume_rejected_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::fastresume_rejected_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::fastresume_rejected_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->file = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->file);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->operation = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->operation, (const char *)arg2);
    } else {
      arg1->operation = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  result = (char *) ((arg1)->operation);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1fastresume_1rejected_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::fastresume_rejected_alert *arg1 = (libtorrent::fastresume_rejected_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::fastresume_rejected_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1blocked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::address *arg2 = 0 ;
  int arg3 ;
  libtorrent::peer_blocked_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::address const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::peer_blocked_alert *)new libtorrent::peer_blocked_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::address const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_blocked_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_blocked_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_blocked_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_blocked_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_blocked_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_blocked_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_blocked_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  arg2 = *(libtorrent::address **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  libtorrent::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  result = (libtorrent::address *)& ((arg1)->ip);
  *(libtorrent::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reason = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  result = (int) ((arg1)->reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1blocked_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_blocked_alert *arg1 = (libtorrent::peer_blocked_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_blocked_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::address *arg1 = 0 ;
  int arg2 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  libtorrent::dht_announce_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::address **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::address const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::dht_announce_alert *)new libtorrent::dht_announce_alert((libtorrent::address const &)*arg1,arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_announce_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_announce_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_announce_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_announce_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_announce_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_announce_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_announce_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  arg2 = *(libtorrent::address **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  result = (libtorrent::address *)& ((arg1)->ip);
  *(libtorrent::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  result = (int) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_announce_alert *arg1 = (libtorrent::dht_announce_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_announce_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  libtorrent::dht_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::dht_get_peers_alert *)new libtorrent::dht_get_peers_alert((libtorrent::sha1_hash const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_get_peers_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_get_peers_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_get_peers_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_get_peers_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_get_peers_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_get_peers_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_get_peers_alert *arg1 = (libtorrent::dht_get_peers_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_get_peers_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  libtorrent::stat *arg3 = 0 ;
  libtorrent::stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::stat **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::stat const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::stats_alert *)new libtorrent::stats_alert((libtorrent::torrent_handle const &)*arg1,arg2,(libtorrent::stat const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stats_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stats_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::stats_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::stats_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stats_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::stats_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->interval = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  result = (int) ((arg1)->interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1transferred_1v(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      result = libtorrent_stats_alert_transferred_v(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::stats_alert *arg1 = (libtorrent::stats_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::stats_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1cache_1flushed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::cache_flushed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::cache_flushed_alert *)new libtorrent::cache_flushed_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::cache_flushed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::cache_flushed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cache_flushed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::cache_flushed_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cache_flushed_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::cache_flushed_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cache_flushed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::cache_flushed_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::cache_flushed_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1cache_1flushed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::cache_flushed_alert *arg1 = (libtorrent::cache_flushed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::cache_flushed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1anonymous_1mode_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::anonymous_mode_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::anonymous_mode_alert *)new libtorrent::anonymous_mode_alert((libtorrent::torrent_handle const &)*arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::anonymous_mode_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::anonymous_mode_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::anonymous_mode_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::anonymous_mode_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::anonymous_mode_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::anonymous_mode_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::anonymous_mode_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1tracker_1not_1anonymous_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::anonymous_mode_alert::kind_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::anonymous_mode_alert::kind_t)libtorrent::anonymous_mode_alert::tracker_not_anonymous;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  result = (int) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1str_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->str = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1str_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->str);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1anonymous_1mode_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::anonymous_mode_alert *arg1 = (libtorrent::anonymous_mode_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::anonymous_mode_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1lsd_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::lsd_peer_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::lsd_peer_alert *)new libtorrent::lsd_peer_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::lsd_peer_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::lsd_peer_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_peer_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::lsd_peer_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_peer_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::lsd_peer_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_peer_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::lsd_peer_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::lsd_peer_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_peer_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::lsd_peer_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1lsd_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::lsd_peer_alert *arg1 = (libtorrent::lsd_peer_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::lsd_peer_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1trackerid_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::trackerid_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::trackerid_alert *)new libtorrent::trackerid_alert((libtorrent::torrent_handle const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::trackerid_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::trackerid_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::trackerid_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::trackerid_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::trackerid_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::trackerid_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::trackerid_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1trackerid_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::trackerid_alert *arg1 = (libtorrent::trackerid_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::trackerid_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1bootstrap_1alert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::dht_bootstrap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::dht_bootstrap_alert *)new libtorrent::dht_bootstrap_alert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_bootstrap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_bootstrap_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_bootstrap_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_bootstrap_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_bootstrap_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_bootstrap_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_bootstrap_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1bootstrap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_bootstrap_alert *arg1 = (libtorrent::dht_bootstrap_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1rss_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  libtorrent::feed_handle arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  libtorrent::error_code *arg4 = 0 ;
  libtorrent::feed_handle *argp1 ;
  libtorrent::rss_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  argp1 = *(libtorrent::feed_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::feed_handle");
    return 0;
  }
  arg1 = *argp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(libtorrent::error_code **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::rss_alert *)new libtorrent::rss_alert(arg1,(std::string const &)*arg2,arg3,(libtorrent::error_code const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::rss_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::rss_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::rss_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::rss_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::rss_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::rss_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::rss_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  libtorrent::feed_handle *arg2 = (libtorrent::feed_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  arg2 = *(libtorrent::feed_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  libtorrent::feed_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  result = (libtorrent::feed_handle *)& ((arg1)->handle);
  *(libtorrent::feed_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  result = (int) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1rss_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::rss_alert *arg1 = (libtorrent::rss_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::rss_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libtorrent::torrent_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::torrent_error_alert *)new libtorrent::torrent_error_alert((libtorrent::torrent_handle const &)*arg1,(libtorrent::error_code const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1error_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->error_file = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1error_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->error_file);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_error_alert *arg1 = (libtorrent::torrent_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1need_1cert_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  libtorrent::torrent_need_cert_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_need_cert_alert *)new libtorrent::torrent_need_cert_alert((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_need_cert_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_need_cert_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_need_cert_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_need_cert_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_need_cert_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_need_cert_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_need_cert_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_need_cert_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1need_1cert_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_need_cert_alert *arg1 = (libtorrent::torrent_need_cert_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_need_cert_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1incoming_1connection_1alert(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::incoming_connection_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::incoming_connection_alert *)new libtorrent::incoming_connection_alert(arg1,(tcp::endpoint const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::incoming_connection_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::incoming_connection_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::incoming_connection_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::incoming_connection_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::incoming_connection_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::incoming_connection_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::incoming_connection_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1socket_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->socket_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1socket_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  result = (int) ((arg1)->socket_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->ip);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1incoming_1connection_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::incoming_connection_alert *arg1 = (libtorrent::incoming_connection_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::incoming_connection_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1add_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::error_code arg3 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::error_code *argp3 ;
  libtorrent::add_torrent_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return 0;
  } 
  argp3 = *(libtorrent::error_code **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::error_code");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (libtorrent::add_torrent_alert *)new libtorrent::add_torrent_alert(arg1,(libtorrent::add_torrent_params const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::add_torrent_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::add_torrent_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::add_torrent_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::add_torrent_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::add_torrent_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::add_torrent_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::add_torrent_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::add_torrent_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::add_torrent_params *arg2 = (libtorrent::add_torrent_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2; 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::add_torrent_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  result = (libtorrent::add_torrent_params *)& ((arg1)->params);
  *(libtorrent::add_torrent_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1add_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::add_torrent_alert *arg1 = (libtorrent::add_torrent_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::add_torrent_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::state_update_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::state_update_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::state_update_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::state_update_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::state_update_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::state_update_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::state_update_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  arg2 = *(std::vector< libtorrent::torrent_status > **)&jarg2; 
  if (arg1) (arg1)->status = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  std::vector< libtorrent::torrent_status > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  result = (std::vector< libtorrent::torrent_status > *)& ((arg1)->status);
  *(std::vector< libtorrent::torrent_status > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1state_1update_1alert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::state_update_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::state_update_alert *)new libtorrent::state_update_alert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::state_update_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1state_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::state_update_alert *arg1 = (libtorrent::state_update_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::state_update_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1mmap_1cache_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::error_code *arg1 = 0 ;
  libtorrent::mmap_cache_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::mmap_cache_alert *)new libtorrent::mmap_cache_alert((libtorrent::error_code const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::mmap_cache_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::mmap_cache_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::mmap_cache_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::mmap_cache_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::mmap_cache_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::mmap_cache_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::mmap_cache_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1mmap_1cache_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::mmap_cache_alert *arg1 = (libtorrent::mmap_cache_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::mmap_cache_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1stats_1alert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::session_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::session_stats_alert *)new libtorrent::session_stats_alert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session_stats_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::session_stats_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::session_stats_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::session_stats_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session_stats_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::session_stats_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::session_stats_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  boost::uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (boost::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  result = (boost::uint64_t) ((arg1)->timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  std::vector< boost::uint64_t > *arg2 = (std::vector< boost::uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  arg2 = *(std::vector< boost::uint64_t > **)&jarg2; 
  if (arg1) (arg1)->values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  std::vector< boost::uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  result = (std::vector< boost::uint64_t > *)& ((arg1)->values);
  *(std::vector< boost::uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1session_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::session_stats_alert *arg1 = (libtorrent::session_stats_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::session_stats_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::torrent_update_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::torrent_update_alert *)new libtorrent::torrent_update_alert(arg1,(libtorrent::sha1_hash const &)*arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_update_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_update_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_update_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_update_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_update_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_update_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_update_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::torrent_update_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1old_1ih_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->old_ih = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1old_1ih_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->old_ih);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1new_1ih_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->new_ih = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1new_1ih_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->new_ih);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_update_alert *arg1 = (libtorrent::torrent_update_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_update_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1rss_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::feed_handle arg1 ;
  libtorrent::feed_item *arg2 = 0 ;
  libtorrent::feed_handle *argp1 ;
  libtorrent::rss_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libtorrent::feed_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::feed_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(libtorrent::feed_item **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::feed_item const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::rss_item_alert *)new libtorrent::rss_item_alert(arg1,(libtorrent::feed_item const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::rss_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::rss_item_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::rss_item_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::rss_item_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::rss_item_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::rss_item_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::rss_item_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  libtorrent::feed_handle *arg2 = (libtorrent::feed_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  arg2 = *(libtorrent::feed_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  libtorrent::feed_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  result = (libtorrent::feed_handle *)& ((arg1)->handle);
  *(libtorrent::feed_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  libtorrent::feed_item *arg2 = (libtorrent::feed_item *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  arg2 = *(libtorrent::feed_item **)&jarg2; 
  if (arg1) (arg1)->item = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  libtorrent::feed_item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  result = (libtorrent::feed_item *)& ((arg1)->item);
  *(libtorrent::feed_item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1rss_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::rss_item_alert *arg1 = (libtorrent::rss_item_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::rss_item_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1error_1alert(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::dht_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::dht_error_alert *)new libtorrent::dht_error_alert(arg1,(libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::dht_error_alert::op_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  arg2 = (libtorrent::dht_error_alert::op_t)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  libtorrent::dht_error_alert::op_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  result = (libtorrent::dht_error_alert::op_t) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_error_alert *arg1 = (libtorrent::dht_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1immutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  libtorrent::entry *arg2 = 0 ;
  libtorrent::dht_immutable_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::dht_immutable_item_alert *)new libtorrent::dht_immutable_item_alert((libtorrent::sha1_hash const &)*arg1,(libtorrent::entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_immutable_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_immutable_item_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_immutable_item_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_immutable_item_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_immutable_item_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_immutable_item_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_immutable_item_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::dht_immutable_item_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->target);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->item = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  result = (libtorrent::entry *) & ((arg1)->item);
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1immutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_immutable_item_alert *arg1 = (libtorrent::dht_immutable_item_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_mutable_item_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_mutable_item_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_mutable_item_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_mutable_item_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_mutable_item_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_mutable_item_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1discardable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::dht_mutable_item_alert const *)arg1)->discardable();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  boost::uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (boost::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->seq = arg2;
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  result = (boost::uint64_t) ((arg1)->seq);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1salt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->salt = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1salt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->salt);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr< const libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr< const libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->item = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  libtorrent::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  result = (libtorrent::entry *) & ((arg1)->item);
  *(boost::shared_ptr< const libtorrent::entry > **)&jresult = new boost::shared_ptr< const libtorrent::entry >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1key_1v(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = libtorrent_dht_mutable_item_alert_key_v(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1signature_1v(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = libtorrent_dht_mutable_item_alert_signature_v(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1mutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_mutable_item_alert *arg1 = (libtorrent::dht_mutable_item_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_put_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_put_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_put_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_put_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_put_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_put_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->target);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1salt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->salt = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1salt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->salt);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  boost::uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (boost::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->seq = arg2;
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  result = (boost::uint64_t) ((arg1)->seq);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1public_1key_1v(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = libtorrent_dht_put_alert_public_key_v(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1signature_1v(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      result = libtorrent_dht_put_alert_signature_v(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1put_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_put_alert *arg1 = (libtorrent::dht_put_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_put_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1i2p_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::error_code *arg1 = 0 ;
  libtorrent::i2p_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::i2p_alert *)new libtorrent::i2p_alert((libtorrent::error_code const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::i2p_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::i2p_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::i2p_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::i2p_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::i2p_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::i2p_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::i2p_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1i2p_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::i2p_alert *arg1 = (libtorrent::i2p_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::i2p_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1outgoing_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  udp::endpoint arg3 ;
  udp::endpoint *argp3 ;
  libtorrent::dht_outgoing_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  argp3 = *(udp::endpoint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null udp::endpoint");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (libtorrent::dht_outgoing_get_peers_alert *)new libtorrent::dht_outgoing_get_peers_alert((libtorrent::sha1_hash const &)*arg1,(libtorrent::sha1_hash const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_outgoing_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_outgoing_get_peers_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_outgoing_get_peers_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_outgoing_get_peers_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1obfuscated_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->obfuscated_info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1obfuscated_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->obfuscated_info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  udp::endpoint *arg2 = (udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  arg2 = *(udp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  result = (udp::endpoint *)& ((arg1)->ip);
  *(udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1outgoing_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_outgoing_get_peers_alert *arg1 = (libtorrent::dht_outgoing_get_peers_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1log_1alert(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  libtorrent::log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (libtorrent::log_alert *)new libtorrent::log_alert((char const *)arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::log_alert **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::log_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::log_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::log_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::log_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::log_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::log_alert *arg1 = (libtorrent::log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle arg1 ;
  char *arg2 = (char *) 0 ;
  libtorrent::torrent_handle *argp1 ;
  libtorrent::torrent_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libtorrent::torrent_handle **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (libtorrent::torrent_log_alert *)new libtorrent::torrent_log_alert(arg1,(char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_log_alert **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_log_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::torrent_log_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_log_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::torrent_log_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_log_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_log_alert *arg1 = (libtorrent::torrent_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  tcp::endpoint *arg2 = 0 ;
  libtorrent::peer_id *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  libtorrent::peer_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  arg2 = *(tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::peer_id **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return 0;
  } 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (libtorrent::peer_log_alert *)new libtorrent::peer_log_alert((libtorrent::torrent_handle const &)*arg1,(tcp::endpoint const &)*arg2,(libtorrent::peer_id const &)*arg3,(char const *)arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_log_alert **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_log_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::peer_log_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::peer_log_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::peer_log_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::peer_log_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_log_alert *arg1 = (libtorrent::peer_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1lsd_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::error_code *arg1 = 0 ;
  libtorrent::lsd_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::error_code **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::lsd_error_alert *)new libtorrent::lsd_error_alert((libtorrent::error_code const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::lsd_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::lsd_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::lsd_error_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::lsd_error_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::lsd_error_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::lsd_error_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::lsd_error_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  libtorrent::error_code *arg2 = (libtorrent::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  arg2 = *(libtorrent::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  libtorrent::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  result = (libtorrent::error_code *)& ((arg1)->error);
  *(libtorrent::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1lsd_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::lsd_error_alert *arg1 = (libtorrent::lsd_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::lsd_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->type = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type, (const char *)arg2);
    } else {
      arg1->type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (char *) ((arg1)->type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1outstanding_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outstanding_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1outstanding_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->outstanding_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1timeouts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timeouts = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1timeouts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->timeouts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1responses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->responses = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1responses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->responses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1branch_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->branch_factor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1branch_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->branch_factor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1nodes_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nodes_left = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1nodes_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->nodes_left);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1last_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_sent = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1last_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->last_sent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1first_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1lookup_1first_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->first_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1lookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::dht_lookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::dht_lookup *)new libtorrent::dht_lookup();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_lookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_lookup *arg1 = (libtorrent::dht_lookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_lookup **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1num_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_nodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1num_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->num_nodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1num_1replacements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_replacements = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1num_1replacements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->num_replacements);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1last_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_active = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1routing_1bucket_1last_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->last_active);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1routing_1bucket(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::dht_routing_bucket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::dht_routing_bucket *)new libtorrent::dht_routing_bucket();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_routing_bucket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1routing_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_routing_bucket *arg1 = (libtorrent::dht_routing_bucket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_routing_bucket **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1stats_1alert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::dht_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::dht_stats_alert *)new libtorrent::dht_stats_alert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_stats_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_stats_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_stats_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_stats_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_stats_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_stats_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1active_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_lookup > *arg2 = (std::vector< libtorrent::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  arg2 = *(std::vector< libtorrent::dht_lookup > **)&jarg2; 
  if (arg1) (arg1)->active_requests = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1active_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_lookup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  result = (std::vector< libtorrent::dht_lookup > *)& ((arg1)->active_requests);
  *(std::vector< libtorrent::dht_lookup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1routing_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_routing_bucket > *arg2 = (std::vector< libtorrent::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  arg2 = *(std::vector< libtorrent::dht_routing_bucket > **)&jarg2; 
  if (arg1) (arg1)->routing_table = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1routing_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  std::vector< libtorrent::dht_routing_bucket > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  result = (std::vector< libtorrent::dht_routing_bucket > *)& ((arg1)->routing_table);
  *(std::vector< libtorrent::dht_routing_bucket > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_stats_alert *arg1 = (libtorrent::dht_stats_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_stats_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_num_1alert_1types_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)libtorrent::num_alert_types;
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1blocks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  std::vector< bool > *arg2 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = *(std::vector< bool > **)&jarg2; 
  if (arg1) (arg1)->blocks = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1blocks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (std::vector< bool > *)& ((arg1)->blocks);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1last_1use_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  libtorrent::time_point *arg2 = (libtorrent::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = *(libtorrent::time_point **)&jarg2; 
  if (arg1) (arg1)->last_use = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1last_1use_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  libtorrent::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (libtorrent::time_point *)& ((arg1)->last_use);
  *(libtorrent::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1next_1to_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->next_to_hash = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1next_1to_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (int) ((arg1)->next_to_hash);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piece = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (int) ((arg1)->piece);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1read_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info::kind_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::cached_piece_info::kind_t)libtorrent::cached_piece_info::read_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1write_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info::kind_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::cached_piece_info::kind_t)libtorrent::cached_piece_info::write_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1volatile_1read_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info::kind_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::cached_piece_info::kind_t)libtorrent::cached_piece_info::volatile_read_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  libtorrent::cached_piece_info::kind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = (libtorrent::cached_piece_info::kind_t)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  libtorrent::cached_piece_info::kind_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (libtorrent::cached_piece_info::kind_t) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1need_1readback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->need_readback = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cached_1piece_1info_1need_1readback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  result = (bool) ((arg1)->need_readback);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1cached_1piece_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::cached_piece_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::cached_piece_info *)new libtorrent::cached_piece_info();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::cached_piece_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1cached_1piece_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::cached_piece_info *arg1 = (libtorrent::cached_piece_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::cached_piece_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1cache_1status(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::cache_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::cache_status *)new libtorrent::cache_status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::cache_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1status_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::cache_status *arg1 = (libtorrent::cache_status *) 0 ;
  std::vector< libtorrent::cached_piece_info > *arg2 = (std::vector< libtorrent::cached_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::cache_status **)&jarg1; 
  arg2 = *(std::vector< libtorrent::cached_piece_info > **)&jarg2; 
  if (arg1) (arg1)->pieces = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1status_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::cache_status *arg1 = (libtorrent::cache_status *) 0 ;
  std::vector< libtorrent::cached_piece_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::cache_status **)&jarg1; 
  result = (std::vector< libtorrent::cached_piece_info > *)& ((arg1)->pieces);
  *(std::vector< libtorrent::cached_piece_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1cache_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::cache_status *arg1 = (libtorrent::cache_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::cache_status **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1hostname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->hostname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1hostname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->hostname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  libtorrent::peer_id *arg2 = (libtorrent::peer_id *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  arg2 = *(libtorrent::peer_id **)&jarg2; 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  libtorrent::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  result = (libtorrent::peer_id *)& ((arg1)->pid);
  *(libtorrent::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  libtorrent::peer_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  arg2 = *(libtorrent::peer_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::peer_entry const *)arg1)->operator ==((libtorrent::peer_entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1entry_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  libtorrent::peer_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  arg2 = *(libtorrent::peer_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::peer_entry const *)arg1)->operator <((libtorrent::peer_entry const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1entry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_entry *)new libtorrent::peer_entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_entry *arg1 = (libtorrent::peer_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::ipv4_peer_entry *arg1 = (libtorrent::ipv4_peer_entry *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::ipv4_peer_entry **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1entry_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::ipv4_peer_entry *arg1 = (libtorrent::ipv4_peer_entry *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::ipv4_peer_entry **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv4_1peer_1entry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::ipv4_peer_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::ipv4_peer_entry *)new libtorrent::ipv4_peer_entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ipv4_peer_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv4_1peer_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::ipv4_peer_entry *arg1 = (libtorrent::ipv4_peer_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::ipv4_peer_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::ipv6_peer_entry *arg1 = (libtorrent::ipv6_peer_entry *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::ipv6_peer_entry **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1entry_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::ipv6_peer_entry *arg1 = (libtorrent::ipv6_peer_entry *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::ipv6_peer_entry **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv6_1peer_1entry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::ipv6_peer_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::ipv6_peer_entry *)new libtorrent::ipv6_peer_entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ipv6_peer_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv6_1peer_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::ipv6_peer_entry *arg1 = (libtorrent::ipv6_peer_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::ipv6_peer_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1inet_1as_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->inet_as_name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1inet_1as_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (std::string *) & ((arg1)->inet_as_name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->client = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (std::string *) & ((arg1)->client);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::bitfield *arg2 = (libtorrent::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(libtorrent::bitfield **)&jarg2; 
  if (arg1) (arg1)->pieces = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (libtorrent::bitfield *)& ((arg1)->pieces);
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1total_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1total_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (boost::int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (boost::int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1last_1request_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *arg2 = (libtorrent::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(libtorrent::time_duration **)&jarg2; 
  if (arg1) (arg1)->last_request = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1last_1request_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (libtorrent::time_duration *)& ((arg1)->last_request);
  *(libtorrent::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1last_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *arg2 = (libtorrent::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(libtorrent::time_duration **)&jarg2; 
  if (arg1) (arg1)->last_active = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1last_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (libtorrent::time_duration *)& ((arg1)->last_active);
  *(libtorrent::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1queue_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *arg2 = (libtorrent::time_duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(libtorrent::time_duration **)&jarg2; 
  if (arg1) (arg1)->download_queue_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1queue_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::time_duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (libtorrent::time_duration *)& ((arg1)->download_queue_time);
  *(libtorrent::time_duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1interesting_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::interesting;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1choked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::choked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1remote_1interested_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::remote_interested;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1remote_1choked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::remote_choked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1supports_1extensions_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::supports_extensions;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1local_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::local_connection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1handshake_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::handshake;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1connecting_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::connecting;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1deprecated_1_1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::deprecated__;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1on_1parole_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::on_parole;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::seed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1optimistic_1unchoke_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::optimistic_unchoke;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1snubbed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::snubbed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1upload_1only_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::upload_only;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1endgame_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::endgame_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1holepunched_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::holepunched;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1i2p_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::i2p_socket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1utp_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::utp_socket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1ssl_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::ssl_socket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1rc4_1encrypted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::rc4_encrypted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1plaintext_1encrypted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_flags_t)libtorrent::peer_info::plaintext_encrypted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1tracker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::tracker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1dht_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::dht;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::pex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1lsd_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::lsd;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1resume_1data_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::resume_data;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1incoming_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::peer_source_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::peer_source_flags)libtorrent::peer_info::incoming;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->source);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1up_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->up_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1up_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->up_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1down_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->down_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1down_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->down_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1payload_1up_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->payload_up_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1payload_1up_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->payload_up_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1payload_1down_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->payload_down_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1payload_1down_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->payload_down_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::peer_id *arg2 = (libtorrent::peer_id *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(libtorrent::peer_id **)&jarg2; 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  libtorrent::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (libtorrent::peer_id *)& ((arg1)->pid);
  *(libtorrent::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1queue_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->queue_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1queue_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->queue_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1request_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->request_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1request_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->request_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1send_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->send_buffer_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1send_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->send_buffer_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1used_1send_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used_send_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1used_1send_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->used_send_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1receive_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->receive_buffer_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1receive_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->receive_buffer_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1used_1receive_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used_receive_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1used_1receive_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->used_receive_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1num_1hashfails_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_hashfails = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1num_1hashfails_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->num_hashfails);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1inet_1as_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->inet_as = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1inet_1as_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->inet_as);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->download_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1timed_1out_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timed_out_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1timed_1out_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->timed_out_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1busy_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->busy_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1busy_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->busy_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1requests_1in_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->requests_in_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1requests_1in_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->requests_in_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1target_1dl_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->target_dl_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1target_1dl_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->target_dl_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1upload_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1upload_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->upload_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1failcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->failcount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1failcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->failcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_piece_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_piece_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_progress = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_progress);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_total = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1downloading_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_total);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1standard_1bittorrent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::connection_type_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::connection_type_t)libtorrent::peer_info::standard_bittorrent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1web_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::connection_type_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::connection_type_t)libtorrent::peer_info::web_seed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1http_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::connection_type_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::connection_type_t)libtorrent::peer_info::http_seed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1connection_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connection_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1connection_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->connection_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1remote_1dl_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remote_dl_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1remote_1dl_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->remote_dl_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pending_1disk_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pending_disk_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pending_1disk_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->pending_disk_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pending_1disk_1read_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pending_disk_read_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1pending_1disk_1read_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->pending_disk_read_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1send_1quota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->send_quota = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1send_1quota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->send_quota);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1receive_1quota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->receive_quota = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1receive_1quota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->receive_quota);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1rtt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1rtt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->rtt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1rate_1peak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_rate_peak = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1download_1rate_1peak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->download_rate_peak);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1upload_1rate_1peak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_rate_peak = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1upload_1rate_1peak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->upload_rate_peak);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1progress_1ppm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->progress_ppm = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1progress_1ppm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->progress_ppm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1estimated_1reciprocation_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->estimated_reciprocation_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1estimated_1reciprocation_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (int) ((arg1)->estimated_reciprocation_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->ip);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1local_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->local_endpoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1local_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->local_endpoint);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1bw_1idle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::bw_state result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::bw_state)libtorrent::peer_info::bw_idle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1bw_1limit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::bw_state result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::bw_state)libtorrent::peer_info::bw_limit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1bw_1network_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::bw_state result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::bw_state)libtorrent::peer_info::bw_network;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1bw_1disk_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_info::bw_state result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_info::bw_state)libtorrent::peer_info::bw_disk;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1read_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->read_state = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1read_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (char) ((arg1)->read_state);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1write_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->write_state = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1write_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (char) ((arg1)->write_state);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1country_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->country, (const char *)arg2, 2-1);
      arg1->country[2-1] = 0;
    } else {
      arg1->country[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1info_1country_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  result = (char *)(char *) ((arg1)->country);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_info *)new libtorrent::peer_info();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_info *arg1 = (libtorrent::peer_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1banned_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_list_entry::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_list_entry::flags_t)libtorrent::peer_list_entry::banned;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  tcp::endpoint *arg2 = (tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  arg2 = *(tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  result = (tcp::endpoint *)& ((arg1)->ip);
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  result = (int) ((arg1)->flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1failcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->failcount = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1failcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->failcount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1list_1entry_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->source);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1list_1entry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_list_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_list_entry *)new libtorrent::peer_list_entry();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_list_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1list_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_list_entry *arg1 = (libtorrent::peer_list_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_list_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_source_1rank(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (int)libtorrent::source_rank(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bandwidth_1socket_1assign_1bandwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::bandwidth_socket *arg1 = (libtorrent::bandwidth_socket *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::bandwidth_socket > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::bandwidth_socket > **)&jarg1;
  arg1 = (libtorrent::bandwidth_socket *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->assign_bandwidth(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bandwidth_1socket_1is_1disconnecting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bandwidth_socket *arg1 = (libtorrent::bandwidth_socket *) 0 ;
  boost::shared_ptr< libtorrent::bandwidth_socket const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::bandwidth_socket > **)&jarg1;
  arg1 = (libtorrent::bandwidth_socket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::bandwidth_socket const *)arg1)->is_disconnecting();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bandwidth_1socket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::bandwidth_socket *arg1 = (libtorrent::bandwidth_socket *) 0 ;
  boost::shared_ptr< libtorrent::bandwidth_socket > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::bandwidth_socket > **)&jarg1;
  arg1 = (libtorrent::bandwidth_socket *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  tcp::endpoint arg1 ;
  tcp::endpoint arg2 ;
  tcp::endpoint *argp1 ;
  tcp::endpoint *argp2 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(tcp::endpoint **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tcp::endpoint");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(tcp::endpoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null tcp::endpoint");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (boost::uint32_t)libtorrent::peer_priority(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1torrent_1peer(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  boost::uint16_t arg1 ;
  bool arg2 ;
  int arg3 ;
  libtorrent::torrent_peer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint16_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::torrent_peer *)new libtorrent::torrent_peer(arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_peer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1total_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  {
    try {
      result = (boost::uint64_t)((libtorrent::torrent_peer const *)arg1)->total_download();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1total_1upload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  {
    try {
      result = (boost::uint64_t)((libtorrent::torrent_peer const *)arg1)->total_upload();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1dest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::torrent_peer const *)arg1)->dest();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1ip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  tcp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  {
    try {
      result = ((libtorrent::torrent_peer const *)arg1)->ip();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(tcp::endpoint **)&jresult = new tcp::endpoint((const tcp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1prev_1amount_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->prev_amount_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1prev_1amount_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->prev_amount_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1prev_1amount_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->prev_amount_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1prev_1amount_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->prev_amount_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1peer_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->peer_rank = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1peer_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->peer_rank);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1last_1optimistically_1unchoked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->last_optimistically_unchoked = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1last_1optimistically_1unchoked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->last_optimistically_unchoked);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1last_1connected_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->last_connected = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1last_1connected_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->last_connected);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1hashfails_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->hashfails = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1hashfails_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->hashfails);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1failcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->failcount = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1failcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (unsigned int) ((arg1)->failcount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1connectable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->connectable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1connectable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->connectable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1optimistically_1unchoked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->optimistically_unchoked = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1optimistically_1unchoked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->optimistically_unchoked);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1seed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->seed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1seed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->seed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1fast_1reconnects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fast_reconnects = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1fast_1reconnects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (unsigned int) ((arg1)->fast_reconnects);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1trust_1points_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trust_points = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1trust_1points_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (int) ((arg1)->trust_points);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (unsigned int) ((arg1)->source);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1pe_1support_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->pe_support = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1pe_1support_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->pe_support);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1is_1v6_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_v6_addr = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1is_1v6_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->is_v6_addr);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1on_1parole_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->on_parole = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1on_1parole_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->on_parole);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1banned_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->banned = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1banned_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->banned);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1supports_1utp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supports_utp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1supports_1utp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->supports_utp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1confirmed_1supports_1utp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->confirmed_supports_utp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1confirmed_1supports_1utp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->confirmed_supports_utp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1supports_1holepunch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supports_holepunch = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1supports_1holepunch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->supports_holepunch);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1web_1seed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->web_seed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1peer_1web_1seed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  result = (bool) ((arg1)->web_seed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1torrent_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::torrent_peer *arg1 = (libtorrent::torrent_peer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::torrent_peer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv4_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  tcp::endpoint *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  libtorrent::ipv4_peer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tcp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::ipv4_peer *)new libtorrent::ipv4_peer((tcp::endpoint const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ipv4_peer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::ipv4_peer *arg1 = (libtorrent::ipv4_peer *) 0 ;
  libtorrent::address_v4 *arg2 = (libtorrent::address_v4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::ipv4_peer **)&jarg1; 
  arg2 = *(libtorrent::address_v4 **)&jarg2; 
  if (arg1) (arg1)->addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::ipv4_peer *arg1 = (libtorrent::ipv4_peer *) 0 ;
  libtorrent::address_v4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::ipv4_peer **)&jarg1; 
  result = (libtorrent::address_v4 *)& ((arg1)->addr);
  *(libtorrent::address_v4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv4_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::ipv4_peer *arg1 = (libtorrent::ipv4_peer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::ipv4_peer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ipv6_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  tcp::endpoint *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  libtorrent::ipv6_peer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tcp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tcp::endpoint const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::ipv6_peer *)new libtorrent::ipv6_peer((tcp::endpoint const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ipv6_peer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ipv6_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::ipv6_peer *arg1 = (libtorrent::ipv6_peer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::ipv6_peer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1address_1compare(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_address_compare *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_address_compare *)new libtorrent::peer_address_compare();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_address_compare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1address_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_address_compare *arg1 = (libtorrent::peer_address_compare *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_address_compare **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1bittorrent_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::connection_type result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::connection_type)libtorrent::peer_connection::bittorrent_connection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1url_1seed_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::connection_type result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::connection_type)libtorrent::peer_connection::url_seed_connection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1http_1seed_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::connection_type result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::connection_type)libtorrent::peer_connection::http_seed_connection;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->start();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1connection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::torrent_peer *arg2 = (libtorrent::torrent_peer *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::torrent_peer **)&jarg2; 
  {
    try {
      (arg1)->set_peer_info(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1peer_1info_1struct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::torrent_peer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::torrent_peer *)((libtorrent::peer_connection const *)arg1)->peer_info_struct();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_peer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1peer_1exceeds_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->peer_exceeds_limit();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1peer_1disconnected_1other(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->peer_disconnected_other();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1allowed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->send_allowed_set();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->init();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->on_metadata();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1metadata_1impl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->on_metadata_impl();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1picker_1options_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->picker_options(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1prefer_1contiguous_1blocks_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->prefer_contiguous_blocks();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1parole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->on_parole();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1picker_1options_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->picker_options();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1prefer_1contiguous_1blocks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->prefer_contiguous_blocks(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1request_1large_1blocks_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->request_large_blocks();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1request_1large_1blocks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->request_large_blocks(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1endgame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_endgame(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1endgame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->endgame();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1no_1download_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->no_download();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1no_1download_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->no_download(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1ignore_1stats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->ignore_stats();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1ignore_1stats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->ignore_stats(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1peer_1rank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (boost::uint32_t)((libtorrent::peer_connection const *)arg1)->peer_rank();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1fast_1reconnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->fast_reconnect(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1fast_1reconnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->fast_reconnect();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->received_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1announce_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->announce_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1superseed_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->superseed_piece(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1super_1seeded_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->super_seeded_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1can_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->can_write();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_seed();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1num_1have_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->num_have_pieces();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1share_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_share_mode(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1share_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->share_mode();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1upload_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_upload_only(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1upload_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->upload_only();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1holepunch_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->set_holepunch_mode();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1keep_1alive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->keep_alive();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1pid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::peer_id *) &((libtorrent::peer_connection const *)arg1)->pid();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1pid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_id *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_id **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_id const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_pid((libtorrent::peer_id const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1has_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->has_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1upload_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  std::vector< libtorrent::peer_request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< libtorrent::peer_request > *) &((libtorrent::peer_connection const *)arg1)->upload_queue();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::peer_request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1clear_1request_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_request_queue();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1download_1queue_1time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::time_duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->download_queue_time(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_duration **)&jresult = new libtorrent::time_duration((const libtorrent::time_duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1download_1queue_1time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::time_duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->download_queue_time();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_duration **)&jresult = new libtorrent::time_duration((const libtorrent::time_duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1interesting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_interesting();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1choked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_choked();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1peer_1interested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_peer_interested();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1has_1peer_1choked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->has_peer_choked();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1choke_1this_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->choke_this_peer();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1maybe_1unchoke_1this_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->maybe_unchoke_this_peer();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1update_1interest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->update_interest();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1get_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_info *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_info **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_info & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::peer_connection const *)arg1)->get_peer_info(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1statistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::stat *) &((libtorrent::peer_connection const *)arg1)->statistics();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1add_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::int64_t arg2 ;
  boost::int64_t arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (boost::int64_t)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      (arg1)->add_stat(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1sent_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->sent_bytes(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->received_bytes(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1trancieve_1ip_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  bool arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->trancieve_ip_packet(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1sent_1syn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->sent_syn(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1synack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->received_synack(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1second_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->second_tick(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1remote(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (tcp::endpoint *) &((libtorrent::peer_connection const *)arg1)->remote();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1local_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  tcp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->local_endpoint();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(tcp::endpoint **)&jresult = new tcp::endpoint((const tcp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1get_1bitfield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::bitfield *) &((libtorrent::peer_connection const *)arg1)->get_bitfield();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1allowed_1fast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< int > *) &(arg1)->allowed_fast();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1suggested_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< int > *) &((libtorrent::peer_connection const *)arg1)->suggested_pieces();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1connected_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->connected_time();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1last_1received(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->last_received();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1disconnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::operation_t arg3 ;
  int arg4 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return ;
  } 
  arg3 = (libtorrent::operation_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->disconnect((libtorrent::error_code const &)*arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1disconnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  libtorrent::operation_t arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return ;
  } 
  arg3 = (libtorrent::operation_t)jarg3; 
  {
    try {
      (arg1)->disconnect((libtorrent::error_code const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1connect_1failed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->connect_failed((libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1disconnecting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_disconnecting();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1connection_1complete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->on_connection_complete((libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1connecting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_connecting();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1valid_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->received_valid_data(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1invalid_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  bool arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (bool)(arg1)->received_invalid_data(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1outgoing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_outgoing();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1received_1listen_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->received_listen_port();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1local_1network(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->on_local_network();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1ignore_1unchoke_1slots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->ignore_unchoke_slots();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1failed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->failed();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1desired_1queue_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->desired_queue_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1download_1payload_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->download_payload_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1reset_1choke_1counters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->reset_choke_counters();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1disconnect_1if_1redundant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->disconnect_if_redundant();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1increase_1est_1reciprocation_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->increase_est_reciprocation_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1decrease_1est_1reciprocation_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->decrease_est_reciprocation_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1est_1reciprocation_1rate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->est_reciprocation_rate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1keepalive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_keepalive();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1choke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_choke();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1unchoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_unchoke();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1interested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_interested();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1not_1interested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_not_interested();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1have(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_have(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1dont_1have(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_dont_have(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1bitfield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::bitfield *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::bitfield **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bitfield const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->incoming_bitfield((libtorrent::bitfield const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->incoming_request((libtorrent::peer_request const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1piece_1fragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_piece_fragment(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1start_1receive_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->start_receive_piece((libtorrent::peer_request const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->incoming_cancel((libtorrent::peer_request const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1can_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::error_code *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->can_disconnect((libtorrent::error_code const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1dht_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_dht_port(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1reject_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_request *arg2 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(libtorrent::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_request const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->incoming_reject_request((libtorrent::peer_request const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1have_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_have_all();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1have_1none(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->incoming_have_none();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1allowed_1fast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_allowed_fast(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1incoming_1suggest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->incoming_suggest(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1has_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_has_metadata(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1has_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->has_metadata();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1choke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->send_choke();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1unchoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)(arg1)->send_unchoke();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1interested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->send_interested();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1not_1interested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->send_not_interested();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1suggest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->send_suggest(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1snub_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->snub_peer();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1reject_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reject_piece(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1can_1request_1time_1critical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->can_request_time_critical();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1req_1time_1critical_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::flags_t)libtorrent::peer_connection::req_time_critical;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1req_1busy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::flags_t)libtorrent::peer_connection::req_busy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1cancel_1all_1requests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->cancel_all_requests();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1block_1requests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->send_block_requests();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1assign_1bandwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->assign_bandwidth(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1in_1handshake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->in_handshake();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1message_1type_1request_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_connection::message_type_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_connection::message_type_flags)libtorrent::peer_connection::message_type_request;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1setup_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup_send();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1cork_1socket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->cork_socket();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1is_1corked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->is_corked();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1uncork_1socket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->uncork_socket();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1country(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set_country((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1has_1country(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((libtorrent::peer_connection const *)arg1)->has_country();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1outstanding_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->outstanding_bytes();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1buffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->send_buffer_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1send_1buffer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->send_buffer_capacity();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1max_1out_1request_1queue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->max_out_request_queue(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1max_1out_1request_1queue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->max_out_request_queue();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1last_1seen_1complete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (time_t)((libtorrent::peer_connection const *)arg1)->last_seen_complete();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1set_1last_1seen_1complete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_last_seen_complete(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1uploaded_1in_1last_1round(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (boost::int64_t)((libtorrent::peer_connection const *)arg1)->uploaded_in_last_round();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1downloaded_1in_1last_1round(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (boost::int64_t)((libtorrent::peer_connection const *)arg1)->downloaded_in_last_round();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1uploaded_1since_1unchoked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (boost::int64_t)((libtorrent::peer_connection const *)arg1)->uploaded_since_unchoked();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1time_1of_1last_1unchoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::time_point result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((libtorrent::peer_connection const *)arg1)->time_of_last_unchoke();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::time_point **)&jresult = new libtorrent::time_point((const libtorrent::time_point &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1disk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->on_disk();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1on_1allocate_1disk_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->on_allocate_disk_buffer(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1num_1reading_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->num_reading_bytes();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1setup_1receive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  libtorrent::peer_connection::sync_t arg2 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (libtorrent::peer_connection::sync_t)jarg2; 
  {
    try {
      (arg1)->setup_receive(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1setup_1receive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup_receive();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1self(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection > *smartarg1 = 0 ;
  boost::shared_ptr< libtorrent::peer_connection > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->self();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr< libtorrent::peer_connection > **)&jresult = result ? new boost::shared_ptr< libtorrent::peer_connection >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1stats_1counters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  libtorrent::counters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (libtorrent::counters *) &((libtorrent::peer_connection const *)arg1)->stats_counters();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::counters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1get_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::peer_connection *arg1 = (libtorrent::peer_connection *) 0 ;
  int arg2 ;
  boost::shared_ptr< libtorrent::peer_connection const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const libtorrent::peer_connection > **)&jarg1;
  arg1 = (libtorrent::peer_connection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::peer_connection const *)arg1)->get_priority(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1hostname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->hostname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1hostname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (std::string *) & ((arg1)->hostname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (std::string *) & ((arg1)->password);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  boost::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  arg2 = (boost::uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  boost::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (boost::uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  boost::uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (boost::uint16_t) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1proxy_1hostnames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->proxy_hostnames = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1proxy_1hostnames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (bool) ((arg1)->proxy_hostnames);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1proxy_1peer_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->proxy_peer_connections = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_proxy_1settings_1proxy_1peer_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  result = (bool) ((arg1)->proxy_peer_connections);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1proxy_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::proxy_settings *arg1 = (libtorrent::proxy_settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::proxy_settings **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::dht_settings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::dht_settings *)new libtorrent::dht_settings();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_settings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1peers_1reply_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_peers_reply = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1peers_1reply_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->max_peers_reply);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1search_1branching_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->search_branching = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1search_1branching_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->search_branching);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1fail_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_fail_count = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1fail_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->max_fail_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1torrents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_torrents = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1torrents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->max_torrents);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1dht_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_dht_items = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1dht_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->max_dht_items);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1torrent_1search_1reply_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_torrent_search_reply = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1max_1torrent_1search_1reply_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->max_torrent_search_reply);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1restrict_1routing_1ips_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->restrict_routing_ips = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1restrict_1routing_1ips_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->restrict_routing_ips);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1restrict_1search_1ips_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->restrict_search_ips = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1restrict_1search_1ips_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->restrict_search_ips);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1extended_1routing_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->extended_routing_table = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1extended_1routing_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->extended_routing_table);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1aggressive_1lookups_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->aggressive_lookups = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1aggressive_1lookups_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->aggressive_lookups);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1privacy_1lookups_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->privacy_lookups = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1privacy_1lookups_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->privacy_lookups);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1enforce_1node_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enforce_node_id = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1enforce_1node_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->enforce_node_id);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1ignore_1dark_1internet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_dark_internet = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1ignore_1dark_1internet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (bool) ((arg1)->ignore_dark_internet);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1block_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1block_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->block_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1block_1ratelimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_ratelimit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1settings_1block_1ratelimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  result = (int) ((arg1)->block_ratelimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_settings *arg1 = (libtorrent::dht_settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_settings **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_initialize_1default_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::aux::session_settings *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::aux::session_settings & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::initialize_default_settings(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1set_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set_str(arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1get_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::string *) &((libtorrent::aux::session_settings const *)arg1)->get_str(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1set_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_int(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::aux::session_settings const *)arg1)->get_int(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1set_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_bool(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1settings_1get_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::aux::session_settings const *)arg1)->get_bool(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::aux::session_settings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::aux::session_settings *)new libtorrent::aux::session_settings();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::aux::session_settings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1session_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::aux::session_settings *arg1 = (libtorrent::aux::session_settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_load_1pack_1from_1dict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::settings_pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::settings_pack *)libtorrent::load_pack_from_dict((libtorrent::bdecode_node const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::settings_pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1settings_1to_1dict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::aux::session_settings *arg1 = 0 ;
  libtorrent::entry::dictionary_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::aux::session_settings **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::aux::session_settings const & reference is null");
    return ;
  } 
  arg2 = *(libtorrent::entry::dictionary_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry::dictionary_type & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::save_settings_to_dict((libtorrent::aux::session_settings const &)*arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_setting_1by_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (int)libtorrent::setting_by_name((std::string const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_name_1for_1setting(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (char *)libtorrent::name_for_setting(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1set_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set_str(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1set_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_int(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1set_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_bool(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1has_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::settings_pack const *)arg1)->has_val(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1get_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::settings_pack const *)arg1)->get_str(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::settings_pack const *)arg1)->get_int(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1get_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libtorrent::settings_pack const *)arg1)->get_bool(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1string_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::type_bases)libtorrent::settings_pack::string_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1int_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::type_bases)libtorrent::settings_pack::int_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1bool_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::type_bases)libtorrent::settings_pack::bool_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1type_1mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::type_bases)libtorrent::settings_pack::type_mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1index_1mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::type_bases)libtorrent::settings_pack::index_mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1user_1agent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::string_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::string_types)libtorrent::settings_pack::user_agent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1num_1string_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::string_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::string_types)libtorrent::settings_pack::num_string_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1allow_1multiple_1connections_1per_1ip_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::bool_types)libtorrent::settings_pack::allow_multiple_connections_per_ip;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1num_1bool_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::bool_types)libtorrent::settings_pack::num_bool_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1tracker_1completion_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::int_types)libtorrent::settings_pack::tracker_completion_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1num_1int_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::int_types)libtorrent::settings_pack::num_int_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1no_1piece_1suggestions_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::suggest_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::suggest_mode_t)libtorrent::settings_pack::no_piece_suggestions;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1suggest_1read_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::suggest_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::suggest_mode_t)libtorrent::settings_pack::suggest_read_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1fixed_1slots_1choker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::choking_algorithm_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::choking_algorithm_t)libtorrent::settings_pack::fixed_slots_choker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1rate_1based_1choker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::choking_algorithm_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::choking_algorithm_t)libtorrent::settings_pack::rate_based_choker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1bittyrant_1choker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::choking_algorithm_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::choking_algorithm_t)libtorrent::settings_pack::bittyrant_choker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1enable_1os_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::io_buffer_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::io_buffer_mode_t)libtorrent::settings_pack::enable_os_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1deprecated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::io_buffer_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::io_buffer_mode_t)libtorrent::settings_pack::deprecated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1disable_1os_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::io_buffer_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::io_buffer_mode_t)libtorrent::settings_pack::disable_os_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1prefer_1tcp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::bandwidth_mixed_algo_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::bandwidth_mixed_algo_t)libtorrent::settings_pack::prefer_tcp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1peer_1proportional_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::bandwidth_mixed_algo_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::bandwidth_mixed_algo_t)libtorrent::settings_pack::peer_proportional;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1pe_1plaintext_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::enc_level)libtorrent::settings_pack::pe_plaintext;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1pe_1rc4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::enc_level)libtorrent::settings_pack::pe_rc4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_settings_1pack_1pe_1both_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::settings_pack::enc_level)libtorrent::settings_pack::pe_both;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1settings_1pack(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::settings_pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::settings_pack *)new libtorrent::settings_pack();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::settings_pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1settings_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::settings_pack *arg1 = (libtorrent::settings_pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::settings_pack **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1ignore_1unchoke_1slots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_unchoke_slots = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1ignore_1unchoke_1slots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (bool) ((arg1)->ignore_unchoke_slots);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1connection_1limit_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connection_limit_factor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1connection_1limit_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->connection_limit_factor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (std::string *) & ((arg1)->label);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1upload_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1upload_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->upload_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1download_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1download_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->download_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1upload_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1upload_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->upload_priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1download_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1info_1download_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->download_priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1class_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_class_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_class_info *)new libtorrent::peer_class_info();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_class_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1class_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_class_info *arg1 = (libtorrent::peer_class_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_class_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1class(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::peer_class *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libtorrent::peer_class *)new libtorrent::peer_class((std::string const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_class **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1set_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  libtorrent::peer_class_info *arg2 = (libtorrent::peer_class_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = *(libtorrent::peer_class_info **)&jarg2; 
  {
    try {
      (arg1)->set_info((libtorrent::peer_class_info const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1get_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  libtorrent::peer_class_info *arg2 = (libtorrent::peer_class_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = *(libtorrent::peer_class_info **)&jarg2; 
  {
    try {
      ((libtorrent::peer_class const *)arg1)->get_info(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1set_1upload_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_upload_limit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1set_1download_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_download_limit(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1ignore_1unchoke_1slots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_unchoke_slots = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1ignore_1unchoke_1slots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  result = (bool) ((arg1)->ignore_unchoke_slots);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1connection_1limit_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connection_limit_factor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1connection_1limit_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  result = (int) ((arg1)->connection_limit_factor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  result = (std::string *) & ((arg1)->label);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1class(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_class *arg1 = (libtorrent::peer_class *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_class **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::peer_class_type_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::peer_class_type_filter *)new libtorrent::peer_class_type_filter();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_class_type_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1tcp_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::peer_class_type_filter::socket_type_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::peer_class_type_filter::socket_type_t)libtorrent::peer_class_type_filter::tcp_socket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->add(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->remove(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1disallow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->disallow(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1allow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  libtorrent::peer_class_type_filter::socket_type_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  arg2 = (libtorrent::peer_class_type_filter::socket_type_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->allow(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1class_1type_1filter_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  int arg2 ;
  boost::uint32_t arg3 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::uint32_t)jarg3; 
  {
    try {
      result = (boost::uint32_t)(arg1)->apply(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::peer_class_type_filter *arg1 = (libtorrent::peer_class_type_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::peer_class_type_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_TORRENT_1DEBUG_1STREAMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resume_1data_1t_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::resume_data_t *arg1 = (libtorrent::resume_data_t *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::resume_data_t **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2; 
  if (arg1) (arg1)->buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resume_1data_1t_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::resume_data_t *arg1 = (libtorrent::resume_data_t *) 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::resume_data_t **)&jarg1; 
  result = (std::vector< char > *)& ((arg1)->buf);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resume_1data_1t_1node_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::resume_data_t *arg1 = (libtorrent::resume_data_t *) 0 ;
  libtorrent::bdecode_node *arg2 = (libtorrent::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::resume_data_t **)&jarg1; 
  arg2 = *(libtorrent::bdecode_node **)&jarg2; 
  if (arg1) (arg1)->node = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_resume_1data_1t_1node_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::resume_data_t *arg1 = (libtorrent::resume_data_t *) 0 ;
  libtorrent::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::resume_data_t **)&jarg1; 
  result = (libtorrent::bdecode_node *)& ((arg1)->node);
  *(libtorrent::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1resume_1data_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::resume_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::resume_data_t *)new libtorrent::resume_data_t();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::resume_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1resume_1data_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::resume_data_t *arg1 = (libtorrent::resume_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::resume_data_t **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_entry *arg1 = 0 ;
  libtorrent::web_seed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_entry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::web_seed_t *)new libtorrent::web_seed_t((libtorrent::web_seed_entry const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_entry::headers_t *arg4 = 0 ;
  libtorrent::web_seed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libtorrent::web_seed_entry::headers_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::web_seed_entry::headers_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::web_seed_t *)new libtorrent::web_seed_t((std::string const &)*arg1,arg2,(std::string const &)*arg3,(libtorrent::web_seed_entry::headers_t const &)*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1t_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  std::string *arg3 = 0 ;
  libtorrent::web_seed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (libtorrent::web_seed_t *)new libtorrent::web_seed_t((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1web_1seed_1t_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libtorrent::web_seed_entry::type_t arg2 ;
  libtorrent::web_seed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (libtorrent::web_seed_entry::type_t)jarg2; 
  {
    try {
      result = (libtorrent::web_seed_t *)new libtorrent::web_seed_t((std::string const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::web_seed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1retry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::time_point *arg2 = (libtorrent::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = *(libtorrent::time_point **)&jarg2; 
  if (arg1) (arg1)->retry = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1retry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (libtorrent::time_point *)& ((arg1)->retry);
  *(libtorrent::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1endpoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  std::vector< tcp::endpoint > *arg2 = (std::vector< tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = *(std::vector< tcp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->endpoints = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1endpoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  std::vector< tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (std::vector< tcp::endpoint > *)& ((arg1)->endpoints);
  *(std::vector< tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1peer_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::ipv4_peer *arg2 = (libtorrent::ipv4_peer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = *(libtorrent::ipv4_peer **)&jarg2; 
  if (arg1) (arg1)->peer_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1peer_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::ipv4_peer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (libtorrent::ipv4_peer *)& ((arg1)->peer_info);
  *(libtorrent::ipv4_peer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1supports_1keepalive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supports_keepalive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1supports_1keepalive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (bool) ((arg1)->supports_keepalive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1resolving_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->resolving = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1resolving_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (bool) ((arg1)->resolving);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1removed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->removed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1removed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (bool) ((arg1)->removed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1restart_1request_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::peer_request *arg2 = (libtorrent::peer_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = *(libtorrent::peer_request **)&jarg2; 
  if (arg1) (arg1)->restart_request = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1restart_1request_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  libtorrent::peer_request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (libtorrent::peer_request *)& ((arg1)->restart_request);
  *(libtorrent::peer_request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1restart_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2; 
  if (arg1) (arg1)->restart_piece = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1restart_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  result = (std::vector< char > *)& ((arg1)->restart_piece);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1web_1seed_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::web_seed_t *arg1 = (libtorrent::web_seed_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::web_seed_t **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1value_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1value_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  result = (int) ((arg1)->value_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1type_1counter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stats_metric::type_counter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1type_1gauge_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::stats_metric::type_gauge;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1metric_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1stats_1metric(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::stats_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::stats_metric *)new libtorrent::stats_metric();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::stats_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1stats_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::stats_metric *arg1 = (libtorrent::stats_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::stats_metric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_min_1memory_1usage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::settings_pack *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::settings_pack & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::min_memory_usage(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_high_1performance_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::settings_pack *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::settings_pack & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::high_performance_seed(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_find_1metric_1idx(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (int)libtorrent::find_metric_idx((char const *)arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1proxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::session_proxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::session_proxy *)new libtorrent::session_proxy();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session_proxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1session_1proxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::session_proxy *arg1 = (libtorrent::session_proxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::session_proxy **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtorrent::stats_metric > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libtorrent::session_stats_metrics();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::stats_metric > **)&jresult = new std::vector< libtorrent::stats_metric >((const std::vector< libtorrent::stats_metric > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::settings_pack *arg1 = 0 ;
  int arg2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::settings_pack const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::settings_pack const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::settings_pack *arg1 = 0 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::settings_pack const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::settings_pack const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  int arg2 ;
  boost::uint32_t arg3 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (boost::uint32_t)jarg3; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  int arg2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::session *)new libtorrent::session();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  std::pair< int,int > arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  std::pair< int,int > *argp2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  argp2 = *(std::pair< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2,(char const *)arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  std::pair< int,int > arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  std::pair< int,int > *argp2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  argp2 = *(std::pair< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2,(char const *)arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  std::pair< int,int > arg2 ;
  char *arg3 = (char *) 0 ;
  std::pair< int,int > *argp2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  argp2 = *(std::pair< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2,(char const *)arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1session_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::fingerprint *arg1 = 0 ;
  std::pair< int,int > arg2 ;
  std::pair< int,int > *argp2 ;
  libtorrent::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::fingerprint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::fingerprint const & reference is null");
    return 0;
  } 
  argp2 = *(std::pair< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (libtorrent::session *)new libtorrent::session((libtorrent::fingerprint const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1dht_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_dht_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1dht_1state_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_dht_state;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1encryption_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_encryption_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1as_1map_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_as_map;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1feeds_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::save_state_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::save_state_flags_t)libtorrent::session::save_feeds;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1state_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  boost::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  arg3 = (boost::uint32_t)jarg3; 
  {
    try {
      ((libtorrent::session const *)arg1)->save_state(*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1save_1state_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::entry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  
  arg2 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::session const *)arg1)->save_state(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1load_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->load_state((libtorrent::bdecode_node const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1refresh_1torrent_1status_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  boost::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< libtorrent::torrent_status > **)&jarg2; 
  arg3 = (boost::uint32_t)jarg3; 
  {
    try {
      ((libtorrent::session const *)arg1)->refresh_torrent_status(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1refresh_1torrent_1status_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< libtorrent::torrent_status > *arg2 = (std::vector< libtorrent::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< libtorrent::torrent_status > **)&jarg2; 
  {
    try {
      ((libtorrent::session const *)arg1)->refresh_torrent_status(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1post_1torrent_1updates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try {
      (arg1)->post_torrent_updates(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1post_1torrent_1updates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      (arg1)->post_torrent_updates();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1post_1session_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      (arg1)->post_session_stats();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1post_1dht_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      (arg1)->post_dht_stats();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1find_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  libtorrent::torrent_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libtorrent::session const *)arg1)->find_torrent((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = new libtorrent::torrent_handle((const libtorrent::torrent_handle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1torrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< libtorrent::torrent_handle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = ((libtorrent::session const *)arg1)->get_torrents();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::torrent_handle > **)&jresult = new std::vector< libtorrent::torrent_handle >((const std::vector< libtorrent::torrent_handle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1torrent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::torrent_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->add_torrent((libtorrent::add_torrent_params const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = new libtorrent::torrent_handle((const libtorrent::torrent_handle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1torrent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  libtorrent::torrent_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->add_torrent((libtorrent::add_torrent_params const &)*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::torrent_handle **)&jresult = new libtorrent::torrent_handle((const libtorrent::torrent_handle &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1async_1add_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->async_add_torrent((libtorrent::add_torrent_params const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::session_proxy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (arg1)->abort();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::session_proxy **)&jresult = new libtorrent::session_proxy((const libtorrent::session_proxy &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      (arg1)->pause();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      (arg1)->resume();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1is_1paused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::session const *)arg1)->is_paused();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1disk_1cache_1no_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session::disk_cache_no_pieces;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1cache_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::cache_status *arg2 = (libtorrent::cache_status *) 0 ;
  libtorrent::torrent_handle arg3 ;
  int arg4 ;
  libtorrent::torrent_handle *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::cache_status **)&jarg2; 
  argp3 = *(libtorrent::torrent_handle **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  {
    try {
      ((libtorrent::session const *)arg1)->get_cache_info(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1cache_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::cache_status *arg2 = (libtorrent::cache_status *) 0 ;
  libtorrent::torrent_handle arg3 ;
  libtorrent::torrent_handle *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::cache_status **)&jarg2; 
  argp3 = *(libtorrent::torrent_handle **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::torrent_handle");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      ((libtorrent::session const *)arg1)->get_cache_info(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1cache_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::cache_status *arg2 = (libtorrent::cache_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::cache_status **)&jarg2; 
  {
    try {
      ((libtorrent::session const *)arg1)->get_cache_info(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1feed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::feed_settings *arg2 = 0 ;
  libtorrent::feed_handle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::feed_settings **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::feed_settings const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->add_feed((libtorrent::feed_settings const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::feed_handle **)&jresult = new libtorrent::feed_handle((const libtorrent::feed_handle &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1remove_1feed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::feed_handle arg2 ;
  libtorrent::feed_handle *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  argp2 = *(libtorrent::feed_handle **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::feed_handle");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->remove_feed(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1feeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< libtorrent::feed_handle > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< libtorrent::feed_handle > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtorrent::feed_handle > & reference is null");
    return ;
  } 
  {
    try {
      ((libtorrent::session const *)arg1)->get_feeds(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1dht_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::dht_settings *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::dht_settings **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::dht_settings const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_dht_settings((libtorrent::dht_settings const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1is_1dht_1running(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::session const *)arg1)->is_dht_running();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1dht_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_dht_node((std::pair< std::string,int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1dht_1router(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_dht_router((std::pair< std::string,int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1get_1item_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->dht_get_item((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1put_1item_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::entry arg2 ;
  libtorrent::entry *argp2 = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  
  argp2 = (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::entry");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->dht_put_item(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::ip_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::ip_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::ip_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_ip_filter((libtorrent::ip_filter const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::ip_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = ((libtorrent::session const *)arg1)->get_ip_filter();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ip_filter **)&jresult = new libtorrent::ip_filter((const libtorrent::ip_filter &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1port_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::port_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::port_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::port_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_port_filter((libtorrent::port_filter const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::peer_id result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = ((libtorrent::session const *)arg1)->id();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_id **)&jresult = new libtorrent::peer_id((const libtorrent::peer_id &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_key(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1global_1peer_1class_1id_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session::global_peer_class_id;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1tcp_1peer_1class_1id_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session::tcp_peer_class_id;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1local_1peer_1class_1id_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::session::local_peer_class_id;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1listen_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (unsigned short)((libtorrent::session const *)arg1)->listen_port();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1ssl_1listen_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (unsigned short)((libtorrent::session const *)arg1)->ssl_listen_port();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1is_1listening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::session const *)arg1)->is_listening();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1peer_1class_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::ip_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::ip_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::ip_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer_class_filter((libtorrent::ip_filter const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::peer_class_type_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::peer_class_type_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_class_type_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer_class_type_filter((libtorrent::peer_class_type_filter const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1create_1peer_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)(arg1)->create_peer_class((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1delete_1peer_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->delete_peer_class(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1peer_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  int arg2 ;
  libtorrent::peer_class_info result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->get_peer_class(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::peer_class_info **)&jresult = new libtorrent::peer_class_info((const libtorrent::peer_class_info &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1peer_1class(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  int arg2 ;
  libtorrent::peer_class_info *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::peer_class_info **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::peer_class_info const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer_class(arg2,(libtorrent::peer_class_info const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1delete_1files_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::options_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::options_t)libtorrent::session::delete_files;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1default_1plugins_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::session_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::session_flags_t)libtorrent::session::add_default_plugins;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1start_1default_1features_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::session_flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::session_flags_t)libtorrent::session::start_default_features;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1remove_1torrent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->remove_torrent((libtorrent::torrent_handle const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1remove_1torrent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::torrent_handle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->remove_torrent((libtorrent::torrent_handle const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1apply_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::settings_pack *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::settings_pack **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::settings_pack const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->apply_settings((libtorrent::settings_pack const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::aux::session_settings result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = ((libtorrent::session const *)arg1)->get_settings();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::aux::session_settings **)&jresult = new libtorrent::aux::session_settings((const libtorrent::aux::session_settings &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1pop_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::auto_ptr< libtorrent::alert > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (arg1)->pop_alert();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  
  jlong lpp = 0;
  *(libtorrent::alert**) &lpp = (&result)->release();
  jresult = lpp;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1pop_1alerts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::deque< libtorrent::alert * > *arg2 = (std::deque< libtorrent::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::deque< libtorrent::alert * > **)&jarg2; 
  {
    try {
      (arg1)->pop_alerts(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1wait_1for_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::time_duration arg2 ;
  libtorrent::time_duration *argp2 ;
  libtorrent::alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  argp2 = *(libtorrent::time_duration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::time_duration");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (libtorrent::alert *)(arg1)->wait_for_alert(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1udp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::protocol_type result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::protocol_type)libtorrent::session::udp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1tcp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::session::protocol_type result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::session::protocol_type)libtorrent::session::tcp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1port_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::session::protocol_type arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (libtorrent::session::protocol_type)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (int)(arg1)->add_port_mapping(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1delete_1port_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->delete_port_mapping(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1lt_1trackers_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      libtorrent_session_add_lt_trackers_extension(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1add_1smart_1ban_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      libtorrent_session_add_smart_ban_extension(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1get_1item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< char > *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      libtorrent_session_dht_get_item__SWIG_1(arg1,*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1get_1item_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      libtorrent_session_dht_get_item__SWIG_1(arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1put_1item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jstring jarg5) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  libtorrent::entry *arg4 = 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  
  arg4 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg4) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      libtorrent_session_dht_put_item__SWIG_1(arg1,*arg2,*arg3,*arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1put_1item_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  libtorrent::entry *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  
  arg4 = (libtorrent::entry *)((*(boost::shared_ptr<  libtorrent::entry > **)&jarg4) ? (*(boost::shared_ptr<  libtorrent::entry > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::entry & reference is null");
    return ;
  } 
  {
    try {
      libtorrent_session_dht_put_item__SWIG_1(arg1,*arg2,*arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1get_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      libtorrent_session_dht_get_peers(arg1,(libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1announce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      libtorrent_session_dht_announce__SWIG_0(arg1,(libtorrent::sha1_hash const &)*arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1dht_1announce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::session **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      libtorrent_session_dht_announce__SWIG_1(arg1,(libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1set_1piece_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  std::string *arg2 = 0 ;
  libtorrent::create_torrent *arg3 = 0 ;
  std::string *arg4 = 0 ;
  libtorrent::error_code *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(libtorrent::session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libtorrent::create_torrent **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::create_torrent & reference is null");
    return ;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(libtorrent::error_code **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return ;
  } 
  {
    try {
      libtorrent_session_set_piece_hashes(arg1,(std::string const &)*arg2,*arg3,(std::string const &)*arg4,*arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1get_1upnp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::session *arg1 = (libtorrent::session *) 0 ;
  libtorrent::upnp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::session **)&jarg1; 
  {
    try {
      result = (libtorrent::upnp *)libtorrent_session_get_upnp(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::upnp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1file_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->file_index = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1file_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  result = (int) ((arg1)->file_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1last_1use_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  libtorrent::time_point *arg2 = (libtorrent::time_point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  arg2 = *(libtorrent::time_point **)&jarg2; 
  if (arg1) (arg1)->last_use = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1last_1use_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  libtorrent::time_point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  result = (libtorrent::time_point *)& ((arg1)->last_use);
  *(libtorrent::time_point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1open_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->open_mode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_pool_1file_1status_1open_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  result = (int) ((arg1)->open_mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1pool_1file_1status(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::pool_file_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::pool_file_status *)new libtorrent::pool_file_status();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::pool_file_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1pool_1file_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::pool_file_status *arg1 = (libtorrent::pool_file_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::pool_file_status **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_plus_1one(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  boost::uint16_t arg1 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint16_t)jarg1; 
  {
    try {
      result = (boost::uint16_t)libtorrent::detail::plus_one(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_minus_1one(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  boost::uint16_t arg1 ;
  boost::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint16_t)jarg1; 
  {
    try {
      result = (boost::uint16_t)libtorrent::detail::minus_one(arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ip_1filter_1blocked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::ip_filter::access_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::ip_filter::access_flags)libtorrent::ip_filter::blocked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ip_1filter_1add_1rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  libtorrent::ip_filter *arg1 = (libtorrent::ip_filter *) 0 ;
  libtorrent::address arg2 ;
  libtorrent::address arg3 ;
  boost::uint32_t arg4 ;
  libtorrent::address *argp2 ;
  libtorrent::address *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtorrent::ip_filter **)&jarg1; 
  argp2 = *(libtorrent::address **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::address");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(libtorrent::address **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::address");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (boost::uint32_t)jarg4; 
  {
    try {
      (arg1)->add_rule(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ip_1filter_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libtorrent::ip_filter *arg1 = (libtorrent::ip_filter *) 0 ;
  libtorrent::address *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::ip_filter **)&jarg1; 
  arg2 = *(libtorrent::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)((libtorrent::ip_filter const *)arg1)->access((libtorrent::address const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ip_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::ip_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::ip_filter *)new libtorrent::ip_filter();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::ip_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::ip_filter *arg1 = (libtorrent::ip_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::ip_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_port_1filter_1blocked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::port_filter::access_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::port_filter::access_flags)libtorrent::port_filter::blocked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_port_1filter_1add_1rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  libtorrent::port_filter *arg1 = (libtorrent::port_filter *) 0 ;
  boost::uint16_t arg2 ;
  boost::uint16_t arg3 ;
  boost::uint32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::port_filter **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  arg3 = (boost::uint16_t)jarg3; 
  arg4 = (boost::uint32_t)jarg4; 
  {
    try {
      (arg1)->add_rule(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_port_1filter_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::port_filter *arg1 = (libtorrent::port_filter *) 0 ;
  boost::uint16_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::port_filter **)&jarg1; 
  arg2 = (boost::uint16_t)jarg2; 
  {
    try {
      result = (int)((libtorrent::port_filter const *)arg1)->access(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1port_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::port_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::port_filter *)new libtorrent::port_filter();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::port_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1port_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::port_filter *arg1 = (libtorrent::port_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::port_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_get_1bdecode_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::get_bdecode_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bdecode_1token_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  boost::uint32_t arg1 ;
  libtorrent::detail::bdecode_token::type_t arg2 ;
  libtorrent::detail::bdecode_token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint32_t)jarg1; 
  arg2 = (libtorrent::detail::bdecode_token::type_t)jarg2; 
  {
    try {
      result = (libtorrent::detail::bdecode_token *)new libtorrent::detail::bdecode_token(arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::detail::bdecode_token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bdecode_1token_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  boost::uint32_t arg1 ;
  boost::uint32_t arg2 ;
  libtorrent::detail::bdecode_token::type_t arg3 ;
  boost::uint8_t arg4 ;
  libtorrent::detail::bdecode_token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint32_t)jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  arg3 = (libtorrent::detail::bdecode_token::type_t)jarg3; 
  arg4 = (boost::uint8_t)jarg4; 
  {
    try {
      result = (libtorrent::detail::bdecode_token *)new libtorrent::detail::bdecode_token(arg1,arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::detail::bdecode_token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bdecode_1token_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  boost::uint32_t arg1 ;
  boost::uint32_t arg2 ;
  libtorrent::detail::bdecode_token::type_t arg3 ;
  libtorrent::detail::bdecode_token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (boost::uint32_t)jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  arg3 = (libtorrent::detail::bdecode_token::type_t)jarg3; 
  {
    try {
      result = (libtorrent::detail::bdecode_token *)new libtorrent::detail::bdecode_token(arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::detail::bdecode_token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1start_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::detail::bdecode_token const *)arg1)->start_offset();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1next_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->next_item = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1next_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->next_item);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  if (arg1) (arg1)->header = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1token_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  result = (boost::uint32_t) ((arg1)->header);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bdecode_1token(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::detail::bdecode_token *arg1 = (libtorrent::detail::bdecode_token *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::detail::bdecode_token **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bdecode_1node_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::bdecode_node *)new libtorrent::bdecode_node();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1bdecode_1node_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  libtorrent::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::bdecode_node *)new libtorrent::bdecode_node((libtorrent::bdecode_node const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  libtorrent::bdecode_node::type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (libtorrent::bdecode_node::type_t)((libtorrent::bdecode_node const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1is_1none_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::bdecode_node const *)arg1)->operator bool();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1non_1owning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->non_owning();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1data_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  std::pair< char const *,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->data_section();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< char const *,int > **)&jresult = new std::pair< char const *,int >((const std::pair< char const *,int > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1list_1string_1value_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (arg1)->list_string_value_at(arg2,(char const *)arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1list_1string_1value_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->list_string_value_at(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1list_1int_1value_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  boost::int64_t arg3 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      result = (boost::int64_t)(arg1)->list_int_value_at(arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1list_1int_1value_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (boost::int64_t)(arg1)->list_int_value_at(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bdecode_node const *)arg1)->list_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  std::string arg2 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  std::pair< std::string,libtorrent::bdecode_node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_at(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::pair< std::string,libtorrent::bdecode_node > **)&jresult = new std::pair< std::string,libtorrent::bdecode_node >((const std::pair< std::string,libtorrent::bdecode_node > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1dict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  std::string arg2 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_dict(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_list((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  libtorrent::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_int((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bdecode_node **)&jresult = new libtorrent::bdecode_node((const libtorrent::bdecode_node &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1string_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string_value((char const *)arg2,(char const *)arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1string_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->dict_find_string_value((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1int_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  boost::int64_t arg3 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (boost::int64_t)jarg3; 
  {
    try {
      result = (boost::int64_t)((libtorrent::bdecode_node const *)arg1)->dict_find_int_value((char const *)arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1find_1int_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (boost::int64_t)((libtorrent::bdecode_node const *)arg1)->dict_find_int_value((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1dict_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bdecode_node const *)arg1)->dict_size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1int_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  boost::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (boost::int64_t)((libtorrent::bdecode_node const *)arg1)->int_value();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1string_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = ((libtorrent::bdecode_node const *)arg1)->string_value();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1string_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::bdecode_node const *)arg1)->string_ptr();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1string_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::bdecode_node const *)arg1)->string_length();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1switch_1underlying_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->switch_underlying_buffer((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_bdecode_1node_1bdecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  libtorrent::bdecode_node *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg2 = *(libtorrent::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node & reference is null");
    return 0;
  } 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)libtorrent_bdecode_node_bdecode(*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1bdecode_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::bdecode_node *arg1 = (libtorrent::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::bdecode_node **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_print_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = libtorrent::print_entry((libtorrent::bdecode_node const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_print_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = libtorrent::print_entry((libtorrent::bdecode_node const &)*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_print_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::bdecode_node *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent::print_entry((libtorrent::bdecode_node const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1tracker_1response(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::tracker_response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::tracker_response *)new libtorrent::tracker_response();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::tracker_response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::peer_entry > *arg2 = (std::vector< libtorrent::peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = *(std::vector< libtorrent::peer_entry > **)&jarg2; 
  if (arg1) (arg1)->peers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::vector< libtorrent::peer_entry > *)& ((arg1)->peers);
  *(std::vector< libtorrent::peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *arg2 = (std::vector< libtorrent::ipv4_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = *(std::vector< libtorrent::ipv4_peer_entry > **)&jarg2; 
  if (arg1) (arg1)->peers4 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::ipv4_peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::vector< libtorrent::ipv4_peer_entry > *)& ((arg1)->peers4);
  *(std::vector< libtorrent::ipv4_peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *arg2 = (std::vector< libtorrent::ipv6_peer_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = *(std::vector< libtorrent::ipv6_peer_entry > **)&jarg2; 
  if (arg1) (arg1)->peers6 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1peers6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::vector< libtorrent::ipv6_peer_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::vector< libtorrent::ipv6_peer_entry > *)& ((arg1)->peers6);
  *(std::vector< libtorrent::ipv6_peer_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1external_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  libtorrent::address *arg2 = (libtorrent::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = *(libtorrent::address **)&jarg2; 
  if (arg1) (arg1)->external_ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1external_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  libtorrent::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (libtorrent::address *)& ((arg1)->external_ip);
  *(libtorrent::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1failure_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure_reason = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1failure_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::string *) & ((arg1)->failure_reason);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1warning_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->warning_message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1warning_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (std::string *) & ((arg1)->warning_message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->interval = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1min_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min_interval = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1min_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->min_interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->complete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1downloaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloaders = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1downloaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->downloaders);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1downloaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloaded = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1response_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  result = (int) ((arg1)->downloaded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1tracker_1response(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::tracker_response *arg1 = (libtorrent::tracker_response *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::tracker_response **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_make_1magnet_1uri_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_handle *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent::make_magnet_uri((libtorrent::torrent_handle const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_make_1magnet_1uri_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::torrent_info *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (libtorrent::torrent_info *)((*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1) ? (*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = libtorrent::make_magnet_uri((libtorrent::torrent_info const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_parse_1magnet_1uri(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  libtorrent::add_torrent_params *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(libtorrent::add_torrent_params **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::add_torrent_params & reference is null");
    return ;
  } 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::parse_magnet_uri((std::string const &)*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1optimize_1alignment_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::optimize_alignment;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1optimize_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::optimize;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1merkle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::merkle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1modification_1time_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::modification_time;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1symlinks_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::symlinks;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1mutable_1torrent_1support_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libtorrent::create_torrent::flags_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libtorrent::create_torrent::flags_t)libtorrent::create_torrent::mutable_torrent_support;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3,arg4,arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = 0 ;
  int arg2 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1,arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::file_storage *arg1 = 0 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1create_1torrent_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::torrent_info *arg1 = 0 ;
  libtorrent::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (libtorrent::torrent_info *)((*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1) ? (*(boost::shared_ptr< const libtorrent::torrent_info > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::create_torrent *)new libtorrent::create_torrent((libtorrent::torrent_info const &)*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1create_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  libtorrent::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = ((libtorrent::create_torrent const *)arg1)->generate();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::shared_ptr<  libtorrent::entry > **)&jresult = new boost::shared_ptr<  libtorrent::entry >(new libtorrent::entry((libtorrent::entry &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  libtorrent::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = (libtorrent::file_storage *) &((libtorrent::create_torrent const *)arg1)->files();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set_comment((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1creator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set_creator((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_hash(arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1file_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  libtorrent::sha1_hash *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(libtorrent::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_file_hash(arg2,(libtorrent::sha1_hash const &)*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1http_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_http_seed((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_node((std::pair< std::string,int > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1tracker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1tracker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1root_1cert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_root_cert((std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1set_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_priv(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = (bool)((libtorrent::create_torrent const *)arg1)->priv();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::create_torrent const *)arg1)->num_pieces();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::create_torrent const *)arg1)->piece_length();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libtorrent::create_torrent const *)arg1)->piece_size(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1merkle_1tree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::vector< libtorrent::sha1_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  {
    try {
      result = (std::vector< libtorrent::sha1_hash > *) &((libtorrent::create_torrent const *)arg1)->merkle_tree();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(std::vector< libtorrent::sha1_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1similar_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  libtorrent::sha1_hash arg2 ;
  libtorrent::sha1_hash *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  argp2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtorrent::sha1_hash");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_similar_torrent(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_create_1torrent_1add_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = (libtorrent::create_torrent *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_collection(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1files_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  libtorrent::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  boost::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (boost::uint32_t)jarg3; 
  {
    try {
      libtorrent::add_files(*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1files_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::file_storage & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libtorrent::add_files(*arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  libtorrent::create_torrent *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libtorrent::error_code *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::create_torrent **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::create_torrent & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libtorrent::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::error_code & reference is null");
    return ;
  } 
  {
    try {
      libtorrent::set_piece_hashes(*arg1,(std::string const &)*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::create_torrent *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::create_torrent **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::create_torrent & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libtorrent::set_piece_hashes(*arg1,(std::string const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_get_1upnp_1category(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_category *) &libtorrent::get_upnp_category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(boost::system::error_category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1upnp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1add_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  libtorrent::upnp::protocol_type arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  arg2 = (libtorrent::upnp::protocol_type)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (int)(arg1)->add_mapping(arg2,arg3,arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1delete_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->delete_mapping(arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1discover_1device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  {
    try {
      (arg1)->discover_device();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  {
    try {
      (arg1)->close();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1router_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  {
    try {
      result = (arg1)->router_model();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_upnp_1get_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  libtorrent::upnp *arg1 = (libtorrent::upnp *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtorrent::upnp **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libtorrent_upnp_get_mapping(arg1,arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1get_1peers_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libtorrent::sha1_hash *arg1 = 0 ;
  std::vector< tcp::endpoint > *arg2 = 0 ;
  libtorrent::dht_get_peers_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::sha1_hash **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< tcp::endpoint > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< tcp::endpoint > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libtorrent::dht_get_peers_reply_alert *)new libtorrent::dht_get_peers_reply_alert((libtorrent::sha1_hash const &)*arg1,(std::vector< tcp::endpoint > const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::dht_get_peers_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_get_peers_reply_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_get_peers_reply_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::dht_get_peers_reply_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::dht_get_peers_reply_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::dht_get_peers_reply_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::dht_get_peers_reply_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  libtorrent::sha1_hash *arg2 = (libtorrent::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  libtorrent::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  result = (libtorrent::sha1_hash *)& ((arg1)->info_hash);
  *(libtorrent::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  std::vector< tcp::endpoint > *arg2 = (std::vector< tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  arg2 = *(std::vector< tcp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->peers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  std::vector< tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  result = (std::vector< tcp::endpoint > *)& ((arg1)->peers);
  *(std::vector< tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1get_1peers_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::dht_get_peers_reply_alert *arg1 = (libtorrent::dht_get_peers_reply_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1set_1piece_1hashes_1alert(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  libtorrent::set_piece_hashes_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (libtorrent::set_piece_hashes_alert *)new libtorrent::set_piece_hashes_alert((std::string const &)*arg1,arg2,arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::set_piece_hashes_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::set_piece_hashes_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::set_piece_hashes_alert const *)arg1)->type();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  {
    try {
      result = (int)((libtorrent::set_piece_hashes_alert const *)arg1)->category();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  {
    try {
      result = (char *)((libtorrent::set_piece_hashes_alert const *)arg1)->what();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libtorrent::set_piece_hashes_alert::static_category;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  {
    try {
      result = ((libtorrent::set_piece_hashes_alert const *)arg1)->message();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  result = (int) ((arg1)->progress);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1set_1piece_1hashes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::set_piece_hashes_alert *arg1 = (libtorrent::set_piece_hashes_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::set_piece_hashes_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libtorrent::bloom_filter< 20 > const *)arg1)->find((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  libtorrent::sha1_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  arg2 = *(libtorrent::sha1_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtorrent::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set((libtorrent::sha1_hash const &)*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  {
    try {
      result = ((libtorrent::bloom_filter< 20 > const *)arg1)->to_string();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1from_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->from_string((char const *)arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_sha1_1bloom_1filter_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  {
    try {
      result = (float)((libtorrent::bloom_filter< 20 > const *)arg1)->size();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1sha1_1bloom_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtorrent::bloom_filter< 20 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libtorrent::bloom_filter< 20 > *)new libtorrent::bloom_filter< 20 >();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::bloom_filter< 20 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1sha1_1bloom_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtorrent::bloom_filter< 20 > *arg1 = (libtorrent::bloom_filter< 20 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtorrent::bloom_filter< 20 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1seed_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::seed_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1private_1key_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::private_key_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1public_1key_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::public_key_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1signature_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::signature_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1scalar_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::scalar_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1shared_1secret_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ed25519::shared_secret_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1create_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)ed25519::create_seed(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1create_1keypair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      ed25519::create_keypair(*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  std::vector< char > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg4 = *(std::vector< char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      ed25519::sign(*arg1,*arg2,*arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)ed25519::verify(*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1add_1scalar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      ed25519::add_scalar(*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ed25519_1key_1exchange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  std::vector< char > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      ed25519::key_exchange(*arg1,*arg2,*arg3);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1ed25519(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ed25519 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ed25519 *)new ed25519();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(ed25519 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1ed25519(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ed25519 *arg1 = (ed25519 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ed25519 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_to_1hex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = to_hex(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1item_1canonical_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  long arg2 ;
  std::string *arg3 = 0 ;
  std::vector< char > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg2 = (long)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector< char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)dht_item::canonical_string(*arg1,arg2,*arg3,*arg4);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1item_1item_1target_1id_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = dht_item::item_target_id(*arg1);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1item_1item_1target_1id_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *arg2 = 0 ;
  libtorrent::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = dht_item::item_target_id(*arg1,*arg2);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(libtorrent::sha1_hash **)&jresult = new libtorrent::sha1_hash((const libtorrent::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1item_1verify_1mutable_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  std::vector< char > *arg4 = 0 ;
  std::vector< char > *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  arg4 = *(std::vector< char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< char > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)dht_item::verify_mutable_item(*arg1,*arg2,arg3,*arg4,*arg5);
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1item_1sign_1mutable_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  std::vector< char > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  std::vector< char > *arg4 = 0 ;
  std::vector< char > *arg5 = 0 ;
  std::vector< char > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(std::vector< char > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (long)jarg3; 
  arg4 = *(std::vector< char > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg5 = *(std::vector< char > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< char > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  {
    try {
      dht_item::sign_mutable_item(*arg1,*arg2,arg3,*arg4,*arg5,*arg6);
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_new_1dht_1item(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dht_item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (dht_item *)new dht_item();
    } catch (...) {
      translate_cpp_exception(jenv);
      return 0;
    }
  }
  *(dht_item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_delete_1dht_1item(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dht_item *arg1 = (dht_item *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dht_item **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (...) {
      translate_cpp_exception(jenv);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::torrent_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::peer_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::tracker_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1added_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_added_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1removed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_removed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_read_1piece_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::read_piece_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1completed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::file_completed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1renamed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::file_renamed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1rename_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::file_rename_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_performance_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::performance_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1changed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::state_changed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::tracker_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1warning_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::tracker_warning_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1reply_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::scrape_reply_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_scrape_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::scrape_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1reply_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::tracker_reply_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1reply_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::dht_reply_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_tracker_1announce_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::tracker_announce_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_hash_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::hash_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1ban_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_ban_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1unsnubbed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_unsnubbed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1snubbed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_snubbed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connect_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_connect_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1disconnected_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_disconnected_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_invalid_1request_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::invalid_request_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1finished_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_finished_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_piece_1finished_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::piece_finished_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_request_1dropped_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::request_dropped_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1timeout_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::block_timeout_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1finished_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::block_finished_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_block_1downloading_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::block_downloading_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_unwanted_1block_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::unwanted_block_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::storage_moved_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_storage_1moved_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::storage_moved_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1deleted_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_deleted_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1delete_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_delete_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::save_resume_data_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_save_1resume_1data_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::save_resume_data_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1paused_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_paused_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1resumed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_resumed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1checked_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_checked_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_url_1seed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::url_seed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_file_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::file_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::metadata_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_metadata_1received_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::metadata_received_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_udp_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::udp_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_external_1ip_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::external_ip_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::listen_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_listen_1succeeded_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::listen_succeeded_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::portmap_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::portmap_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_portmap_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::portmap_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_fastresume_1rejected_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::fastresume_rejected_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1blocked_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::peer_blocked_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1announce_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_announce_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_get_peers_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_stats_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::stats_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_cache_1flushed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::cache_flushed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_anonymous_1mode_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::anonymous_mode_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1peer_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::lsd_peer_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_trackerid_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::tracker_alert **)&baseptr = *(libtorrent::trackerid_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1bootstrap_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_bootstrap_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::rss_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1need_1cert_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_need_cert_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_incoming_1connection_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::incoming_connection_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_add_1torrent_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::add_torrent_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_state_1update_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::state_update_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_mmap_1cache_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::mmap_cache_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_session_1stats_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::session_stats_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1update_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_update_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_rss_1item_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::rss_item_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1immutable_1item_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_immutable_item_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1mutable_1item_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_mutable_item_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1put_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_put_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_i2p_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::i2p_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1outgoing_1get_1peers_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_outgoing_get_peers_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_torrent_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_alert **)&baseptr = *(libtorrent::torrent_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::peer_alert **)&baseptr = *(libtorrent::peer_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_lsd_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::lsd_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1stats_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_stats_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv4_1peer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_peer **)&baseptr = *(libtorrent::ipv4_peer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_ipv6_1peer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::torrent_peer **)&baseptr = *(libtorrent::ipv6_peer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_peer_1connection_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< libtorrent::peer_connection > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< libtorrent::peer_connection > **)&jarg1;
    *(boost::shared_ptr< libtorrent::bandwidth_socket > **)&baseptr = argp1 ? new boost::shared_ptr< libtorrent::bandwidth_socket >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_web_1seed_1t_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::web_seed_entry **)&baseptr = *(libtorrent::web_seed_t **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_dht_1get_1peers_1reply_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::dht_get_peers_reply_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_frostwire_jlibtorrent_swig_libtorrent_1jni_set_1piece_1hashes_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtorrent::alert **)&baseptr = *(libtorrent::set_piece_hashes_alert **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

