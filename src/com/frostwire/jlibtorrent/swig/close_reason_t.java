/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public enum close_reason_t {
  close_no_reason(libtorrent_jni.close_no_reason_get()),
  close_duplicate_peer_id,
  close_torrent_removed,
  close_no_memory,
  close_port_blocked,
  close_blocked,
  close_upload_to_upload,
  close_not_interested_upload_only,
  close_timeout,
  close_timed_out_interest,
  close_timed_out_activity,
  close_timed_out_handshake,
  close_timed_out_request,
  close_protocol_blocked,
  close_peer_churn,
  close_too_many_connections,
  close_too_many_files,
  close_encryption_error(libtorrent_jni.close_encryption_error_get()),
  close_invalid_info_hash,
  close_self_connection,
  close_invalid_metadata,
  close_metadata_too_big,
  close_message_too_big,
  close_invalid_message_id,
  close_invalid_message,
  close_invalid_piece_message,
  close_invalid_have_message,
  close_invalid_bitfield_message,
  close_invalid_choke_message,
  close_invalid_unchoke_message,
  close_invalid_interested_message,
  close_invalid_not_interested_message,
  close_invalid_request_message,
  close_invalid_reject_message,
  close_invalid_allow_fast_message,
  close_invalid_extended_message,
  close_invalid_cancel_message,
  close_invalid_dht_port_message,
  close_invalid_suggest_message,
  close_invalid_have_all_message,
  close_invalid_dont_have_message,
  close_invalid_have_none_message,
  close_invalid_pex_message,
  close_invalid_metadata_request_message,
  close_invalid_metadata_message,
  close_invalid_metadata_offset,
  close_request_when_choked,
  close_corrupt_pieces,
  close_pex_message_too_big,
  close_pex_too_frequent;

  public final int swigValue() {
    return swigValue;
  }

  public static close_reason_t swigToEnum(int swigValue) {
    close_reason_t[] swigValues = close_reason_t.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (close_reason_t swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + close_reason_t.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private close_reason_t() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private close_reason_t(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private close_reason_t(close_reason_t swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

