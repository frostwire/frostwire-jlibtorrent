/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class stat {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected stat(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(stat obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_stat(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void sent_syn(boolean ipv6) {
    libtorrent_jni.stat_sent_syn(swigCPtr, this, ipv6);
  }

  public void received_synack(boolean ipv6) {
    libtorrent_jni.stat_received_synack(swigCPtr, this, ipv6);
  }

  public void received_bytes(int bytes_payload, int bytes_protocol) {
    libtorrent_jni.stat_received_bytes(swigCPtr, this, bytes_payload, bytes_protocol);
  }

  public void sent_bytes(int bytes_payload, int bytes_protocol) {
    libtorrent_jni.stat_sent_bytes(swigCPtr, this, bytes_payload, bytes_protocol);
  }

  public void trancieve_ip_packet(int bytes_transferred, boolean ipv6) {
    libtorrent_jni.stat_trancieve_ip_packet(swigCPtr, this, bytes_transferred, ipv6);
  }

  public int upload_ip_overhead() {
    return libtorrent_jni.stat_upload_ip_overhead(swigCPtr, this);
  }

  public int download_ip_overhead() {
    return libtorrent_jni.stat_download_ip_overhead(swigCPtr, this);
  }

  public void second_tick(int tick_interval_ms) {
    libtorrent_jni.stat_second_tick(swigCPtr, this, tick_interval_ms);
  }

  public int low_pass_upload_rate() {
    return libtorrent_jni.stat_low_pass_upload_rate(swigCPtr, this);
  }

  public int low_pass_download_rate() {
    return libtorrent_jni.stat_low_pass_download_rate(swigCPtr, this);
  }

  public int upload_rate() {
    return libtorrent_jni.stat_upload_rate(swigCPtr, this);
  }

  public int download_rate() {
    return libtorrent_jni.stat_download_rate(swigCPtr, this);
  }

  public long total_upload() {
    return libtorrent_jni.stat_total_upload(swigCPtr, this);
  }

  public long total_download() {
    return libtorrent_jni.stat_total_download(swigCPtr, this);
  }

  public int upload_payload_rate() {
    return libtorrent_jni.stat_upload_payload_rate(swigCPtr, this);
  }

  public int download_payload_rate() {
    return libtorrent_jni.stat_download_payload_rate(swigCPtr, this);
  }

  public long total_payload_upload() {
    return libtorrent_jni.stat_total_payload_upload(swigCPtr, this);
  }

  public long total_payload_download() {
    return libtorrent_jni.stat_total_payload_download(swigCPtr, this);
  }

  public long total_protocol_upload() {
    return libtorrent_jni.stat_total_protocol_upload(swigCPtr, this);
  }

  public long total_protocol_download() {
    return libtorrent_jni.stat_total_protocol_download(swigCPtr, this);
  }

  public long total_transfer(int channel) {
    return libtorrent_jni.stat_total_transfer(swigCPtr, this, channel);
  }

  public int transfer_rate(int channel) {
    return libtorrent_jni.stat_transfer_rate(swigCPtr, this, channel);
  }

  public void add_stat(long downloaded, long uploaded) {
    libtorrent_jni.stat_add_stat(swigCPtr, this, downloaded, uploaded);
  }

  public int last_payload_downloaded() {
    return libtorrent_jni.stat_last_payload_downloaded(swigCPtr, this);
  }

  public int last_payload_uploaded() {
    return libtorrent_jni.stat_last_payload_uploaded(swigCPtr, this);
  }

  public int last_protocol_downloaded() {
    return libtorrent_jni.stat_last_protocol_downloaded(swigCPtr, this);
  }

  public int last_protocol_uploaded() {
    return libtorrent_jni.stat_last_protocol_uploaded(swigCPtr, this);
  }

  public void clear() {
    libtorrent_jni.stat_clear(swigCPtr, this);
  }

  public stat_channel op_get_at(int i) {
    return new stat_channel(libtorrent_jni.stat_op_get_at(swigCPtr, this, i), false);
  }

  public stat() {
    this(libtorrent_jni.new_stat(), true);
  }

  public final static int upload_payload = libtorrent_jni.stat_upload_payload_get();
  public final static int upload_protocol = libtorrent_jni.stat_upload_protocol_get();
  public final static int download_payload = libtorrent_jni.stat_download_payload_get();
  public final static int download_protocol = libtorrent_jni.stat_download_protocol_get();
  public final static int upload_ip_protocol = libtorrent_jni.stat_upload_ip_protocol_get();
  public final static int download_ip_protocol = libtorrent_jni.stat_download_ip_protocol_get();
  public final static int num_channels = libtorrent_jni.stat_num_channels_get();

}
