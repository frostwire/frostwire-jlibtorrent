/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public enum upnp_errors {
  no_error(0),
  invalid_argument(402),
  action_failed(501),
  value_not_in_array(714),
  source_ip_cannot_be_wildcarded(715),
  external_port_cannot_be_wildcarded(716),
  port_mapping_conflict(718),
  internal_port_must_match_external(724),
  only_permanent_leases_supported(725),
  remote_host_must_be_wildcard(726),
  external_port_must_be_wildcard(727);

  public final int swigValue() {
    return swigValue;
  }

  public static upnp_errors swigToEnum(int swigValue) {
    upnp_errors[] swigValues = upnp_errors.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (upnp_errors swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + upnp_errors.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private upnp_errors() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private upnp_errors(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private upnp_errors(upnp_errors swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

