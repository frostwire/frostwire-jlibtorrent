/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class rss_alert extends alert {
  private long swigCPtr;

  protected rss_alert(long cPtr, boolean cMemoryOwn) {
    super(libtorrent_jni.rss_alert_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(rss_alert obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_rss_alert(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public rss_alert(feed_handle h, String u, int s, error_code ec) {
    this(libtorrent_jni.new_rss_alert(feed_handle.getCPtr(h), h, u, s, error_code.getCPtr(ec), ec), true);
  }

  public int type() {
    return libtorrent_jni.rss_alert_type(swigCPtr, this);
  }

  public int category() {
    return libtorrent_jni.rss_alert_category(swigCPtr, this);
  }

  public String what() {
    return libtorrent_jni.rss_alert_what(swigCPtr, this);
  }

  public String message() {
    return libtorrent_jni.rss_alert_message(swigCPtr, this);
  }

  public void setHandle(feed_handle value) {
    libtorrent_jni.rss_alert_handle_set(swigCPtr, this, feed_handle.getCPtr(value), value);
  }

  public feed_handle getHandle() {
    long cPtr = libtorrent_jni.rss_alert_handle_get(swigCPtr, this);
    return (cPtr == 0) ? null : new feed_handle(cPtr, false);
  }

  public void setUrl(String value) {
    libtorrent_jni.rss_alert_url_set(swigCPtr, this, value);
  }

  public String getUrl() {
    return libtorrent_jni.rss_alert_url_get(swigCPtr, this);
  }

  public void setState(int value) {
    libtorrent_jni.rss_alert_state_set(swigCPtr, this, value);
  }

  public int getState() {
    return libtorrent_jni.rss_alert_state_get(swigCPtr, this);
  }

  public void setError(error_code value) {
    libtorrent_jni.rss_alert_error_set(swigCPtr, this, error_code.getCPtr(value), value);
  }

  public error_code getError() {
    long cPtr = libtorrent_jni.rss_alert_error_get(swigCPtr, this);
    return (cPtr == 0) ? null : new error_code(cPtr, false);
  }

  public final static int alert_type = libtorrent_jni.rss_alert_alert_type_get();
  public final static int static_category = libtorrent_jni.rss_alert_static_category_get();
  public enum state_t {
    state_updating,
    state_updated,
    state_error;

    public final int swigValue() {
      return swigValue;
    }

    public static state_t swigToEnum(int swigValue) {
      state_t[] swigValues = state_t.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (state_t swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + state_t.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private state_t() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private state_t(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private state_t(state_t swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
