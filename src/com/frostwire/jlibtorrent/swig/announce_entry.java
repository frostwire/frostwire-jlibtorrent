/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class announce_entry {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected announce_entry(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(announce_entry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_announce_entry(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public announce_entry(String u) {
    this(libtorrent_jni.new_announce_entry__SWIG_0(u), true);
  }

  public announce_entry() {
    this(libtorrent_jni.new_announce_entry__SWIG_1(), true);
  }

  public void setUrl(String value) {
    libtorrent_jni.announce_entry_url_set(swigCPtr, this, value);
  }

  public String getUrl() {
    return libtorrent_jni.announce_entry_url_get(swigCPtr, this);
  }

  public void setTrackerid(String value) {
    libtorrent_jni.announce_entry_trackerid_set(swigCPtr, this, value);
  }

  public String getTrackerid() {
    return libtorrent_jni.announce_entry_trackerid_get(swigCPtr, this);
  }

  public void setMessage(String value) {
    libtorrent_jni.announce_entry_message_set(swigCPtr, this, value);
  }

  public String getMessage() {
    return libtorrent_jni.announce_entry_message_get(swigCPtr, this);
  }

  public void setLast_error(error_code value) {
    libtorrent_jni.announce_entry_last_error_set(swigCPtr, this, error_code.getCPtr(value), value);
  }

  public error_code getLast_error() {
    long cPtr = libtorrent_jni.announce_entry_last_error_get(swigCPtr, this);
    return (cPtr == 0) ? null : new error_code(cPtr, false);
  }

  public int next_announce_in() {
    return libtorrent_jni.announce_entry_next_announce_in(swigCPtr, this);
  }

  public int min_announce_in() {
    return libtorrent_jni.announce_entry_min_announce_in(swigCPtr, this);
  }

  public void setNext_announce(ptime value) {
    libtorrent_jni.announce_entry_next_announce_set(swigCPtr, this, ptime.getCPtr(value), value);
  }

  public ptime getNext_announce() {
    long cPtr = libtorrent_jni.announce_entry_next_announce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ptime(cPtr, false);
  }

  public void setMin_announce(ptime value) {
    libtorrent_jni.announce_entry_min_announce_set(swigCPtr, this, ptime.getCPtr(value), value);
  }

  public ptime getMin_announce() {
    long cPtr = libtorrent_jni.announce_entry_min_announce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ptime(cPtr, false);
  }

  public void setScrape_incomplete(int value) {
    libtorrent_jni.announce_entry_scrape_incomplete_set(swigCPtr, this, value);
  }

  public int getScrape_incomplete() {
    return libtorrent_jni.announce_entry_scrape_incomplete_get(swigCPtr, this);
  }

  public void setScrape_complete(int value) {
    libtorrent_jni.announce_entry_scrape_complete_set(swigCPtr, this, value);
  }

  public int getScrape_complete() {
    return libtorrent_jni.announce_entry_scrape_complete_get(swigCPtr, this);
  }

  public void setScrape_downloaded(int value) {
    libtorrent_jni.announce_entry_scrape_downloaded_set(swigCPtr, this, value);
  }

  public int getScrape_downloaded() {
    return libtorrent_jni.announce_entry_scrape_downloaded_get(swigCPtr, this);
  }

  public void setTier(short value) {
    libtorrent_jni.announce_entry_tier_set(swigCPtr, this, value);
  }

  public short getTier() {
    return libtorrent_jni.announce_entry_tier_get(swigCPtr, this);
  }

  public void setFail_limit(short value) {
    libtorrent_jni.announce_entry_fail_limit_set(swigCPtr, this, value);
  }

  public short getFail_limit() {
    return libtorrent_jni.announce_entry_fail_limit_get(swigCPtr, this);
  }

  public void setFails(short value) {
    libtorrent_jni.announce_entry_fails_set(swigCPtr, this, value);
  }

  public short getFails() {
    return libtorrent_jni.announce_entry_fails_get(swigCPtr, this);
  }

  public void setUpdating(boolean value) {
    libtorrent_jni.announce_entry_updating_set(swigCPtr, this, value);
  }

  public boolean getUpdating() {
    return libtorrent_jni.announce_entry_updating_get(swigCPtr, this);
  }

  public void setSource(short value) {
    libtorrent_jni.announce_entry_source_set(swigCPtr, this, value);
  }

  public short getSource() {
    return libtorrent_jni.announce_entry_source_get(swigCPtr, this);
  }

  public void setVerified(boolean value) {
    libtorrent_jni.announce_entry_verified_set(swigCPtr, this, value);
  }

  public boolean getVerified() {
    return libtorrent_jni.announce_entry_verified_get(swigCPtr, this);
  }

  public void setStart_sent(boolean value) {
    libtorrent_jni.announce_entry_start_sent_set(swigCPtr, this, value);
  }

  public boolean getStart_sent() {
    return libtorrent_jni.announce_entry_start_sent_get(swigCPtr, this);
  }

  public void setComplete_sent(boolean value) {
    libtorrent_jni.announce_entry_complete_sent_set(swigCPtr, this, value);
  }

  public boolean getComplete_sent() {
    return libtorrent_jni.announce_entry_complete_sent_get(swigCPtr, this);
  }

  public void setSend_stats(boolean value) {
    libtorrent_jni.announce_entry_send_stats_set(swigCPtr, this, value);
  }

  public boolean getSend_stats() {
    return libtorrent_jni.announce_entry_send_stats_get(swigCPtr, this);
  }

  public void reset() {
    libtorrent_jni.announce_entry_reset(swigCPtr, this);
  }

  public boolean is_working() {
    return libtorrent_jni.announce_entry_is_working(swigCPtr, this);
  }

  public void trim() {
    libtorrent_jni.announce_entry_trim(swigCPtr, this);
  }

  public enum tracker_source {
    source_torrent(libtorrent_jni.announce_entry_source_torrent_get()),
    source_client(libtorrent_jni.announce_entry_source_client_get()),
    source_magnet_link(libtorrent_jni.announce_entry_source_magnet_link_get()),
    source_tex(libtorrent_jni.announce_entry_source_tex_get());

    public final int swigValue() {
      return swigValue;
    }

    public static tracker_source swigToEnum(int swigValue) {
      tracker_source[] swigValues = tracker_source.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (tracker_source swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + tracker_source.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private tracker_source() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private tracker_source(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private tracker_source(tracker_source swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
