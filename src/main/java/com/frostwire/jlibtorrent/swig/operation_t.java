/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public final class operation_t {
  public final static operation_t op_bittorrent = new operation_t("op_bittorrent", libtorrent_jni.op_bittorrent_get());
  public final static operation_t op_iocontrol = new operation_t("op_iocontrol");
  public final static operation_t op_getpeername = new operation_t("op_getpeername");
  public final static operation_t op_getname = new operation_t("op_getname");
  public final static operation_t op_alloc_recvbuf = new operation_t("op_alloc_recvbuf");
  public final static operation_t op_alloc_sndbuf = new operation_t("op_alloc_sndbuf");
  public final static operation_t op_file_write = new operation_t("op_file_write");
  public final static operation_t op_file_read = new operation_t("op_file_read");
  public final static operation_t op_file = new operation_t("op_file");
  public final static operation_t op_sock_write = new operation_t("op_sock_write");
  public final static operation_t op_sock_read = new operation_t("op_sock_read");
  public final static operation_t op_sock_open = new operation_t("op_sock_open");
  public final static operation_t op_sock_bind = new operation_t("op_sock_bind");
  public final static operation_t op_available = new operation_t("op_available");
  public final static operation_t op_encryption = new operation_t("op_encryption");
  public final static operation_t op_connect = new operation_t("op_connect");
  public final static operation_t op_ssl_handshake = new operation_t("op_ssl_handshake");
  public final static operation_t op_get_interface = new operation_t("op_get_interface");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static operation_t swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + operation_t.class + " with value " + swigValue);
  }

  private operation_t(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private operation_t(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private operation_t(String swigName, operation_t swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static operation_t[] swigValues = { op_bittorrent, op_iocontrol, op_getpeername, op_getname, op_alloc_recvbuf, op_alloc_sndbuf, op_file_write, op_file_read, op_file, op_sock_write, op_sock_read, op_sock_open, op_sock_bind, op_available, op_encryption, op_connect, op_ssl_handshake, op_get_interface };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

