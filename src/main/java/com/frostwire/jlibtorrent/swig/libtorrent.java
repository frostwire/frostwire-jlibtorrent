/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class libtorrent {
  public static SWIGTYPE_p_std__arrayT_signed_char_32_t ed25519_create_seed() {
    return new SWIGTYPE_p_std__arrayT_signed_char_32_t(libtorrent_jni.ed25519_create_seed(), true);
  }

  public static byte_vectors_pair ed25519_create_keypair(byte_vector seed) {
    return new byte_vectors_pair(libtorrent_jni.ed25519_create_keypair(byte_vector.getCPtr(seed), seed), true);
  }

  public static byte_vector ed25519_sign(byte_vector msg, byte_vector pk, byte_vector sk) {
    return new byte_vector(libtorrent_jni.ed25519_sign(byte_vector.getCPtr(msg), msg, byte_vector.getCPtr(pk), pk, byte_vector.getCPtr(sk), sk), true);
  }

  public static boolean ed25519_verify(byte_vector sig, byte_vector msg, byte_vector pk) {
    return libtorrent_jni.ed25519_verify(byte_vector.getCPtr(sig), sig, byte_vector.getCPtr(msg), msg, byte_vector.getCPtr(pk), pk);
  }

  public static byte_vector ed25519_add_scalar_public(byte_vector pk, byte_vector scalar) {
    return new byte_vector(libtorrent_jni.ed25519_add_scalar_public(byte_vector.getCPtr(pk), pk, byte_vector.getCPtr(scalar), scalar), true);
  }

  public static byte_vector ed25519_add_scalar_secret(byte_vector sk, byte_vector scalar) {
    return new byte_vector(libtorrent_jni.ed25519_add_scalar_secret(byte_vector.getCPtr(sk), sk, byte_vector.getCPtr(scalar), scalar), true);
  }

  public static byte_vector ed25519_key_exchange(byte_vector pk, byte_vector sk) {
    return new byte_vector(libtorrent_jni.ed25519_key_exchange(byte_vector.getCPtr(pk), pk, byte_vector.getCPtr(sk), sk), true);
  }

  public static void add_files_ex(SWIGTYPE_p_libtorrent__file_storage fs, String file, add_files_listener listener, SWIGTYPE_p_libtorrent__create_flags_t flags) {
    libtorrent_jni.add_files_ex(SWIGTYPE_p_libtorrent__file_storage.getCPtr(fs), file, add_files_listener.getCPtr(listener), listener, SWIGTYPE_p_libtorrent__create_flags_t.getCPtr(flags));
  }

  public static void set_piece_hashes_ex(SWIGTYPE_p_libtorrent__create_torrent t, String p, set_piece_hashes_listener listener, error_code ec) {
    libtorrent_jni.set_piece_hashes_ex(SWIGTYPE_p_libtorrent__create_torrent.getCPtr(t), p, set_piece_hashes_listener.getCPtr(listener), listener, error_code.getCPtr(ec), ec);
  }

  public static int boost_version() {
    return libtorrent_jni.boost_version();
  }

  public static String boost_lib_version() {
    return libtorrent_jni.boost_lib_version();
  }

  public static int openssl_version_number() {
    return libtorrent_jni.openssl_version_number();
  }

  public static String openssl_version_text() {
    return libtorrent_jni.openssl_version_text();
  }

  public static int find_metric_idx_s(String name) {
    return libtorrent_jni.find_metric_idx_s(name);
  }

  public static ip_interface_vector enum_net_interfaces(SWIGTYPE_p_libtorrent__session s) {
    return new ip_interface_vector(libtorrent_jni.enum_net_interfaces(SWIGTYPE_p_libtorrent__session.getCPtr(s)), true);
  }

  public static ip_route_vector enum_routes(SWIGTYPE_p_libtorrent__session s) {
    return new ip_route_vector(libtorrent_jni.enum_routes(SWIGTYPE_p_libtorrent__session.getCPtr(s)), true);
  }

  public static void mem_copy(byte_vector source, String target, long target_size) {
    libtorrent_jni.mem_copy(byte_vector.getCPtr(source), source, target, target_size);
  }

  public static void copy_byte_vector_to_char_array(byte_vector source, String target, long target_size) {
    libtorrent_jni.copy_byte_vector_to_char_array(byte_vector.getCPtr(source), source, target, target_size);
  }

  public static address get_gateway(ip_interface iface, ip_route_vector routes) {
    return new address(libtorrent_jni.get_gateway(ip_interface.getCPtr(iface), iface, ip_route_vector.getCPtr(routes), routes), true);
  }

  public static String device_for_address(SWIGTYPE_p_libtorrent__session s, address addr, error_code ec) {
    return libtorrent_jni.device_for_address(SWIGTYPE_p_libtorrent__session.getCPtr(s), address.getCPtr(addr), addr, error_code.getCPtr(ec), ec);
  }

  public static boolean arm_neon_support() {
    return libtorrent_jni.arm_neon_support();
  }

  public static void set_posix_wrapper(posix_wrapper obj) {
    libtorrent_jni.set_posix_wrapper(posix_wrapper.getCPtr(obj), obj);
  }

}
