/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class storage_error {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected storage_error(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(storage_error obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtorrent_jni.delete_storage_error(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public storage_error() {
    this(libtorrent_jni.new_storage_error__SWIG_0(), true);
  }

  public storage_error(error_code e) {
    this(libtorrent_jni.new_storage_error__SWIG_1(error_code.getCPtr(e), e), true);
  }

  public boolean op_bool() {
    return libtorrent_jni.storage_error_op_bool(swigCPtr, this);
  }

  public void setEc(error_code value) {
    libtorrent_jni.storage_error_ec_set(swigCPtr, this, error_code.getCPtr(value), value);
  }

  public error_code getEc() {
    long cPtr = libtorrent_jni.storage_error_ec_get(swigCPtr, this);
    return (cPtr == 0) ? null : new error_code(cPtr, false);
  }

  public void setFile(int value) {
    libtorrent_jni.storage_error_file_set(swigCPtr, this, value);
  }

  public int getFile() {
    return libtorrent_jni.storage_error_file_get(swigCPtr, this);
  }

  public void setOperation(long value) {
    libtorrent_jni.storage_error_operation_set(swigCPtr, this, value);
  }

  public long getOperation() {
    return libtorrent_jni.storage_error_operation_get(swigCPtr, this);
  }

  public String operation_str() {
    return libtorrent_jni.storage_error_operation_str(swigCPtr, this);
  }

  public final static class file_operation_t {
    public final static storage_error.file_operation_t none = new storage_error.file_operation_t("none");
    public final static storage_error.file_operation_t stat = new storage_error.file_operation_t("stat");
    public final static storage_error.file_operation_t mkdir = new storage_error.file_operation_t("mkdir");
    public final static storage_error.file_operation_t open = new storage_error.file_operation_t("open");
    public final static storage_error.file_operation_t rename = new storage_error.file_operation_t("rename");
    public final static storage_error.file_operation_t remove = new storage_error.file_operation_t("remove");
    public final static storage_error.file_operation_t copy = new storage_error.file_operation_t("copy");
    public final static storage_error.file_operation_t read = new storage_error.file_operation_t("read");
    public final static storage_error.file_operation_t write = new storage_error.file_operation_t("write");
    public final static storage_error.file_operation_t fallocate = new storage_error.file_operation_t("fallocate");
    public final static storage_error.file_operation_t alloc_cache_piece = new storage_error.file_operation_t("alloc_cache_piece");
    public final static storage_error.file_operation_t partfile_move = new storage_error.file_operation_t("partfile_move");
    public final static storage_error.file_operation_t partfile_read = new storage_error.file_operation_t("partfile_read");
    public final static storage_error.file_operation_t partfile_write = new storage_error.file_operation_t("partfile_write");
    public final static storage_error.file_operation_t check_resume = new storage_error.file_operation_t("check_resume");
    public final static storage_error.file_operation_t hard_link = new storage_error.file_operation_t("hard_link");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static file_operation_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + file_operation_t.class + " with value " + swigValue);
    }

    private file_operation_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private file_operation_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private file_operation_t(String swigName, file_operation_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static file_operation_t[] swigValues = { none, stat, mkdir, open, rename, remove, copy, read, write, fallocate, alloc_cache_piece, partfile_move, partfile_read, partfile_write, check_resume, hard_link };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
