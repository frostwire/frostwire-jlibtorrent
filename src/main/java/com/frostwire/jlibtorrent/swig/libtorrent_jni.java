/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class libtorrent_jni {


    public static String jlibtorrentVersion() {
        // extracted from the gradle with the run-swig step
        return "2.0.8.0";
    }

    public static boolean isMacOS() {
      String os = System.getProperty("os.name").toLowerCase(java.util.Locale.US);
      return os.startsWith("mac os");
    }

    public static String getMacOSLibraryName() {
      String os_arch = System.getProperty("os.arch");
      if ("aarch64".equals(os_arch)) {
        return "jlibtorrent.arm64";
      }
      return "jlibtorrent." + os_arch;
    }

    static {
        try {
            String path = System.getProperty("jlibtorrent.jni.path", "");
            if ("".equals(path)) {
                try {
                    String jlibtorrentLibraryName = "jlibtorrent";
                    if (isMacOS()) {
                      jlibtorrentLibraryName = getMacOSLibraryName();
                    }
                    System.out.println("jlibtorrent: Trying to load jlibtorrent without version number: " + jlibtorrentLibraryName + ".<so|dylib>...");
                    System.loadLibrary(jlibtorrentLibraryName);
                    System.out.println("jlibtorrent: SUCCESS: Loaded jlibtorrent.<so|dylib> (version=" +  jlibtorrentVersion() + ")");
                } catch (LinkageError ignored) {
                    // give it a try to the name with version
                    try {
                        System.out.println("jlibtorrent: FAILED: Trying to load jlibtorrent with version number: jlibtorrent-" + jlibtorrentVersion());
                        System.loadLibrary("jlibtorrent-" + jlibtorrentVersion());
                        System.out.println("jlibtorrent: SUCCESS: Loaded jlibtorrent-" + jlibtorrentVersion());
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                }
            } else {
                System.out.println("jlibtorrent: Trying to load jlibtorrent through system property jlibtorrent.jni.path=" + path);
                System.load(path);
                System.out.println("jlibtorrent: SUCCESS: Loaded jlibtorrent through jlibtorrent.jni.path parameter");
            }
        } catch (LinkageError e) {
            throw new LinkageError(
                "Look for your architecture binary instructions at: https://github.com/frostwire/frostwire-jlibtorrent", e);
        }
    }

    public static final native long directBufferAddress(java.nio.Buffer buffer);
    public static final native long directBufferCapacity(java.nio.Buffer buffer);

  public final static native long new_error_code();
  public final static native void error_code_clear(long jarg1, error_code jarg1_);
  public final static native int error_code_value(long jarg1, error_code jarg1_);
  public final static native String error_code_message(long jarg1, error_code jarg1_);
  public final static native boolean error_code_failed(long jarg1, error_code jarg1_);
  public final static native boolean error_code_op_bool(long jarg1, error_code jarg1_);
  public final static native void delete_error_code(long jarg1);
  public final static native long new_byte_span();
  public final static native long byte_span_size(long jarg1, byte_span jarg1_);
  public final static native boolean byte_span_empty(long jarg1, byte_span jarg1_);
  public final static native byte byte_span_front(long jarg1, byte_span jarg1_);
  public final static native byte byte_span_back(long jarg1, byte_span jarg1_);
  public final static native long byte_span_first(long jarg1, byte_span jarg1_, long jarg2);
  public final static native long byte_span_last(long jarg1, byte_span jarg1_, long jarg2);
  public final static native long byte_span_subspan__SWIG_0(long jarg1, byte_span jarg1_, long jarg2);
  public final static native long byte_span_subspan__SWIG_1(long jarg1, byte_span jarg1_, long jarg2, long jarg3);
  public final static native byte byte_span_get(long jarg1, byte_span jarg1_, long jarg2);
  public final static native void byte_span_set(long jarg1, byte_span jarg1_, long jarg2, byte jarg3);
  public final static native void delete_byte_span(long jarg1);
  public final static native long new_byte_const_span();
  public final static native long byte_const_span_size(long jarg1, byte_const_span jarg1_);
  public final static native boolean byte_const_span_empty(long jarg1, byte_const_span jarg1_);
  public final static native byte byte_const_span_front(long jarg1, byte_const_span jarg1_);
  public final static native byte byte_const_span_back(long jarg1, byte_const_span jarg1_);
  public final static native long byte_const_span_first(long jarg1, byte_const_span jarg1_, long jarg2);
  public final static native long byte_const_span_last(long jarg1, byte_const_span jarg1_, long jarg2);
  public final static native long byte_const_span_subspan__SWIG_0(long jarg1, byte_const_span jarg1_, long jarg2);
  public final static native long byte_const_span_subspan__SWIG_1(long jarg1, byte_const_span jarg1_, long jarg2, long jarg3);
  public final static native byte byte_const_span_get(long jarg1, byte_const_span jarg1_, long jarg2);
  public final static native void delete_byte_const_span(long jarg1);
  public final static native long alert_category_t_all();
  public final static native boolean alert_category_t_nonZero(long jarg1, alert_category_t jarg1_);
  public final static native boolean alert_category_t_eq(long jarg1, alert_category_t jarg1_, long jarg2, alert_category_t jarg2_);
  public final static native boolean alert_category_t_ne(long jarg1, alert_category_t jarg1_, long jarg2, alert_category_t jarg2_);
  public final static native long alert_category_t_or_(long jarg1, alert_category_t jarg1_, long jarg2, alert_category_t jarg2_);
  public final static native long alert_category_t_and_(long jarg1, alert_category_t jarg1_, long jarg2, alert_category_t jarg2_);
  public final static native long alert_category_t_xor(long jarg1, alert_category_t jarg1_, long jarg2, alert_category_t jarg2_);
  public final static native long alert_category_t_inv(long jarg1, alert_category_t jarg1_);
  public final static native int alert_category_t_to_int(long jarg1, alert_category_t jarg1_);
  public final static native long new_alert_category_t();
  public final static native void delete_alert_category_t(long jarg1);
  public final static native long add_piece_flags_t_all();
  public final static native boolean add_piece_flags_t_nonZero(long jarg1, add_piece_flags_t jarg1_);
  public final static native boolean add_piece_flags_t_eq(long jarg1, add_piece_flags_t jarg1_, long jarg2, add_piece_flags_t jarg2_);
  public final static native boolean add_piece_flags_t_ne(long jarg1, add_piece_flags_t jarg1_, long jarg2, add_piece_flags_t jarg2_);
  public final static native long add_piece_flags_t_or_(long jarg1, add_piece_flags_t jarg1_, long jarg2, add_piece_flags_t jarg2_);
  public final static native long add_piece_flags_t_and_(long jarg1, add_piece_flags_t jarg1_, long jarg2, add_piece_flags_t jarg2_);
  public final static native long add_piece_flags_t_xor(long jarg1, add_piece_flags_t jarg1_, long jarg2, add_piece_flags_t jarg2_);
  public final static native long add_piece_flags_t_inv(long jarg1, add_piece_flags_t jarg1_);
  public final static native int add_piece_flags_t_to_int(long jarg1, add_piece_flags_t jarg1_);
  public final static native long new_add_piece_flags_t();
  public final static native void delete_add_piece_flags_t(long jarg1);
  public final static native long file_progress_flags_t_all();
  public final static native boolean file_progress_flags_t_nonZero(long jarg1, file_progress_flags_t jarg1_);
  public final static native boolean file_progress_flags_t_eq(long jarg1, file_progress_flags_t jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native boolean file_progress_flags_t_ne(long jarg1, file_progress_flags_t jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native long file_progress_flags_t_or_(long jarg1, file_progress_flags_t jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native long file_progress_flags_t_and_(long jarg1, file_progress_flags_t jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native long file_progress_flags_t_xor(long jarg1, file_progress_flags_t jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native long file_progress_flags_t_inv(long jarg1, file_progress_flags_t jarg1_);
  public final static native int file_progress_flags_t_to_int(long jarg1, file_progress_flags_t jarg1_);
  public final static native long new_file_progress_flags_t();
  public final static native void delete_file_progress_flags_t(long jarg1);
  public final static native long status_flags_t_all();
  public final static native boolean status_flags_t_nonZero(long jarg1, status_flags_t jarg1_);
  public final static native boolean status_flags_t_eq(long jarg1, status_flags_t jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native boolean status_flags_t_ne(long jarg1, status_flags_t jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native long status_flags_t_or_(long jarg1, status_flags_t jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native long status_flags_t_and_(long jarg1, status_flags_t jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native long status_flags_t_xor(long jarg1, status_flags_t jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native long status_flags_t_inv(long jarg1, status_flags_t jarg1_);
  public final static native int status_flags_t_to_int(long jarg1, status_flags_t jarg1_);
  public final static native long new_status_flags_t();
  public final static native void delete_status_flags_t(long jarg1);
  public final static native long deadline_flags_t_all();
  public final static native boolean deadline_flags_t_nonZero(long jarg1, deadline_flags_t jarg1_);
  public final static native boolean deadline_flags_t_eq(long jarg1, deadline_flags_t jarg1_, long jarg2, deadline_flags_t jarg2_);
  public final static native boolean deadline_flags_t_ne(long jarg1, deadline_flags_t jarg1_, long jarg2, deadline_flags_t jarg2_);
  public final static native long deadline_flags_t_or_(long jarg1, deadline_flags_t jarg1_, long jarg2, deadline_flags_t jarg2_);
  public final static native long deadline_flags_t_and_(long jarg1, deadline_flags_t jarg1_, long jarg2, deadline_flags_t jarg2_);
  public final static native long deadline_flags_t_xor(long jarg1, deadline_flags_t jarg1_, long jarg2, deadline_flags_t jarg2_);
  public final static native long deadline_flags_t_inv(long jarg1, deadline_flags_t jarg1_);
  public final static native int deadline_flags_t_to_int(long jarg1, deadline_flags_t jarg1_);
  public final static native long new_deadline_flags_t();
  public final static native void delete_deadline_flags_t(long jarg1);
  public final static native long session_flags_t_all();
  public final static native boolean session_flags_t_nonZero(long jarg1, session_flags_t jarg1_);
  public final static native boolean session_flags_t_eq(long jarg1, session_flags_t jarg1_, long jarg2, session_flags_t jarg2_);
  public final static native boolean session_flags_t_ne(long jarg1, session_flags_t jarg1_, long jarg2, session_flags_t jarg2_);
  public final static native long session_flags_t_or_(long jarg1, session_flags_t jarg1_, long jarg2, session_flags_t jarg2_);
  public final static native long session_flags_t_and_(long jarg1, session_flags_t jarg1_, long jarg2, session_flags_t jarg2_);
  public final static native long session_flags_t_xor(long jarg1, session_flags_t jarg1_, long jarg2, session_flags_t jarg2_);
  public final static native long session_flags_t_inv(long jarg1, session_flags_t jarg1_);
  public final static native int session_flags_t_to_int(long jarg1, session_flags_t jarg1_);
  public final static native long new_session_flags_t();
  public final static native void delete_session_flags_t(long jarg1);
  public final static native long pause_flags_t_all();
  public final static native boolean pause_flags_t_nonZero(long jarg1, pause_flags_t jarg1_);
  public final static native boolean pause_flags_t_eq(long jarg1, pause_flags_t jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native boolean pause_flags_t_ne(long jarg1, pause_flags_t jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native long pause_flags_t_or_(long jarg1, pause_flags_t jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native long pause_flags_t_and_(long jarg1, pause_flags_t jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native long pause_flags_t_xor(long jarg1, pause_flags_t jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native long pause_flags_t_inv(long jarg1, pause_flags_t jarg1_);
  public final static native int pause_flags_t_to_int(long jarg1, pause_flags_t jarg1_);
  public final static native long new_pause_flags_t();
  public final static native void delete_pause_flags_t(long jarg1);
  public final static native long resume_data_flags_t_all();
  public final static native boolean resume_data_flags_t_nonZero(long jarg1, resume_data_flags_t jarg1_);
  public final static native boolean resume_data_flags_t_eq(long jarg1, resume_data_flags_t jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native boolean resume_data_flags_t_ne(long jarg1, resume_data_flags_t jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native long resume_data_flags_t_or_(long jarg1, resume_data_flags_t jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native long resume_data_flags_t_and_(long jarg1, resume_data_flags_t jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native long resume_data_flags_t_xor(long jarg1, resume_data_flags_t jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native long resume_data_flags_t_inv(long jarg1, resume_data_flags_t jarg1_);
  public final static native int resume_data_flags_t_to_int(long jarg1, resume_data_flags_t jarg1_);
  public final static native long new_resume_data_flags_t();
  public final static native void delete_resume_data_flags_t(long jarg1);
  public final static native long picker_flags_t_all();
  public final static native boolean picker_flags_t_nonZero(long jarg1, picker_flags_t jarg1_);
  public final static native boolean picker_flags_t_eq(long jarg1, picker_flags_t jarg1_, long jarg2, picker_flags_t jarg2_);
  public final static native boolean picker_flags_t_ne(long jarg1, picker_flags_t jarg1_, long jarg2, picker_flags_t jarg2_);
  public final static native long picker_flags_t_or_(long jarg1, picker_flags_t jarg1_, long jarg2, picker_flags_t jarg2_);
  public final static native long picker_flags_t_and_(long jarg1, picker_flags_t jarg1_, long jarg2, picker_flags_t jarg2_);
  public final static native long picker_flags_t_xor(long jarg1, picker_flags_t jarg1_, long jarg2, picker_flags_t jarg2_);
  public final static native long picker_flags_t_inv(long jarg1, picker_flags_t jarg1_);
  public final static native int picker_flags_t_to_int(long jarg1, picker_flags_t jarg1_);
  public final static native long new_picker_flags_t();
  public final static native void delete_picker_flags_t(long jarg1);
  public final static native long remove_flags_t_all();
  public final static native boolean remove_flags_t_nonZero(long jarg1, remove_flags_t jarg1_);
  public final static native boolean remove_flags_t_eq(long jarg1, remove_flags_t jarg1_, long jarg2, remove_flags_t jarg2_);
  public final static native boolean remove_flags_t_ne(long jarg1, remove_flags_t jarg1_, long jarg2, remove_flags_t jarg2_);
  public final static native long remove_flags_t_or_(long jarg1, remove_flags_t jarg1_, long jarg2, remove_flags_t jarg2_);
  public final static native long remove_flags_t_and_(long jarg1, remove_flags_t jarg1_, long jarg2, remove_flags_t jarg2_);
  public final static native long remove_flags_t_xor(long jarg1, remove_flags_t jarg1_, long jarg2, remove_flags_t jarg2_);
  public final static native long remove_flags_t_inv(long jarg1, remove_flags_t jarg1_);
  public final static native int remove_flags_t_to_int(long jarg1, remove_flags_t jarg1_);
  public final static native long new_remove_flags_t();
  public final static native void delete_remove_flags_t(long jarg1);
  public final static native long save_state_flags_t_all();
  public final static native boolean save_state_flags_t_nonZero(long jarg1, save_state_flags_t jarg1_);
  public final static native boolean save_state_flags_t_eq(long jarg1, save_state_flags_t jarg1_, long jarg2, save_state_flags_t jarg2_);
  public final static native boolean save_state_flags_t_ne(long jarg1, save_state_flags_t jarg1_, long jarg2, save_state_flags_t jarg2_);
  public final static native long save_state_flags_t_or_(long jarg1, save_state_flags_t jarg1_, long jarg2, save_state_flags_t jarg2_);
  public final static native long save_state_flags_t_and_(long jarg1, save_state_flags_t jarg1_, long jarg2, save_state_flags_t jarg2_);
  public final static native long save_state_flags_t_xor(long jarg1, save_state_flags_t jarg1_, long jarg2, save_state_flags_t jarg2_);
  public final static native long save_state_flags_t_inv(long jarg1, save_state_flags_t jarg1_);
  public final static native int save_state_flags_t_to_int(long jarg1, save_state_flags_t jarg1_);
  public final static native long new_save_state_flags_t();
  public final static native void delete_save_state_flags_t(long jarg1);
  public final static native long torrent_flags_t_all();
  public final static native boolean torrent_flags_t_nonZero(long jarg1, torrent_flags_t jarg1_);
  public final static native boolean torrent_flags_t_eq(long jarg1, torrent_flags_t jarg1_, long jarg2, torrent_flags_t jarg2_);
  public final static native boolean torrent_flags_t_ne(long jarg1, torrent_flags_t jarg1_, long jarg2, torrent_flags_t jarg2_);
  public final static native long torrent_flags_t_or_(long jarg1, torrent_flags_t jarg1_, long jarg2, torrent_flags_t jarg2_);
  public final static native long torrent_flags_t_and_(long jarg1, torrent_flags_t jarg1_, long jarg2, torrent_flags_t jarg2_);
  public final static native long torrent_flags_t_xor(long jarg1, torrent_flags_t jarg1_, long jarg2, torrent_flags_t jarg2_);
  public final static native long torrent_flags_t_inv(long jarg1, torrent_flags_t jarg1_);
  public final static native int torrent_flags_t_to_int(long jarg1, torrent_flags_t jarg1_);
  public final static native long new_torrent_flags_t();
  public final static native void delete_torrent_flags_t(long jarg1);
  public final static native long peer_flags_t_all();
  public final static native boolean peer_flags_t_nonZero(long jarg1, peer_flags_t jarg1_);
  public final static native boolean peer_flags_t_eq(long jarg1, peer_flags_t jarg1_, long jarg2, peer_flags_t jarg2_);
  public final static native boolean peer_flags_t_ne(long jarg1, peer_flags_t jarg1_, long jarg2, peer_flags_t jarg2_);
  public final static native long peer_flags_t_or_(long jarg1, peer_flags_t jarg1_, long jarg2, peer_flags_t jarg2_);
  public final static native long peer_flags_t_and_(long jarg1, peer_flags_t jarg1_, long jarg2, peer_flags_t jarg2_);
  public final static native long peer_flags_t_xor(long jarg1, peer_flags_t jarg1_, long jarg2, peer_flags_t jarg2_);
  public final static native long peer_flags_t_inv(long jarg1, peer_flags_t jarg1_);
  public final static native int peer_flags_t_to_int(long jarg1, peer_flags_t jarg1_);
  public final static native long new_peer_flags_t();
  public final static native void delete_peer_flags_t(long jarg1);
  public final static native long peer_source_flags_t_all();
  public final static native boolean peer_source_flags_t_nonZero(long jarg1, peer_source_flags_t jarg1_);
  public final static native boolean peer_source_flags_t_eq(long jarg1, peer_source_flags_t jarg1_, long jarg2, peer_source_flags_t jarg2_);
  public final static native boolean peer_source_flags_t_ne(long jarg1, peer_source_flags_t jarg1_, long jarg2, peer_source_flags_t jarg2_);
  public final static native long peer_source_flags_t_or_(long jarg1, peer_source_flags_t jarg1_, long jarg2, peer_source_flags_t jarg2_);
  public final static native long peer_source_flags_t_and_(long jarg1, peer_source_flags_t jarg1_, long jarg2, peer_source_flags_t jarg2_);
  public final static native long peer_source_flags_t_xor(long jarg1, peer_source_flags_t jarg1_, long jarg2, peer_source_flags_t jarg2_);
  public final static native long peer_source_flags_t_inv(long jarg1, peer_source_flags_t jarg1_);
  public final static native int peer_source_flags_t_to_int(long jarg1, peer_source_flags_t jarg1_);
  public final static native long new_peer_source_flags_t();
  public final static native void delete_peer_source_flags_t(long jarg1);
  public final static native long pex_flags_t_all();
  public final static native boolean pex_flags_t_nonZero(long jarg1, pex_flags_t jarg1_);
  public final static native boolean pex_flags_t_eq(long jarg1, pex_flags_t jarg1_, long jarg2, pex_flags_t jarg2_);
  public final static native boolean pex_flags_t_ne(long jarg1, pex_flags_t jarg1_, long jarg2, pex_flags_t jarg2_);
  public final static native long pex_flags_t_or_(long jarg1, pex_flags_t jarg1_, long jarg2, pex_flags_t jarg2_);
  public final static native long pex_flags_t_and_(long jarg1, pex_flags_t jarg1_, long jarg2, pex_flags_t jarg2_);
  public final static native long pex_flags_t_xor(long jarg1, pex_flags_t jarg1_, long jarg2, pex_flags_t jarg2_);
  public final static native long pex_flags_t_inv(long jarg1, pex_flags_t jarg1_);
  public final static native int pex_flags_t_to_int(long jarg1, pex_flags_t jarg1_);
  public final static native long new_pex_flags_t();
  public final static native void delete_pex_flags_t(long jarg1);
  public final static native long bandwidth_state_flags_t_all();
  public final static native boolean bandwidth_state_flags_t_nonZero(long jarg1, bandwidth_state_flags_t jarg1_);
  public final static native boolean bandwidth_state_flags_t_eq(long jarg1, bandwidth_state_flags_t jarg1_, long jarg2, bandwidth_state_flags_t jarg2_);
  public final static native boolean bandwidth_state_flags_t_ne(long jarg1, bandwidth_state_flags_t jarg1_, long jarg2, bandwidth_state_flags_t jarg2_);
  public final static native long bandwidth_state_flags_t_or_(long jarg1, bandwidth_state_flags_t jarg1_, long jarg2, bandwidth_state_flags_t jarg2_);
  public final static native long bandwidth_state_flags_t_and_(long jarg1, bandwidth_state_flags_t jarg1_, long jarg2, bandwidth_state_flags_t jarg2_);
  public final static native long bandwidth_state_flags_t_xor(long jarg1, bandwidth_state_flags_t jarg1_, long jarg2, bandwidth_state_flags_t jarg2_);
  public final static native long bandwidth_state_flags_t_inv(long jarg1, bandwidth_state_flags_t jarg1_);
  public final static native int bandwidth_state_flags_t_to_int(long jarg1, bandwidth_state_flags_t jarg1_);
  public final static native long new_bandwidth_state_flags_t();
  public final static native void delete_bandwidth_state_flags_t(long jarg1);
  public final static native long file_flags_t_all();
  public final static native boolean file_flags_t_nonZero(long jarg1, file_flags_t jarg1_);
  public final static native boolean file_flags_t_eq(long jarg1, file_flags_t jarg1_, long jarg2, file_flags_t jarg2_);
  public final static native boolean file_flags_t_ne(long jarg1, file_flags_t jarg1_, long jarg2, file_flags_t jarg2_);
  public final static native long file_flags_t_or_(long jarg1, file_flags_t jarg1_, long jarg2, file_flags_t jarg2_);
  public final static native long file_flags_t_and_(long jarg1, file_flags_t jarg1_, long jarg2, file_flags_t jarg2_);
  public final static native long file_flags_t_xor(long jarg1, file_flags_t jarg1_, long jarg2, file_flags_t jarg2_);
  public final static native long file_flags_t_inv(long jarg1, file_flags_t jarg1_);
  public final static native int file_flags_t_to_int(long jarg1, file_flags_t jarg1_);
  public final static native long new_file_flags_t();
  public final static native void delete_file_flags_t(long jarg1);
  public final static native long create_flags_t_all();
  public final static native boolean create_flags_t_nonZero(long jarg1, create_flags_t jarg1_);
  public final static native boolean create_flags_t_eq(long jarg1, create_flags_t jarg1_, long jarg2, create_flags_t jarg2_);
  public final static native boolean create_flags_t_ne(long jarg1, create_flags_t jarg1_, long jarg2, create_flags_t jarg2_);
  public final static native long create_flags_t_or_(long jarg1, create_flags_t jarg1_, long jarg2, create_flags_t jarg2_);
  public final static native long create_flags_t_and_(long jarg1, create_flags_t jarg1_, long jarg2, create_flags_t jarg2_);
  public final static native long create_flags_t_xor(long jarg1, create_flags_t jarg1_, long jarg2, create_flags_t jarg2_);
  public final static native long create_flags_t_inv(long jarg1, create_flags_t jarg1_);
  public final static native int create_flags_t_to_int(long jarg1, create_flags_t jarg1_);
  public final static native long new_create_flags_t();
  public final static native void delete_create_flags_t(long jarg1);
  public final static native long reopen_network_flags_t_all();
  public final static native boolean reopen_network_flags_t_nonZero(long jarg1, reopen_network_flags_t jarg1_);
  public final static native boolean reopen_network_flags_t_eq(long jarg1, reopen_network_flags_t jarg1_, long jarg2, reopen_network_flags_t jarg2_);
  public final static native boolean reopen_network_flags_t_ne(long jarg1, reopen_network_flags_t jarg1_, long jarg2, reopen_network_flags_t jarg2_);
  public final static native long reopen_network_flags_t_or_(long jarg1, reopen_network_flags_t jarg1_, long jarg2, reopen_network_flags_t jarg2_);
  public final static native long reopen_network_flags_t_and_(long jarg1, reopen_network_flags_t jarg1_, long jarg2, reopen_network_flags_t jarg2_);
  public final static native long reopen_network_flags_t_xor(long jarg1, reopen_network_flags_t jarg1_, long jarg2, reopen_network_flags_t jarg2_);
  public final static native long reopen_network_flags_t_inv(long jarg1, reopen_network_flags_t jarg1_);
  public final static native int reopen_network_flags_t_to_int(long jarg1, reopen_network_flags_t jarg1_);
  public final static native long new_reopen_network_flags_t();
  public final static native void delete_reopen_network_flags_t(long jarg1);
  public final static native long reannounce_flags_t_all();
  public final static native boolean reannounce_flags_t_nonZero(long jarg1, reannounce_flags_t jarg1_);
  public final static native boolean reannounce_flags_t_eq(long jarg1, reannounce_flags_t jarg1_, long jarg2, reannounce_flags_t jarg2_);
  public final static native boolean reannounce_flags_t_ne(long jarg1, reannounce_flags_t jarg1_, long jarg2, reannounce_flags_t jarg2_);
  public final static native long reannounce_flags_t_or_(long jarg1, reannounce_flags_t jarg1_, long jarg2, reannounce_flags_t jarg2_);
  public final static native long reannounce_flags_t_and_(long jarg1, reannounce_flags_t jarg1_, long jarg2, reannounce_flags_t jarg2_);
  public final static native long reannounce_flags_t_xor(long jarg1, reannounce_flags_t jarg1_, long jarg2, reannounce_flags_t jarg2_);
  public final static native long reannounce_flags_t_inv(long jarg1, reannounce_flags_t jarg1_);
  public final static native int reannounce_flags_t_to_int(long jarg1, reannounce_flags_t jarg1_);
  public final static native long new_reannounce_flags_t();
  public final static native void delete_reannounce_flags_t(long jarg1);
  public final static native long new_address__SWIG_0();
  public final static native long new_address__SWIG_1(long jarg1, address jarg1_);
  public final static native boolean address_is_v4(long jarg1, address jarg1_);
  public final static native boolean address_is_v6(long jarg1, address jarg1_);
  public final static native String address_to_string(long jarg1, address jarg1_);
  public final static native boolean address_is_loopback(long jarg1, address jarg1_);
  public final static native boolean address_is_unspecified(long jarg1, address jarg1_);
  public final static native boolean address_is_multicast(long jarg1, address jarg1_);
  public final static native boolean address_op_lt(long jarg1, address jarg1_, long jarg2, address jarg2_);
  public final static native int address_compare(long jarg1, address jarg1_, long jarg2, address jarg2_);
  public final static native long address_from_string(String jarg1, long jarg2, error_code jarg2_);
  public final static native int address_hash_code(long jarg1, address jarg1_);
  public final static native void delete_address(long jarg1);
  public final static native long new_piece_index_int_pair__SWIG_0();
  public final static native long new_piece_index_int_pair__SWIG_1(int jarg1, int jarg2);
  public final static native long new_piece_index_int_pair__SWIG_2(long jarg1, piece_index_int_pair jarg1_);
  public final static native void piece_index_int_pair_first_set(long jarg1, piece_index_int_pair jarg1_, int jarg2);
  public final static native int piece_index_int_pair_first_get(long jarg1, piece_index_int_pair jarg1_);
  public final static native void piece_index_int_pair_second_set(long jarg1, piece_index_int_pair jarg1_, int jarg2);
  public final static native int piece_index_int_pair_second_get(long jarg1, piece_index_int_pair jarg1_);
  public final static native void delete_piece_index_int_pair(long jarg1);
  public final static native long new_string_int_pair__SWIG_0();
  public final static native long new_string_int_pair__SWIG_1(String jarg1, int jarg2);
  public final static native long new_string_int_pair__SWIG_2(long jarg1, string_int_pair jarg1_);
  public final static native void string_int_pair_first_set(long jarg1, string_int_pair jarg1_, String jarg2);
  public final static native String string_int_pair_first_get(long jarg1, string_int_pair jarg1_);
  public final static native void string_int_pair_second_set(long jarg1, string_int_pair jarg1_, int jarg2);
  public final static native int string_int_pair_second_get(long jarg1, string_int_pair jarg1_);
  public final static native void delete_string_int_pair(long jarg1);
  public final static native long new_string_string_pair__SWIG_0();
  public final static native long new_string_string_pair__SWIG_1(String jarg1, String jarg2);
  public final static native long new_string_string_pair__SWIG_2(long jarg1, string_string_pair jarg1_);
  public final static native void string_string_pair_first_set(long jarg1, string_string_pair jarg1_, String jarg2);
  public final static native String string_string_pair_first_get(long jarg1, string_string_pair jarg1_);
  public final static native void string_string_pair_second_set(long jarg1, string_string_pair jarg1_, String jarg2);
  public final static native String string_string_pair_second_get(long jarg1, string_string_pair jarg1_);
  public final static native void delete_string_string_pair(long jarg1);
  public final static native long new_string_view_bdecode_node_pair__SWIG_0();
  public final static native long new_string_view_bdecode_node_pair__SWIG_1(long jarg1, string_view jarg1_, long jarg2, bdecode_node jarg2_);
  public final static native long new_string_view_bdecode_node_pair__SWIG_2(long jarg1, string_view_bdecode_node_pair jarg1_);
  public final static native void string_view_bdecode_node_pair_first_set(long jarg1, string_view_bdecode_node_pair jarg1_, long jarg2, string_view jarg2_);
  public final static native long string_view_bdecode_node_pair_first_get(long jarg1, string_view_bdecode_node_pair jarg1_);
  public final static native void string_view_bdecode_node_pair_second_set(long jarg1, string_view_bdecode_node_pair jarg1_, long jarg2, bdecode_node jarg2_);
  public final static native long string_view_bdecode_node_pair_second_get(long jarg1, string_view_bdecode_node_pair jarg1_);
  public final static native void delete_string_view_bdecode_node_pair(long jarg1);
  public final static native long new_byte_vectors_pair__SWIG_0();
  public final static native long new_byte_vectors_pair__SWIG_1(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long new_byte_vectors_pair__SWIG_2(long jarg1, byte_vectors_pair jarg1_);
  public final static native void byte_vectors_pair_first_set(long jarg1, byte_vectors_pair jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long byte_vectors_pair_first_get(long jarg1, byte_vectors_pair jarg1_);
  public final static native void byte_vectors_pair_second_set(long jarg1, byte_vectors_pair jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long byte_vectors_pair_second_get(long jarg1, byte_vectors_pair jarg1_);
  public final static native void delete_byte_vectors_pair(long jarg1);
  public final static native long new_sha1_hash_udp_endpoint_pair__SWIG_0();
  public final static native long new_sha1_hash_udp_endpoint_pair__SWIG_1(long jarg1, sha1_hash jarg1_, long jarg2, udp_endpoint jarg2_);
  public final static native long new_sha1_hash_udp_endpoint_pair__SWIG_2(long jarg1, sha1_hash_udp_endpoint_pair jarg1_);
  public final static native void sha1_hash_udp_endpoint_pair_first_set(long jarg1, sha1_hash_udp_endpoint_pair jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native long sha1_hash_udp_endpoint_pair_first_get(long jarg1, sha1_hash_udp_endpoint_pair jarg1_);
  public final static native void sha1_hash_udp_endpoint_pair_second_set(long jarg1, sha1_hash_udp_endpoint_pair jarg1_, long jarg2, udp_endpoint jarg2_);
  public final static native long sha1_hash_udp_endpoint_pair_second_get(long jarg1, sha1_hash_udp_endpoint_pair jarg1_);
  public final static native void delete_sha1_hash_udp_endpoint_pair(long jarg1);
  public final static native long new_address_sha1_hash_pair__SWIG_0();
  public final static native long new_address_sha1_hash_pair__SWIG_1(long jarg1, address jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native long new_address_sha1_hash_pair__SWIG_2(long jarg1, address_sha1_hash_pair jarg1_);
  public final static native void address_sha1_hash_pair_first_set(long jarg1, address_sha1_hash_pair jarg1_, long jarg2, address jarg2_);
  public final static native long address_sha1_hash_pair_first_get(long jarg1, address_sha1_hash_pair jarg1_);
  public final static native void address_sha1_hash_pair_second_set(long jarg1, address_sha1_hash_pair jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native long address_sha1_hash_pair_second_get(long jarg1, address_sha1_hash_pair jarg1_);
  public final static native void delete_address_sha1_hash_pair(long jarg1);
  public final static native long new_byte_vector__SWIG_0();
  public final static native long new_byte_vector__SWIG_1(long jarg1, byte_vector jarg1_);
  public final static native long byte_vector_capacity(long jarg1, byte_vector jarg1_);
  public final static native void byte_vector_reserve(long jarg1, byte_vector jarg1_, long jarg2);
  public final static native boolean byte_vector_isEmpty(long jarg1, byte_vector jarg1_);
  public final static native void byte_vector_clear(long jarg1, byte_vector jarg1_);
  public final static native long new_byte_vector__SWIG_2(int jarg1, byte jarg2);
  public final static native int byte_vector_doSize(long jarg1, byte_vector jarg1_);
  public final static native void byte_vector_doAdd__SWIG_0(long jarg1, byte_vector jarg1_, byte jarg2);
  public final static native void byte_vector_doAdd__SWIG_1(long jarg1, byte_vector jarg1_, int jarg2, byte jarg3);
  public final static native byte byte_vector_doRemove(long jarg1, byte_vector jarg1_, int jarg2);
  public final static native byte byte_vector_doGet(long jarg1, byte_vector jarg1_, int jarg2);
  public final static native byte byte_vector_doSet(long jarg1, byte_vector jarg1_, int jarg2, byte jarg3);
  public final static native void byte_vector_doRemoveRange(long jarg1, byte_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_byte_vector(long jarg1);
  public final static native long new_string_vector__SWIG_0();
  public final static native long new_string_vector__SWIG_1(long jarg1, string_vector jarg1_);
  public final static native long string_vector_capacity(long jarg1, string_vector jarg1_);
  public final static native void string_vector_reserve(long jarg1, string_vector jarg1_, long jarg2);
  public final static native boolean string_vector_isEmpty(long jarg1, string_vector jarg1_);
  public final static native void string_vector_clear(long jarg1, string_vector jarg1_);
  public final static native long new_string_vector__SWIG_2(int jarg1, String jarg2);
  public final static native int string_vector_doSize(long jarg1, string_vector jarg1_);
  public final static native void string_vector_doAdd__SWIG_0(long jarg1, string_vector jarg1_, String jarg2);
  public final static native void string_vector_doAdd__SWIG_1(long jarg1, string_vector jarg1_, int jarg2, String jarg3);
  public final static native String string_vector_doRemove(long jarg1, string_vector jarg1_, int jarg2);
  public final static native String string_vector_doGet(long jarg1, string_vector jarg1_, int jarg2);
  public final static native String string_vector_doSet(long jarg1, string_vector jarg1_, int jarg2, String jarg3);
  public final static native void string_vector_doRemoveRange(long jarg1, string_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_string_vector(long jarg1);
  public final static native long new_string_int_pair_vector__SWIG_0();
  public final static native long new_string_int_pair_vector__SWIG_1(long jarg1, string_int_pair_vector jarg1_);
  public final static native long string_int_pair_vector_capacity(long jarg1, string_int_pair_vector jarg1_);
  public final static native void string_int_pair_vector_reserve(long jarg1, string_int_pair_vector jarg1_, long jarg2);
  public final static native boolean string_int_pair_vector_isEmpty(long jarg1, string_int_pair_vector jarg1_);
  public final static native void string_int_pair_vector_clear(long jarg1, string_int_pair_vector jarg1_);
  public final static native long new_string_int_pair_vector__SWIG_2(int jarg1, long jarg2, string_int_pair jarg2_);
  public final static native int string_int_pair_vector_doSize(long jarg1, string_int_pair_vector jarg1_);
  public final static native void string_int_pair_vector_doAdd__SWIG_0(long jarg1, string_int_pair_vector jarg1_, long jarg2, string_int_pair jarg2_);
  public final static native void string_int_pair_vector_doAdd__SWIG_1(long jarg1, string_int_pair_vector jarg1_, int jarg2, long jarg3, string_int_pair jarg3_);
  public final static native long string_int_pair_vector_doRemove(long jarg1, string_int_pair_vector jarg1_, int jarg2);
  public final static native long string_int_pair_vector_doGet(long jarg1, string_int_pair_vector jarg1_, int jarg2);
  public final static native long string_int_pair_vector_doSet(long jarg1, string_int_pair_vector jarg1_, int jarg2, long jarg3, string_int_pair jarg3_);
  public final static native void string_int_pair_vector_doRemoveRange(long jarg1, string_int_pair_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_string_int_pair_vector(long jarg1);
  public final static native long new_string_string_pair_vector__SWIG_0();
  public final static native long new_string_string_pair_vector__SWIG_1(long jarg1, string_string_pair_vector jarg1_);
  public final static native long string_string_pair_vector_capacity(long jarg1, string_string_pair_vector jarg1_);
  public final static native void string_string_pair_vector_reserve(long jarg1, string_string_pair_vector jarg1_, long jarg2);
  public final static native boolean string_string_pair_vector_isEmpty(long jarg1, string_string_pair_vector jarg1_);
  public final static native void string_string_pair_vector_clear(long jarg1, string_string_pair_vector jarg1_);
  public final static native long new_string_string_pair_vector__SWIG_2(int jarg1, long jarg2, string_string_pair jarg2_);
  public final static native int string_string_pair_vector_doSize(long jarg1, string_string_pair_vector jarg1_);
  public final static native void string_string_pair_vector_doAdd__SWIG_0(long jarg1, string_string_pair_vector jarg1_, long jarg2, string_string_pair jarg2_);
  public final static native void string_string_pair_vector_doAdd__SWIG_1(long jarg1, string_string_pair_vector jarg1_, int jarg2, long jarg3, string_string_pair jarg3_);
  public final static native long string_string_pair_vector_doRemove(long jarg1, string_string_pair_vector jarg1_, int jarg2);
  public final static native long string_string_pair_vector_doGet(long jarg1, string_string_pair_vector jarg1_, int jarg2);
  public final static native long string_string_pair_vector_doSet(long jarg1, string_string_pair_vector jarg1_, int jarg2, long jarg3, string_string_pair jarg3_);
  public final static native void string_string_pair_vector_doRemoveRange(long jarg1, string_string_pair_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_string_string_pair_vector(long jarg1);
  public final static native long new_piece_index_int_pair_vector__SWIG_0();
  public final static native long new_piece_index_int_pair_vector__SWIG_1(long jarg1, piece_index_int_pair_vector jarg1_);
  public final static native long piece_index_int_pair_vector_capacity(long jarg1, piece_index_int_pair_vector jarg1_);
  public final static native void piece_index_int_pair_vector_reserve(long jarg1, piece_index_int_pair_vector jarg1_, long jarg2);
  public final static native boolean piece_index_int_pair_vector_isEmpty(long jarg1, piece_index_int_pair_vector jarg1_);
  public final static native void piece_index_int_pair_vector_clear(long jarg1, piece_index_int_pair_vector jarg1_);
  public final static native long new_piece_index_int_pair_vector__SWIG_2(int jarg1, long jarg2, piece_index_int_pair jarg2_);
  public final static native int piece_index_int_pair_vector_doSize(long jarg1, piece_index_int_pair_vector jarg1_);
  public final static native void piece_index_int_pair_vector_doAdd__SWIG_0(long jarg1, piece_index_int_pair_vector jarg1_, long jarg2, piece_index_int_pair jarg2_);
  public final static native void piece_index_int_pair_vector_doAdd__SWIG_1(long jarg1, piece_index_int_pair_vector jarg1_, int jarg2, long jarg3, piece_index_int_pair jarg3_);
  public final static native long piece_index_int_pair_vector_doRemove(long jarg1, piece_index_int_pair_vector jarg1_, int jarg2);
  public final static native long piece_index_int_pair_vector_doGet(long jarg1, piece_index_int_pair_vector jarg1_, int jarg2);
  public final static native long piece_index_int_pair_vector_doSet(long jarg1, piece_index_int_pair_vector jarg1_, int jarg2, long jarg3, piece_index_int_pair jarg3_);
  public final static native void piece_index_int_pair_vector_doRemoveRange(long jarg1, piece_index_int_pair_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_piece_index_int_pair_vector(long jarg1);
  public final static native long new_int_vector__SWIG_0();
  public final static native long new_int_vector__SWIG_1(long jarg1, int_vector jarg1_);
  public final static native long int_vector_capacity(long jarg1, int_vector jarg1_);
  public final static native void int_vector_reserve(long jarg1, int_vector jarg1_, long jarg2);
  public final static native boolean int_vector_isEmpty(long jarg1, int_vector jarg1_);
  public final static native void int_vector_clear(long jarg1, int_vector jarg1_);
  public final static native long new_int_vector__SWIG_2(int jarg1, int jarg2);
  public final static native int int_vector_doSize(long jarg1, int_vector jarg1_);
  public final static native void int_vector_doAdd__SWIG_0(long jarg1, int_vector jarg1_, int jarg2);
  public final static native void int_vector_doAdd__SWIG_1(long jarg1, int_vector jarg1_, int jarg2, int jarg3);
  public final static native int int_vector_doRemove(long jarg1, int_vector jarg1_, int jarg2);
  public final static native int int_vector_doGet(long jarg1, int_vector jarg1_, int jarg2);
  public final static native int int_vector_doSet(long jarg1, int_vector jarg1_, int jarg2, int jarg3);
  public final static native void int_vector_doRemoveRange(long jarg1, int_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_int_vector(long jarg1);
  public final static native long new_int64_vector__SWIG_0();
  public final static native long new_int64_vector__SWIG_1(long jarg1, int64_vector jarg1_);
  public final static native long int64_vector_capacity(long jarg1, int64_vector jarg1_);
  public final static native void int64_vector_reserve(long jarg1, int64_vector jarg1_, long jarg2);
  public final static native boolean int64_vector_isEmpty(long jarg1, int64_vector jarg1_);
  public final static native void int64_vector_clear(long jarg1, int64_vector jarg1_);
  public final static native long new_int64_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int int64_vector_doSize(long jarg1, int64_vector jarg1_);
  public final static native void int64_vector_doAdd__SWIG_0(long jarg1, int64_vector jarg1_, long jarg2);
  public final static native void int64_vector_doAdd__SWIG_1(long jarg1, int64_vector jarg1_, int jarg2, long jarg3);
  public final static native long int64_vector_doRemove(long jarg1, int64_vector jarg1_, int jarg2);
  public final static native long int64_vector_doGet(long jarg1, int64_vector jarg1_, int jarg2);
  public final static native long int64_vector_doSet(long jarg1, int64_vector jarg1_, int jarg2, long jarg3);
  public final static native void int64_vector_doRemoveRange(long jarg1, int64_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_int64_vector(long jarg1);
  public final static native long new_sha1_hash_vector__SWIG_0();
  public final static native long new_sha1_hash_vector__SWIG_1(long jarg1, sha1_hash_vector jarg1_);
  public final static native long sha1_hash_vector_capacity(long jarg1, sha1_hash_vector jarg1_);
  public final static native void sha1_hash_vector_reserve(long jarg1, sha1_hash_vector jarg1_, long jarg2);
  public final static native boolean sha1_hash_vector_isEmpty(long jarg1, sha1_hash_vector jarg1_);
  public final static native void sha1_hash_vector_clear(long jarg1, sha1_hash_vector jarg1_);
  public final static native long new_sha1_hash_vector__SWIG_2(int jarg1, long jarg2, sha1_hash jarg2_);
  public final static native int sha1_hash_vector_doSize(long jarg1, sha1_hash_vector jarg1_);
  public final static native void sha1_hash_vector_doAdd__SWIG_0(long jarg1, sha1_hash_vector jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void sha1_hash_vector_doAdd__SWIG_1(long jarg1, sha1_hash_vector jarg1_, int jarg2, long jarg3, sha1_hash jarg3_);
  public final static native long sha1_hash_vector_doRemove(long jarg1, sha1_hash_vector jarg1_, int jarg2);
  public final static native long sha1_hash_vector_doGet(long jarg1, sha1_hash_vector jarg1_, int jarg2);
  public final static native long sha1_hash_vector_doSet(long jarg1, sha1_hash_vector jarg1_, int jarg2, long jarg3, sha1_hash jarg3_);
  public final static native void sha1_hash_vector_doRemoveRange(long jarg1, sha1_hash_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_sha1_hash_vector(long jarg1);
  public final static native long new_torrent_status_vector__SWIG_0();
  public final static native long new_torrent_status_vector__SWIG_1(long jarg1, torrent_status_vector jarg1_);
  public final static native long torrent_status_vector_capacity(long jarg1, torrent_status_vector jarg1_);
  public final static native void torrent_status_vector_reserve(long jarg1, torrent_status_vector jarg1_, long jarg2);
  public final static native boolean torrent_status_vector_isEmpty(long jarg1, torrent_status_vector jarg1_);
  public final static native void torrent_status_vector_clear(long jarg1, torrent_status_vector jarg1_);
  public final static native long new_torrent_status_vector__SWIG_2(int jarg1, long jarg2, torrent_status jarg2_);
  public final static native int torrent_status_vector_doSize(long jarg1, torrent_status_vector jarg1_);
  public final static native void torrent_status_vector_doAdd__SWIG_0(long jarg1, torrent_status_vector jarg1_, long jarg2, torrent_status jarg2_);
  public final static native void torrent_status_vector_doAdd__SWIG_1(long jarg1, torrent_status_vector jarg1_, int jarg2, long jarg3, torrent_status jarg3_);
  public final static native long torrent_status_vector_doRemove(long jarg1, torrent_status_vector jarg1_, int jarg2);
  public final static native long torrent_status_vector_doGet(long jarg1, torrent_status_vector jarg1_, int jarg2);
  public final static native long torrent_status_vector_doSet(long jarg1, torrent_status_vector jarg1_, int jarg2, long jarg3, torrent_status jarg3_);
  public final static native void torrent_status_vector_doRemoveRange(long jarg1, torrent_status_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_torrent_status_vector(long jarg1);
  public final static native long new_torrent_handle_vector__SWIG_0();
  public final static native long new_torrent_handle_vector__SWIG_1(long jarg1, torrent_handle_vector jarg1_);
  public final static native long torrent_handle_vector_capacity(long jarg1, torrent_handle_vector jarg1_);
  public final static native void torrent_handle_vector_reserve(long jarg1, torrent_handle_vector jarg1_, long jarg2);
  public final static native boolean torrent_handle_vector_isEmpty(long jarg1, torrent_handle_vector jarg1_);
  public final static native void torrent_handle_vector_clear(long jarg1, torrent_handle_vector jarg1_);
  public final static native long new_torrent_handle_vector__SWIG_2(int jarg1, long jarg2, torrent_handle jarg2_);
  public final static native int torrent_handle_vector_doSize(long jarg1, torrent_handle_vector jarg1_);
  public final static native void torrent_handle_vector_doAdd__SWIG_0(long jarg1, torrent_handle_vector jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native void torrent_handle_vector_doAdd__SWIG_1(long jarg1, torrent_handle_vector jarg1_, int jarg2, long jarg3, torrent_handle jarg3_);
  public final static native long torrent_handle_vector_doRemove(long jarg1, torrent_handle_vector jarg1_, int jarg2);
  public final static native long torrent_handle_vector_doGet(long jarg1, torrent_handle_vector jarg1_, int jarg2);
  public final static native long torrent_handle_vector_doSet(long jarg1, torrent_handle_vector jarg1_, int jarg2, long jarg3, torrent_handle jarg3_);
  public final static native void torrent_handle_vector_doRemoveRange(long jarg1, torrent_handle_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_torrent_handle_vector(long jarg1);
  public final static native long new_file_slice_vector__SWIG_0();
  public final static native long new_file_slice_vector__SWIG_1(long jarg1, file_slice_vector jarg1_);
  public final static native long file_slice_vector_capacity(long jarg1, file_slice_vector jarg1_);
  public final static native void file_slice_vector_reserve(long jarg1, file_slice_vector jarg1_, long jarg2);
  public final static native boolean file_slice_vector_isEmpty(long jarg1, file_slice_vector jarg1_);
  public final static native void file_slice_vector_clear(long jarg1, file_slice_vector jarg1_);
  public final static native long new_file_slice_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int file_slice_vector_doSize(long jarg1, file_slice_vector jarg1_);
  public final static native void file_slice_vector_doAdd__SWIG_0(long jarg1, file_slice_vector jarg1_, long jarg2);
  public final static native void file_slice_vector_doAdd__SWIG_1(long jarg1, file_slice_vector jarg1_, int jarg2, long jarg3);
  public final static native long file_slice_vector_doRemove(long jarg1, file_slice_vector jarg1_, int jarg2);
  public final static native long file_slice_vector_doGet(long jarg1, file_slice_vector jarg1_, int jarg2);
  public final static native long file_slice_vector_doSet(long jarg1, file_slice_vector jarg1_, int jarg2, long jarg3);
  public final static native void file_slice_vector_doRemoveRange(long jarg1, file_slice_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_file_slice_vector(long jarg1);
  public final static native long new_dht_routing_bucket_vector__SWIG_0();
  public final static native long new_dht_routing_bucket_vector__SWIG_1(long jarg1, dht_routing_bucket_vector jarg1_);
  public final static native long dht_routing_bucket_vector_capacity(long jarg1, dht_routing_bucket_vector jarg1_);
  public final static native void dht_routing_bucket_vector_reserve(long jarg1, dht_routing_bucket_vector jarg1_, long jarg2);
  public final static native boolean dht_routing_bucket_vector_isEmpty(long jarg1, dht_routing_bucket_vector jarg1_);
  public final static native void dht_routing_bucket_vector_clear(long jarg1, dht_routing_bucket_vector jarg1_);
  public final static native long new_dht_routing_bucket_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int dht_routing_bucket_vector_doSize(long jarg1, dht_routing_bucket_vector jarg1_);
  public final static native void dht_routing_bucket_vector_doAdd__SWIG_0(long jarg1, dht_routing_bucket_vector jarg1_, long jarg2);
  public final static native void dht_routing_bucket_vector_doAdd__SWIG_1(long jarg1, dht_routing_bucket_vector jarg1_, int jarg2, long jarg3);
  public final static native long dht_routing_bucket_vector_doRemove(long jarg1, dht_routing_bucket_vector jarg1_, int jarg2);
  public final static native long dht_routing_bucket_vector_doGet(long jarg1, dht_routing_bucket_vector jarg1_, int jarg2);
  public final static native long dht_routing_bucket_vector_doSet(long jarg1, dht_routing_bucket_vector jarg1_, int jarg2, long jarg3);
  public final static native void dht_routing_bucket_vector_doRemoveRange(long jarg1, dht_routing_bucket_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_dht_routing_bucket_vector(long jarg1);
  public final static native long new_dht_lookup_vector__SWIG_0();
  public final static native long new_dht_lookup_vector__SWIG_1(long jarg1, dht_lookup_vector jarg1_);
  public final static native long dht_lookup_vector_capacity(long jarg1, dht_lookup_vector jarg1_);
  public final static native void dht_lookup_vector_reserve(long jarg1, dht_lookup_vector jarg1_, long jarg2);
  public final static native boolean dht_lookup_vector_isEmpty(long jarg1, dht_lookup_vector jarg1_);
  public final static native void dht_lookup_vector_clear(long jarg1, dht_lookup_vector jarg1_);
  public final static native long new_dht_lookup_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int dht_lookup_vector_doSize(long jarg1, dht_lookup_vector jarg1_);
  public final static native void dht_lookup_vector_doAdd__SWIG_0(long jarg1, dht_lookup_vector jarg1_, long jarg2);
  public final static native void dht_lookup_vector_doAdd__SWIG_1(long jarg1, dht_lookup_vector jarg1_, int jarg2, long jarg3);
  public final static native long dht_lookup_vector_doRemove(long jarg1, dht_lookup_vector jarg1_, int jarg2);
  public final static native long dht_lookup_vector_doGet(long jarg1, dht_lookup_vector jarg1_, int jarg2);
  public final static native long dht_lookup_vector_doSet(long jarg1, dht_lookup_vector jarg1_, int jarg2, long jarg3);
  public final static native void dht_lookup_vector_doRemoveRange(long jarg1, dht_lookup_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_dht_lookup_vector(long jarg1);
  public final static native long new_block_info_vector__SWIG_0();
  public final static native long new_block_info_vector__SWIG_1(long jarg1, block_info_vector jarg1_);
  public final static native long block_info_vector_capacity(long jarg1, block_info_vector jarg1_);
  public final static native void block_info_vector_reserve(long jarg1, block_info_vector jarg1_, long jarg2);
  public final static native boolean block_info_vector_isEmpty(long jarg1, block_info_vector jarg1_);
  public final static native void block_info_vector_clear(long jarg1, block_info_vector jarg1_);
  public final static native long new_block_info_vector__SWIG_2(int jarg1, long jarg2, block_info jarg2_);
  public final static native int block_info_vector_doSize(long jarg1, block_info_vector jarg1_);
  public final static native void block_info_vector_doAdd__SWIG_0(long jarg1, block_info_vector jarg1_, long jarg2, block_info jarg2_);
  public final static native void block_info_vector_doAdd__SWIG_1(long jarg1, block_info_vector jarg1_, int jarg2, long jarg3, block_info jarg3_);
  public final static native long block_info_vector_doRemove(long jarg1, block_info_vector jarg1_, int jarg2);
  public final static native long block_info_vector_doGet(long jarg1, block_info_vector jarg1_, int jarg2);
  public final static native long block_info_vector_doSet(long jarg1, block_info_vector jarg1_, int jarg2, long jarg3, block_info jarg3_);
  public final static native void block_info_vector_doRemoveRange(long jarg1, block_info_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_block_info_vector(long jarg1);
  public final static native long new_partial_piece_info_vector__SWIG_0();
  public final static native long new_partial_piece_info_vector__SWIG_1(long jarg1, partial_piece_info_vector jarg1_);
  public final static native long partial_piece_info_vector_capacity(long jarg1, partial_piece_info_vector jarg1_);
  public final static native void partial_piece_info_vector_reserve(long jarg1, partial_piece_info_vector jarg1_, long jarg2);
  public final static native boolean partial_piece_info_vector_isEmpty(long jarg1, partial_piece_info_vector jarg1_);
  public final static native void partial_piece_info_vector_clear(long jarg1, partial_piece_info_vector jarg1_);
  public final static native long new_partial_piece_info_vector__SWIG_2(int jarg1, long jarg2, partial_piece_info jarg2_);
  public final static native int partial_piece_info_vector_doSize(long jarg1, partial_piece_info_vector jarg1_);
  public final static native void partial_piece_info_vector_doAdd__SWIG_0(long jarg1, partial_piece_info_vector jarg1_, long jarg2, partial_piece_info jarg2_);
  public final static native void partial_piece_info_vector_doAdd__SWIG_1(long jarg1, partial_piece_info_vector jarg1_, int jarg2, long jarg3, partial_piece_info jarg3_);
  public final static native long partial_piece_info_vector_doRemove(long jarg1, partial_piece_info_vector jarg1_, int jarg2);
  public final static native long partial_piece_info_vector_doGet(long jarg1, partial_piece_info_vector jarg1_, int jarg2);
  public final static native long partial_piece_info_vector_doSet(long jarg1, partial_piece_info_vector jarg1_, int jarg2, long jarg3, partial_piece_info jarg3_);
  public final static native void partial_piece_info_vector_doRemoveRange(long jarg1, partial_piece_info_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_partial_piece_info_vector(long jarg1);
  public final static native long new_peer_info_vector__SWIG_0();
  public final static native long new_peer_info_vector__SWIG_1(long jarg1, peer_info_vector jarg1_);
  public final static native long peer_info_vector_capacity(long jarg1, peer_info_vector jarg1_);
  public final static native void peer_info_vector_reserve(long jarg1, peer_info_vector jarg1_, long jarg2);
  public final static native boolean peer_info_vector_isEmpty(long jarg1, peer_info_vector jarg1_);
  public final static native void peer_info_vector_clear(long jarg1, peer_info_vector jarg1_);
  public final static native long new_peer_info_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int peer_info_vector_doSize(long jarg1, peer_info_vector jarg1_);
  public final static native void peer_info_vector_doAdd__SWIG_0(long jarg1, peer_info_vector jarg1_, long jarg2);
  public final static native void peer_info_vector_doAdd__SWIG_1(long jarg1, peer_info_vector jarg1_, int jarg2, long jarg3);
  public final static native long peer_info_vector_doRemove(long jarg1, peer_info_vector jarg1_, int jarg2);
  public final static native long peer_info_vector_doGet(long jarg1, peer_info_vector jarg1_, int jarg2);
  public final static native long peer_info_vector_doSet(long jarg1, peer_info_vector jarg1_, int jarg2, long jarg3);
  public final static native void peer_info_vector_doRemoveRange(long jarg1, peer_info_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_peer_info_vector(long jarg1);
  public final static native long new_stats_metric_vector__SWIG_0();
  public final static native long new_stats_metric_vector__SWIG_1(long jarg1, stats_metric_vector jarg1_);
  public final static native long stats_metric_vector_capacity(long jarg1, stats_metric_vector jarg1_);
  public final static native void stats_metric_vector_reserve(long jarg1, stats_metric_vector jarg1_, long jarg2);
  public final static native boolean stats_metric_vector_isEmpty(long jarg1, stats_metric_vector jarg1_);
  public final static native void stats_metric_vector_clear(long jarg1, stats_metric_vector jarg1_);
  public final static native long new_stats_metric_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int stats_metric_vector_doSize(long jarg1, stats_metric_vector jarg1_);
  public final static native void stats_metric_vector_doAdd__SWIG_0(long jarg1, stats_metric_vector jarg1_, long jarg2);
  public final static native void stats_metric_vector_doAdd__SWIG_1(long jarg1, stats_metric_vector jarg1_, int jarg2, long jarg3);
  public final static native long stats_metric_vector_doRemove(long jarg1, stats_metric_vector jarg1_, int jarg2);
  public final static native long stats_metric_vector_doGet(long jarg1, stats_metric_vector jarg1_, int jarg2);
  public final static native long stats_metric_vector_doSet(long jarg1, stats_metric_vector jarg1_, int jarg2, long jarg3);
  public final static native void stats_metric_vector_doRemoveRange(long jarg1, stats_metric_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_stats_metric_vector(long jarg1);
  public final static native long new_entry_vector__SWIG_0();
  public final static native long new_entry_vector__SWIG_1(long jarg1, entry_vector jarg1_);
  public final static native long entry_vector_capacity(long jarg1, entry_vector jarg1_);
  public final static native void entry_vector_reserve(long jarg1, entry_vector jarg1_, long jarg2);
  public final static native boolean entry_vector_isEmpty(long jarg1, entry_vector jarg1_);
  public final static native void entry_vector_clear(long jarg1, entry_vector jarg1_);
  public final static native long new_entry_vector__SWIG_2(int jarg1, long jarg2, entry jarg2_);
  public final static native int entry_vector_doSize(long jarg1, entry_vector jarg1_);
  public final static native void entry_vector_doAdd__SWIG_0(long jarg1, entry_vector jarg1_, long jarg2, entry jarg2_);
  public final static native void entry_vector_doAdd__SWIG_1(long jarg1, entry_vector jarg1_, int jarg2, long jarg3, entry jarg3_);
  public final static native long entry_vector_doRemove(long jarg1, entry_vector jarg1_, int jarg2);
  public final static native long entry_vector_doGet(long jarg1, entry_vector jarg1_, int jarg2);
  public final static native long entry_vector_doSet(long jarg1, entry_vector jarg1_, int jarg2, long jarg3, entry jarg3_);
  public final static native void entry_vector_doRemoveRange(long jarg1, entry_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_entry_vector(long jarg1);
  public final static native long new_web_seed_entry_vector__SWIG_0();
  public final static native long new_web_seed_entry_vector__SWIG_1(long jarg1, web_seed_entry_vector jarg1_);
  public final static native long web_seed_entry_vector_capacity(long jarg1, web_seed_entry_vector jarg1_);
  public final static native void web_seed_entry_vector_reserve(long jarg1, web_seed_entry_vector jarg1_, long jarg2);
  public final static native boolean web_seed_entry_vector_isEmpty(long jarg1, web_seed_entry_vector jarg1_);
  public final static native void web_seed_entry_vector_clear(long jarg1, web_seed_entry_vector jarg1_);
  public final static native long new_web_seed_entry_vector__SWIG_2(int jarg1, long jarg2, web_seed_entry jarg2_);
  public final static native int web_seed_entry_vector_doSize(long jarg1, web_seed_entry_vector jarg1_);
  public final static native void web_seed_entry_vector_doAdd__SWIG_0(long jarg1, web_seed_entry_vector jarg1_, long jarg2, web_seed_entry jarg2_);
  public final static native void web_seed_entry_vector_doAdd__SWIG_1(long jarg1, web_seed_entry_vector jarg1_, int jarg2, long jarg3, web_seed_entry jarg3_);
  public final static native long web_seed_entry_vector_doRemove(long jarg1, web_seed_entry_vector jarg1_, int jarg2);
  public final static native long web_seed_entry_vector_doGet(long jarg1, web_seed_entry_vector jarg1_, int jarg2);
  public final static native long web_seed_entry_vector_doSet(long jarg1, web_seed_entry_vector jarg1_, int jarg2, long jarg3, web_seed_entry jarg3_);
  public final static native void web_seed_entry_vector_doRemoveRange(long jarg1, web_seed_entry_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_web_seed_entry_vector(long jarg1);
  public final static native long new_announce_endpoint_vector__SWIG_0();
  public final static native long new_announce_endpoint_vector__SWIG_1(long jarg1, announce_endpoint_vector jarg1_);
  public final static native long announce_endpoint_vector_capacity(long jarg1, announce_endpoint_vector jarg1_);
  public final static native void announce_endpoint_vector_reserve(long jarg1, announce_endpoint_vector jarg1_, long jarg2);
  public final static native boolean announce_endpoint_vector_isEmpty(long jarg1, announce_endpoint_vector jarg1_);
  public final static native void announce_endpoint_vector_clear(long jarg1, announce_endpoint_vector jarg1_);
  public final static native long new_announce_endpoint_vector__SWIG_2(int jarg1, long jarg2, announce_endpoint jarg2_);
  public final static native int announce_endpoint_vector_doSize(long jarg1, announce_endpoint_vector jarg1_);
  public final static native void announce_endpoint_vector_doAdd__SWIG_0(long jarg1, announce_endpoint_vector jarg1_, long jarg2, announce_endpoint jarg2_);
  public final static native void announce_endpoint_vector_doAdd__SWIG_1(long jarg1, announce_endpoint_vector jarg1_, int jarg2, long jarg3, announce_endpoint jarg3_);
  public final static native long announce_endpoint_vector_doRemove(long jarg1, announce_endpoint_vector jarg1_, int jarg2);
  public final static native long announce_endpoint_vector_doGet(long jarg1, announce_endpoint_vector jarg1_, int jarg2);
  public final static native long announce_endpoint_vector_doSet(long jarg1, announce_endpoint_vector jarg1_, int jarg2, long jarg3, announce_endpoint jarg3_);
  public final static native void announce_endpoint_vector_doRemoveRange(long jarg1, announce_endpoint_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_announce_endpoint_vector(long jarg1);
  public final static native long new_announce_entry_vector__SWIG_0();
  public final static native long new_announce_entry_vector__SWIG_1(long jarg1, announce_entry_vector jarg1_);
  public final static native long announce_entry_vector_capacity(long jarg1, announce_entry_vector jarg1_);
  public final static native void announce_entry_vector_reserve(long jarg1, announce_entry_vector jarg1_, long jarg2);
  public final static native boolean announce_entry_vector_isEmpty(long jarg1, announce_entry_vector jarg1_);
  public final static native void announce_entry_vector_clear(long jarg1, announce_entry_vector jarg1_);
  public final static native long new_announce_entry_vector__SWIG_2(int jarg1, long jarg2, announce_entry jarg2_);
  public final static native int announce_entry_vector_doSize(long jarg1, announce_entry_vector jarg1_);
  public final static native void announce_entry_vector_doAdd__SWIG_0(long jarg1, announce_entry_vector jarg1_, long jarg2, announce_entry jarg2_);
  public final static native void announce_entry_vector_doAdd__SWIG_1(long jarg1, announce_entry_vector jarg1_, int jarg2, long jarg3, announce_entry jarg3_);
  public final static native long announce_entry_vector_doRemove(long jarg1, announce_entry_vector jarg1_, int jarg2);
  public final static native long announce_entry_vector_doGet(long jarg1, announce_entry_vector jarg1_, int jarg2);
  public final static native long announce_entry_vector_doSet(long jarg1, announce_entry_vector jarg1_, int jarg2, long jarg3, announce_entry jarg3_);
  public final static native void announce_entry_vector_doRemoveRange(long jarg1, announce_entry_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_announce_entry_vector(long jarg1);
  public final static native long new_tcp_endpoint_vector__SWIG_0();
  public final static native long new_tcp_endpoint_vector__SWIG_1(long jarg1, tcp_endpoint_vector jarg1_);
  public final static native long tcp_endpoint_vector_capacity(long jarg1, tcp_endpoint_vector jarg1_);
  public final static native void tcp_endpoint_vector_reserve(long jarg1, tcp_endpoint_vector jarg1_, long jarg2);
  public final static native boolean tcp_endpoint_vector_isEmpty(long jarg1, tcp_endpoint_vector jarg1_);
  public final static native void tcp_endpoint_vector_clear(long jarg1, tcp_endpoint_vector jarg1_);
  public final static native long new_tcp_endpoint_vector__SWIG_2(int jarg1, long jarg2, tcp_endpoint jarg2_);
  public final static native int tcp_endpoint_vector_doSize(long jarg1, tcp_endpoint_vector jarg1_);
  public final static native void tcp_endpoint_vector_doAdd__SWIG_0(long jarg1, tcp_endpoint_vector jarg1_, long jarg2, tcp_endpoint jarg2_);
  public final static native void tcp_endpoint_vector_doAdd__SWIG_1(long jarg1, tcp_endpoint_vector jarg1_, int jarg2, long jarg3, tcp_endpoint jarg3_);
  public final static native long tcp_endpoint_vector_doRemove(long jarg1, tcp_endpoint_vector jarg1_, int jarg2);
  public final static native long tcp_endpoint_vector_doGet(long jarg1, tcp_endpoint_vector jarg1_, int jarg2);
  public final static native long tcp_endpoint_vector_doSet(long jarg1, tcp_endpoint_vector jarg1_, int jarg2, long jarg3, tcp_endpoint jarg3_);
  public final static native void tcp_endpoint_vector_doRemoveRange(long jarg1, tcp_endpoint_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_tcp_endpoint_vector(long jarg1);
  public final static native long new_udp_endpoint_vector__SWIG_0();
  public final static native long new_udp_endpoint_vector__SWIG_1(long jarg1, udp_endpoint_vector jarg1_);
  public final static native long udp_endpoint_vector_capacity(long jarg1, udp_endpoint_vector jarg1_);
  public final static native void udp_endpoint_vector_reserve(long jarg1, udp_endpoint_vector jarg1_, long jarg2);
  public final static native boolean udp_endpoint_vector_isEmpty(long jarg1, udp_endpoint_vector jarg1_);
  public final static native void udp_endpoint_vector_clear(long jarg1, udp_endpoint_vector jarg1_);
  public final static native long new_udp_endpoint_vector__SWIG_2(int jarg1, long jarg2, udp_endpoint jarg2_);
  public final static native int udp_endpoint_vector_doSize(long jarg1, udp_endpoint_vector jarg1_);
  public final static native void udp_endpoint_vector_doAdd__SWIG_0(long jarg1, udp_endpoint_vector jarg1_, long jarg2, udp_endpoint jarg2_);
  public final static native void udp_endpoint_vector_doAdd__SWIG_1(long jarg1, udp_endpoint_vector jarg1_, int jarg2, long jarg3, udp_endpoint jarg3_);
  public final static native long udp_endpoint_vector_doRemove(long jarg1, udp_endpoint_vector jarg1_, int jarg2);
  public final static native long udp_endpoint_vector_doGet(long jarg1, udp_endpoint_vector jarg1_, int jarg2);
  public final static native long udp_endpoint_vector_doSet(long jarg1, udp_endpoint_vector jarg1_, int jarg2, long jarg3, udp_endpoint jarg3_);
  public final static native void udp_endpoint_vector_doRemoveRange(long jarg1, udp_endpoint_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_udp_endpoint_vector(long jarg1);
  public final static native long new_piece_index_vector__SWIG_0();
  public final static native long new_piece_index_vector__SWIG_1(long jarg1, piece_index_vector jarg1_);
  public final static native long piece_index_vector_capacity(long jarg1, piece_index_vector jarg1_);
  public final static native void piece_index_vector_reserve(long jarg1, piece_index_vector jarg1_, long jarg2);
  public final static native boolean piece_index_vector_isEmpty(long jarg1, piece_index_vector jarg1_);
  public final static native void piece_index_vector_clear(long jarg1, piece_index_vector jarg1_);
  public final static native long new_piece_index_vector__SWIG_2(int jarg1, int jarg2);
  public final static native int piece_index_vector_doSize(long jarg1, piece_index_vector jarg1_);
  public final static native void piece_index_vector_doAdd__SWIG_0(long jarg1, piece_index_vector jarg1_, int jarg2);
  public final static native void piece_index_vector_doAdd__SWIG_1(long jarg1, piece_index_vector jarg1_, int jarg2, int jarg3);
  public final static native int piece_index_vector_doRemove(long jarg1, piece_index_vector jarg1_, int jarg2);
  public final static native int piece_index_vector_doGet(long jarg1, piece_index_vector jarg1_, int jarg2);
  public final static native int piece_index_vector_doSet(long jarg1, piece_index_vector jarg1_, int jarg2, int jarg3);
  public final static native void piece_index_vector_doRemoveRange(long jarg1, piece_index_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_piece_index_vector(long jarg1);
  public final static native long new_file_index_vector__SWIG_0();
  public final static native long new_file_index_vector__SWIG_1(long jarg1, file_index_vector jarg1_);
  public final static native long file_index_vector_capacity(long jarg1, file_index_vector jarg1_);
  public final static native void file_index_vector_reserve(long jarg1, file_index_vector jarg1_, long jarg2);
  public final static native boolean file_index_vector_isEmpty(long jarg1, file_index_vector jarg1_);
  public final static native void file_index_vector_clear(long jarg1, file_index_vector jarg1_);
  public final static native long new_file_index_vector__SWIG_2(int jarg1, int jarg2);
  public final static native int file_index_vector_doSize(long jarg1, file_index_vector jarg1_);
  public final static native void file_index_vector_doAdd__SWIG_0(long jarg1, file_index_vector jarg1_, int jarg2);
  public final static native void file_index_vector_doAdd__SWIG_1(long jarg1, file_index_vector jarg1_, int jarg2, int jarg3);
  public final static native int file_index_vector_doRemove(long jarg1, file_index_vector jarg1_, int jarg2);
  public final static native int file_index_vector_doGet(long jarg1, file_index_vector jarg1_, int jarg2);
  public final static native int file_index_vector_doSet(long jarg1, file_index_vector jarg1_, int jarg2, int jarg3);
  public final static native void file_index_vector_doRemoveRange(long jarg1, file_index_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_file_index_vector(long jarg1);
  public final static native long new_sha1_hash_udp_endpoint_pair_vector__SWIG_0();
  public final static native long new_sha1_hash_udp_endpoint_pair_vector__SWIG_1(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_);
  public final static native long sha1_hash_udp_endpoint_pair_vector_capacity(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_);
  public final static native void sha1_hash_udp_endpoint_pair_vector_reserve(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, long jarg2);
  public final static native boolean sha1_hash_udp_endpoint_pair_vector_isEmpty(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_);
  public final static native void sha1_hash_udp_endpoint_pair_vector_clear(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_);
  public final static native long new_sha1_hash_udp_endpoint_pair_vector__SWIG_2(int jarg1, long jarg2, sha1_hash_udp_endpoint_pair jarg2_);
  public final static native int sha1_hash_udp_endpoint_pair_vector_doSize(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_);
  public final static native void sha1_hash_udp_endpoint_pair_vector_doAdd__SWIG_0(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, long jarg2, sha1_hash_udp_endpoint_pair jarg2_);
  public final static native void sha1_hash_udp_endpoint_pair_vector_doAdd__SWIG_1(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, int jarg2, long jarg3, sha1_hash_udp_endpoint_pair jarg3_);
  public final static native long sha1_hash_udp_endpoint_pair_vector_doRemove(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, int jarg2);
  public final static native long sha1_hash_udp_endpoint_pair_vector_doGet(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, int jarg2);
  public final static native long sha1_hash_udp_endpoint_pair_vector_doSet(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, int jarg2, long jarg3, sha1_hash_udp_endpoint_pair jarg3_);
  public final static native void sha1_hash_udp_endpoint_pair_vector_doRemoveRange(long jarg1, sha1_hash_udp_endpoint_pair_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_sha1_hash_udp_endpoint_pair_vector(long jarg1);
  public final static native long new_address_sha1_hash_pair_vector__SWIG_0();
  public final static native long new_address_sha1_hash_pair_vector__SWIG_1(long jarg1, address_sha1_hash_pair_vector jarg1_);
  public final static native long address_sha1_hash_pair_vector_capacity(long jarg1, address_sha1_hash_pair_vector jarg1_);
  public final static native void address_sha1_hash_pair_vector_reserve(long jarg1, address_sha1_hash_pair_vector jarg1_, long jarg2);
  public final static native boolean address_sha1_hash_pair_vector_isEmpty(long jarg1, address_sha1_hash_pair_vector jarg1_);
  public final static native void address_sha1_hash_pair_vector_clear(long jarg1, address_sha1_hash_pair_vector jarg1_);
  public final static native long new_address_sha1_hash_pair_vector__SWIG_2(int jarg1, long jarg2, address_sha1_hash_pair jarg2_);
  public final static native int address_sha1_hash_pair_vector_doSize(long jarg1, address_sha1_hash_pair_vector jarg1_);
  public final static native void address_sha1_hash_pair_vector_doAdd__SWIG_0(long jarg1, address_sha1_hash_pair_vector jarg1_, long jarg2, address_sha1_hash_pair jarg2_);
  public final static native void address_sha1_hash_pair_vector_doAdd__SWIG_1(long jarg1, address_sha1_hash_pair_vector jarg1_, int jarg2, long jarg3, address_sha1_hash_pair jarg3_);
  public final static native long address_sha1_hash_pair_vector_doRemove(long jarg1, address_sha1_hash_pair_vector jarg1_, int jarg2);
  public final static native long address_sha1_hash_pair_vector_doGet(long jarg1, address_sha1_hash_pair_vector jarg1_, int jarg2);
  public final static native long address_sha1_hash_pair_vector_doSet(long jarg1, address_sha1_hash_pair_vector jarg1_, int jarg2, long jarg3, address_sha1_hash_pair jarg3_);
  public final static native void address_sha1_hash_pair_vector_doRemoveRange(long jarg1, address_sha1_hash_pair_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_address_sha1_hash_pair_vector(long jarg1);
  public final static native long new_file_index_string_map__SWIG_0();
  public final static native long new_file_index_string_map__SWIG_1(long jarg1, file_index_string_map jarg1_);
  public final static native long file_index_string_map_Iterator_getNextUnchecked(long jarg1, file_index_string_map.Iterator jarg1_);
  public final static native boolean file_index_string_map_Iterator_isNot(long jarg1, file_index_string_map.Iterator jarg1_, long jarg2, file_index_string_map.Iterator jarg2_);
  public final static native int file_index_string_map_Iterator_getKey(long jarg1, file_index_string_map.Iterator jarg1_);
  public final static native String file_index_string_map_Iterator_getValue(long jarg1, file_index_string_map.Iterator jarg1_);
  public final static native void file_index_string_map_Iterator_setValue(long jarg1, file_index_string_map.Iterator jarg1_, String jarg2);
  public final static native void delete_file_index_string_map_Iterator(long jarg1);
  public final static native boolean file_index_string_map_isEmpty(long jarg1, file_index_string_map jarg1_);
  public final static native void file_index_string_map_clear(long jarg1, file_index_string_map jarg1_);
  public final static native long file_index_string_map_find(long jarg1, file_index_string_map jarg1_, int jarg2);
  public final static native long file_index_string_map_begin(long jarg1, file_index_string_map jarg1_);
  public final static native long file_index_string_map_end(long jarg1, file_index_string_map jarg1_);
  public final static native int file_index_string_map_sizeImpl(long jarg1, file_index_string_map jarg1_);
  public final static native boolean file_index_string_map_containsImpl(long jarg1, file_index_string_map jarg1_, int jarg2);
  public final static native void file_index_string_map_putUnchecked(long jarg1, file_index_string_map jarg1_, int jarg2, String jarg3);
  public final static native void file_index_string_map_removeUnchecked(long jarg1, file_index_string_map jarg1_, long jarg2, file_index_string_map.Iterator jarg2_);
  public final static native void delete_file_index_string_map(long jarg1);
  public final static native long new_string_long_map__SWIG_0();
  public final static native long new_string_long_map__SWIG_1(long jarg1, string_long_map jarg1_);
  public final static native long string_long_map_Iterator_getNextUnchecked(long jarg1, string_long_map.Iterator jarg1_);
  public final static native boolean string_long_map_Iterator_isNot(long jarg1, string_long_map.Iterator jarg1_, long jarg2, string_long_map.Iterator jarg2_);
  public final static native String string_long_map_Iterator_getKey(long jarg1, string_long_map.Iterator jarg1_);
  public final static native int string_long_map_Iterator_getValue(long jarg1, string_long_map.Iterator jarg1_);
  public final static native void string_long_map_Iterator_setValue(long jarg1, string_long_map.Iterator jarg1_, int jarg2);
  public final static native void delete_string_long_map_Iterator(long jarg1);
  public final static native boolean string_long_map_isEmpty(long jarg1, string_long_map jarg1_);
  public final static native void string_long_map_clear(long jarg1, string_long_map jarg1_);
  public final static native long string_long_map_find(long jarg1, string_long_map jarg1_, String jarg2);
  public final static native long string_long_map_begin(long jarg1, string_long_map jarg1_);
  public final static native long string_long_map_end(long jarg1, string_long_map jarg1_);
  public final static native int string_long_map_sizeImpl(long jarg1, string_long_map jarg1_);
  public final static native boolean string_long_map_containsImpl(long jarg1, string_long_map jarg1_, String jarg2);
  public final static native void string_long_map_putUnchecked(long jarg1, string_long_map jarg1_, String jarg2, int jarg3);
  public final static native void string_long_map_removeUnchecked(long jarg1, string_long_map jarg1_, long jarg2, string_long_map.Iterator jarg2_);
  public final static native void delete_string_long_map(long jarg1);
  public final static native long new_string_entry_map__SWIG_0();
  public final static native long new_string_entry_map__SWIG_1(long jarg1, string_entry_map jarg1_);
  public final static native long string_entry_map_Iterator_getNextUnchecked(long jarg1, string_entry_map.Iterator jarg1_);
  public final static native boolean string_entry_map_Iterator_isNot(long jarg1, string_entry_map.Iterator jarg1_, long jarg2, string_entry_map.Iterator jarg2_);
  public final static native String string_entry_map_Iterator_getKey(long jarg1, string_entry_map.Iterator jarg1_);
  public final static native long string_entry_map_Iterator_getValue(long jarg1, string_entry_map.Iterator jarg1_);
  public final static native void string_entry_map_Iterator_setValue(long jarg1, string_entry_map.Iterator jarg1_, long jarg2, entry jarg2_);
  public final static native void delete_string_entry_map_Iterator(long jarg1);
  public final static native boolean string_entry_map_isEmpty(long jarg1, string_entry_map jarg1_);
  public final static native void string_entry_map_clear(long jarg1, string_entry_map jarg1_);
  public final static native long string_entry_map_find(long jarg1, string_entry_map jarg1_, String jarg2);
  public final static native long string_entry_map_begin(long jarg1, string_entry_map jarg1_);
  public final static native long string_entry_map_end(long jarg1, string_entry_map jarg1_);
  public final static native int string_entry_map_sizeImpl(long jarg1, string_entry_map jarg1_);
  public final static native boolean string_entry_map_containsImpl(long jarg1, string_entry_map jarg1_, String jarg2);
  public final static native void string_entry_map_putUnchecked(long jarg1, string_entry_map jarg1_, String jarg2, long jarg3, entry jarg3_);
  public final static native void string_entry_map_removeUnchecked(long jarg1, string_entry_map jarg1_, long jarg2, string_entry_map.Iterator jarg2_);
  public final static native void delete_string_entry_map(long jarg1);
  public final static native long new_alert_ptr_vector__SWIG_0();
  public final static native long new_alert_ptr_vector__SWIG_1(long jarg1, alert_ptr_vector jarg1_);
  public final static native long alert_ptr_vector_capacity(long jarg1, alert_ptr_vector jarg1_);
  public final static native void alert_ptr_vector_reserve(long jarg1, alert_ptr_vector jarg1_, long jarg2);
  public final static native boolean alert_ptr_vector_isEmpty(long jarg1, alert_ptr_vector jarg1_);
  public final static native void alert_ptr_vector_clear(long jarg1, alert_ptr_vector jarg1_);
  public final static native long new_alert_ptr_vector__SWIG_2(int jarg1, long jarg2);
  public final static native int alert_ptr_vector_doSize(long jarg1, alert_ptr_vector jarg1_);
  public final static native void alert_ptr_vector_doAdd__SWIG_0(long jarg1, alert_ptr_vector jarg1_, long jarg2);
  public final static native void alert_ptr_vector_doAdd__SWIG_1(long jarg1, alert_ptr_vector jarg1_, int jarg2, long jarg3);
  public final static native long alert_ptr_vector_doRemove(long jarg1, alert_ptr_vector jarg1_, int jarg2);
  public final static native long alert_ptr_vector_doGet(long jarg1, alert_ptr_vector jarg1_, int jarg2);
  public final static native long alert_ptr_vector_doSet(long jarg1, alert_ptr_vector jarg1_, int jarg2, long jarg3);
  public final static native void alert_ptr_vector_doRemoveRange(long jarg1, alert_ptr_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_alert_ptr_vector(long jarg1);
  public final static native long new_ip_interface_vector__SWIG_0();
  public final static native long new_ip_interface_vector__SWIG_1(long jarg1, ip_interface_vector jarg1_);
  public final static native long ip_interface_vector_capacity(long jarg1, ip_interface_vector jarg1_);
  public final static native void ip_interface_vector_reserve(long jarg1, ip_interface_vector jarg1_, long jarg2);
  public final static native boolean ip_interface_vector_isEmpty(long jarg1, ip_interface_vector jarg1_);
  public final static native void ip_interface_vector_clear(long jarg1, ip_interface_vector jarg1_);
  public final static native long new_ip_interface_vector__SWIG_2(int jarg1, long jarg2, ip_interface jarg2_);
  public final static native int ip_interface_vector_doSize(long jarg1, ip_interface_vector jarg1_);
  public final static native void ip_interface_vector_doAdd__SWIG_0(long jarg1, ip_interface_vector jarg1_, long jarg2, ip_interface jarg2_);
  public final static native void ip_interface_vector_doAdd__SWIG_1(long jarg1, ip_interface_vector jarg1_, int jarg2, long jarg3, ip_interface jarg3_);
  public final static native long ip_interface_vector_doRemove(long jarg1, ip_interface_vector jarg1_, int jarg2);
  public final static native long ip_interface_vector_doGet(long jarg1, ip_interface_vector jarg1_, int jarg2);
  public final static native long ip_interface_vector_doSet(long jarg1, ip_interface_vector jarg1_, int jarg2, long jarg3, ip_interface jarg3_);
  public final static native void ip_interface_vector_doRemoveRange(long jarg1, ip_interface_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_ip_interface_vector(long jarg1);
  public final static native long new_ip_route_vector__SWIG_0();
  public final static native long new_ip_route_vector__SWIG_1(long jarg1, ip_route_vector jarg1_);
  public final static native long ip_route_vector_capacity(long jarg1, ip_route_vector jarg1_);
  public final static native void ip_route_vector_reserve(long jarg1, ip_route_vector jarg1_, long jarg2);
  public final static native boolean ip_route_vector_isEmpty(long jarg1, ip_route_vector jarg1_);
  public final static native void ip_route_vector_clear(long jarg1, ip_route_vector jarg1_);
  public final static native long new_ip_route_vector__SWIG_2(int jarg1, long jarg2, ip_route jarg2_);
  public final static native int ip_route_vector_doSize(long jarg1, ip_route_vector jarg1_);
  public final static native void ip_route_vector_doAdd__SWIG_0(long jarg1, ip_route_vector jarg1_, long jarg2, ip_route jarg2_);
  public final static native void ip_route_vector_doAdd__SWIG_1(long jarg1, ip_route_vector jarg1_, int jarg2, long jarg3, ip_route jarg3_);
  public final static native long ip_route_vector_doRemove(long jarg1, ip_route_vector jarg1_, int jarg2);
  public final static native long ip_route_vector_doGet(long jarg1, ip_route_vector jarg1_, int jarg2);
  public final static native long ip_route_vector_doSet(long jarg1, ip_route_vector jarg1_, int jarg2, long jarg3, ip_route jarg3_);
  public final static native void ip_route_vector_doRemoveRange(long jarg1, ip_route_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_ip_route_vector(long jarg1);
  public final static native long new_port_mapping_t_vector__SWIG_0();
  public final static native long new_port_mapping_t_vector__SWIG_1(long jarg1, port_mapping_t_vector jarg1_);
  public final static native long port_mapping_t_vector_capacity(long jarg1, port_mapping_t_vector jarg1_);
  public final static native void port_mapping_t_vector_reserve(long jarg1, port_mapping_t_vector jarg1_, long jarg2);
  public final static native boolean port_mapping_t_vector_isEmpty(long jarg1, port_mapping_t_vector jarg1_);
  public final static native void port_mapping_t_vector_clear(long jarg1, port_mapping_t_vector jarg1_);
  public final static native long new_port_mapping_t_vector__SWIG_2(int jarg1, int jarg2);
  public final static native int port_mapping_t_vector_doSize(long jarg1, port_mapping_t_vector jarg1_);
  public final static native void port_mapping_t_vector_doAdd__SWIG_0(long jarg1, port_mapping_t_vector jarg1_, int jarg2);
  public final static native void port_mapping_t_vector_doAdd__SWIG_1(long jarg1, port_mapping_t_vector jarg1_, int jarg2, int jarg3);
  public final static native int port_mapping_t_vector_doRemove(long jarg1, port_mapping_t_vector jarg1_, int jarg2);
  public final static native int port_mapping_t_vector_doGet(long jarg1, port_mapping_t_vector jarg1_, int jarg2);
  public final static native int port_mapping_t_vector_doSet(long jarg1, port_mapping_t_vector jarg1_, int jarg2, int jarg3);
  public final static native void port_mapping_t_vector_doRemoveRange(long jarg1, port_mapping_t_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_port_mapping_t_vector(long jarg1);
  public final static native boolean bitset_96_test(long jarg1, bitset_96 jarg1_, long jarg2);
  public final static native boolean bitset_96_all(long jarg1, bitset_96 jarg1_);
  public final static native boolean bitset_96_any(long jarg1, bitset_96 jarg1_);
  public final static native boolean bitset_96_none(long jarg1, bitset_96 jarg1_);
  public final static native long bitset_96_count(long jarg1, bitset_96 jarg1_);
  public final static native long bitset_96_size(long jarg1, bitset_96 jarg1_);
  public final static native boolean bitset_96_get(long jarg1, bitset_96 jarg1_, long jarg2);
  public final static native long new_bitset_96();
  public final static native void delete_bitset_96(long jarg1);
  public final static native long sha1_hash_size();
  public final static native long new_sha1_hash__SWIG_0();
  public final static native long new_sha1_hash__SWIG_1(long jarg1, sha1_hash jarg1_);
  public final static native long sha1_hash_max();
  public final static native long sha1_hash_min();
  public final static native void sha1_hash_clear(long jarg1, sha1_hash jarg1_);
  public final static native boolean sha1_hash_is_all_zeros(long jarg1, sha1_hash jarg1_);
  public final static native int sha1_hash_count_leading_zeroes(long jarg1, sha1_hash jarg1_);
  public final static native long new_sha1_hash__SWIG_2(long jarg1, byte_vector jarg1_);
  public final static native int sha1_hash_hash_code(long jarg1, sha1_hash jarg1_);
  public final static native long sha1_hash_to_bytes(long jarg1, sha1_hash jarg1_);
  public final static native String sha1_hash_to_hex(long jarg1, sha1_hash jarg1_);
  public final static native boolean sha1_hash_op_eq(long jarg1, sha1_hash jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native boolean sha1_hash_op_ne(long jarg1, sha1_hash jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native boolean sha1_hash_op_lt(long jarg1, sha1_hash jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native int sha1_hash_compare(long jarg1, sha1_hash jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void delete_sha1_hash(long jarg1);
  public final static native boolean bloom_filter_128_find(long jarg1, bloom_filter_128 jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void bloom_filter_128_set(long jarg1, bloom_filter_128 jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void bloom_filter_128_clear(long jarg1, bloom_filter_128 jarg1_);
  public final static native float bloom_filter_128_size(long jarg1, bloom_filter_128 jarg1_);
  public final static native long new_bloom_filter_128();
  public final static native long bloom_filter_128_to_bytes(long jarg1, bloom_filter_128 jarg1_);
  public final static native void bloom_filter_128_from_bytes(long jarg1, bloom_filter_128 jarg1_, long jarg2, byte_vector jarg2_);
  public final static native void delete_bloom_filter_128(long jarg1);
  public final static native boolean bloom_filter_256_find(long jarg1, bloom_filter_256 jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void bloom_filter_256_set(long jarg1, bloom_filter_256 jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void bloom_filter_256_clear(long jarg1, bloom_filter_256 jarg1_);
  public final static native float bloom_filter_256_size(long jarg1, bloom_filter_256 jarg1_);
  public final static native long new_bloom_filter_256();
  public final static native long bloom_filter_256_to_bytes(long jarg1, bloom_filter_256 jarg1_);
  public final static native void bloom_filter_256_from_bytes(long jarg1, bloom_filter_256 jarg1_, long jarg2, byte_vector jarg2_);
  public final static native void delete_bloom_filter_256(long jarg1);
  public final static native long string_view_to_bytes(long jarg1, string_view jarg1_);
  public final static native long new_string_view();
  public final static native void delete_string_view(long jarg1);
  public final static native long new_tcp_endpoint__SWIG_0();
  public final static native long new_tcp_endpoint__SWIG_1(long jarg1, address jarg1_, int jarg2);
  public final static native long new_tcp_endpoint__SWIG_2(long jarg1, tcp_endpoint jarg1_);
  public final static native int tcp_endpoint_port(long jarg1, tcp_endpoint jarg1_);
  public final static native long tcp_endpoint_address(long jarg1, tcp_endpoint jarg1_);
  public final static native void delete_tcp_endpoint(long jarg1);
  public final static native long new_udp_endpoint__SWIG_0();
  public final static native long new_udp_endpoint__SWIG_1(long jarg1, address jarg1_, int jarg2);
  public final static native long new_udp_endpoint__SWIG_2(long jarg1, udp_endpoint jarg1_);
  public final static native int udp_endpoint_port(long jarg1, udp_endpoint jarg1_);
  public final static native long udp_endpoint_address(long jarg1, udp_endpoint jarg1_);
  public final static native void delete_udp_endpoint(long jarg1);
  public final static native int entry_type(long jarg1, entry jarg1_);
  public final static native long new_entry__SWIG_0(long jarg1, string_entry_map jarg1_);
  public final static native long new_entry__SWIG_1(long jarg1, byte_const_span jarg1_);
  public final static native long new_entry__SWIG_2(String jarg1);
  public final static native long new_entry__SWIG_3(long jarg1, entry_vector jarg1_);
  public final static native long new_entry__SWIG_4(long jarg1);
  public final static native long new_entry__SWIG_5(int jarg1);
  public final static native long new_entry__SWIG_6(long jarg1, entry jarg1_);
  public final static native long new_entry__SWIG_7();
  public final static native long entry_integer(long jarg1, entry jarg1_);
  public final static native String entry_string(long jarg1, entry jarg1_);
  public final static native long entry_list(long jarg1, entry jarg1_);
  public final static native long entry_dict(long jarg1, entry jarg1_);
  public final static native long entry_find_key(long jarg1, entry jarg1_, long jarg2, string_view jarg2_);
  public final static native String entry_to_string(long jarg1, entry jarg1_);
  public final static native long entry_get(long jarg1, entry jarg1_, String jarg2);
  public final static native void entry_set__SWIG_0(long jarg1, entry jarg1_, String jarg2, String jarg3);
  public final static native void entry_set__SWIG_1(long jarg1, entry jarg1_, String jarg2, long jarg3, byte_vector jarg3_);
  public final static native void entry_set__SWIG_2(long jarg1, entry jarg1_, String jarg2, long jarg3);
  public final static native void entry_set__SWIG_3(long jarg1, entry jarg1_, String jarg2, long jarg3, entry jarg3_);
  public final static native long entry_string_bytes(long jarg1, entry jarg1_);
  public final static native long entry_preformatted_bytes(long jarg1, entry jarg1_);
  public final static native long entry_bencode(long jarg1, entry jarg1_);
  public final static native long entry_from_string_bytes(long jarg1, byte_vector jarg1_);
  public final static native long entry_from_preformatted_bytes(long jarg1, byte_vector jarg1_);
  public final static native long entry_bdecode(long jarg1, byte_vector jarg1_);
  public final static native void delete_entry(long jarg1);
  public final static native long new_piece_index_bitfield__SWIG_0();
  public final static native long new_piece_index_bitfield__SWIG_1(int jarg1);
  public final static native long new_piece_index_bitfield__SWIG_2(int jarg1, boolean jarg2);
  public final static native long new_piece_index_bitfield__SWIG_3(long jarg1, piece_index_bitfield jarg1_);
  public final static native boolean piece_index_bitfield_get_bit(long jarg1, piece_index_bitfield jarg1_, int jarg2);
  public final static native void piece_index_bitfield_clear_bit(long jarg1, piece_index_bitfield jarg1_, int jarg2);
  public final static native void piece_index_bitfield_set_bit(long jarg1, piece_index_bitfield jarg1_, int jarg2);
  public final static native int piece_index_bitfield_end_index(long jarg1, piece_index_bitfield jarg1_);
  public final static native boolean piece_index_bitfield_all_set(long jarg1, piece_index_bitfield jarg1_);
  public final static native boolean piece_index_bitfield_none_set(long jarg1, piece_index_bitfield jarg1_);
  public final static native int piece_index_bitfield_size(long jarg1, piece_index_bitfield jarg1_);
  public final static native int piece_index_bitfield_num_words(long jarg1, piece_index_bitfield jarg1_);
  public final static native boolean piece_index_bitfield_empty(long jarg1, piece_index_bitfield jarg1_);
  public final static native int piece_index_bitfield_count(long jarg1, piece_index_bitfield jarg1_);
  public final static native int piece_index_bitfield_find_first_set(long jarg1, piece_index_bitfield jarg1_);
  public final static native int piece_index_bitfield_find_last_clear(long jarg1, piece_index_bitfield jarg1_);
  public final static native void piece_index_bitfield_resize__SWIG_0(long jarg1, piece_index_bitfield jarg1_, int jarg2, boolean jarg3);
  public final static native void piece_index_bitfield_resize__SWIG_1(long jarg1, piece_index_bitfield jarg1_, int jarg2);
  public final static native void piece_index_bitfield_set_all(long jarg1, piece_index_bitfield jarg1_);
  public final static native void piece_index_bitfield_clear_all(long jarg1, piece_index_bitfield jarg1_);
  public final static native void piece_index_bitfield_clear(long jarg1, piece_index_bitfield jarg1_);
  public final static native void delete_piece_index_bitfield(long jarg1);
  public final static native void peer_class_info_ignore_unchoke_slots_set(long jarg1, peer_class_info jarg1_, boolean jarg2);
  public final static native boolean peer_class_info_ignore_unchoke_slots_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_connection_limit_factor_set(long jarg1, peer_class_info jarg1_, int jarg2);
  public final static native int peer_class_info_connection_limit_factor_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_label_set(long jarg1, peer_class_info jarg1_, String jarg2);
  public final static native String peer_class_info_label_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_upload_limit_set(long jarg1, peer_class_info jarg1_, int jarg2);
  public final static native int peer_class_info_upload_limit_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_download_limit_set(long jarg1, peer_class_info jarg1_, int jarg2);
  public final static native int peer_class_info_download_limit_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_upload_priority_set(long jarg1, peer_class_info jarg1_, int jarg2);
  public final static native int peer_class_info_upload_priority_get(long jarg1, peer_class_info jarg1_);
  public final static native void peer_class_info_download_priority_set(long jarg1, peer_class_info jarg1_, int jarg2);
  public final static native int peer_class_info_download_priority_get(long jarg1, peer_class_info jarg1_);
  public final static native long new_peer_class_info();
  public final static native void delete_peer_class_info(long jarg1);
  public final static native long new_ip_filter__SWIG_0();
  public final static native long new_ip_filter__SWIG_1(long jarg1, ip_filter jarg1_);
  public final static native int ip_filter_blocked_get();
  public final static native boolean ip_filter_empty(long jarg1, ip_filter jarg1_);
  public final static native void ip_filter_add_rule(long jarg1, ip_filter jarg1_, long jarg2, address jarg2_, long jarg3, address jarg3_, long jarg4);
  public final static native long ip_filter_access(long jarg1, ip_filter jarg1_, long jarg2, address jarg2_);
  public final static native void delete_ip_filter(long jarg1);
  public final static native long new_port_filter__SWIG_0();
  public final static native long new_port_filter__SWIG_1(long jarg1, port_filter jarg1_);
  public final static native void delete_port_filter(long jarg1);
  public final static native int port_filter_blocked_get();
  public final static native void port_filter_add_rule(long jarg1, port_filter jarg1_, int jarg2, int jarg3, long jarg4);
  public final static native long port_filter_access(long jarg1, port_filter jarg1_, int jarg2);
  public final static native long connection_type_t_all();
  public final static native boolean connection_type_t_nonZero(long jarg1, connection_type_t jarg1_);
  public final static native boolean connection_type_t_eq(long jarg1, connection_type_t jarg1_, long jarg2, connection_type_t jarg2_);
  public final static native boolean connection_type_t_ne(long jarg1, connection_type_t jarg1_, long jarg2, connection_type_t jarg2_);
  public final static native long connection_type_t_or_(long jarg1, connection_type_t jarg1_, long jarg2, connection_type_t jarg2_);
  public final static native long connection_type_t_and_(long jarg1, connection_type_t jarg1_, long jarg2, connection_type_t jarg2_);
  public final static native long connection_type_t_xor(long jarg1, connection_type_t jarg1_, long jarg2, connection_type_t jarg2_);
  public final static native long connection_type_t_inv(long jarg1, connection_type_t jarg1_);
  public final static native int connection_type_t_to_int(long jarg1, connection_type_t jarg1_);
  public final static native long new_connection_type_t();
  public final static native void delete_connection_type_t(long jarg1);
  public final static native void announce_infohash_message_set(long jarg1, announce_infohash jarg1_, String jarg2);
  public final static native String announce_infohash_message_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_last_error_set(long jarg1, announce_infohash jarg1_, long jarg2);
  public final static native long announce_infohash_last_error_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_scrape_incomplete_set(long jarg1, announce_infohash jarg1_, int jarg2);
  public final static native int announce_infohash_scrape_incomplete_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_scrape_complete_set(long jarg1, announce_infohash jarg1_, int jarg2);
  public final static native int announce_infohash_scrape_complete_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_scrape_downloaded_set(long jarg1, announce_infohash jarg1_, int jarg2);
  public final static native int announce_infohash_scrape_downloaded_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_fails_set(long jarg1, announce_infohash jarg1_, short jarg2);
  public final static native short announce_infohash_fails_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_updating_set(long jarg1, announce_infohash jarg1_, boolean jarg2);
  public final static native boolean announce_infohash_updating_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_start_sent_set(long jarg1, announce_infohash jarg1_, boolean jarg2);
  public final static native boolean announce_infohash_start_sent_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_complete_sent_set(long jarg1, announce_infohash jarg1_, boolean jarg2);
  public final static native boolean announce_infohash_complete_sent_get(long jarg1, announce_infohash jarg1_);
  public final static native void announce_infohash_triggered_manually_set(long jarg1, announce_infohash jarg1_, boolean jarg2);
  public final static native boolean announce_infohash_triggered_manually_get(long jarg1, announce_infohash jarg1_);
  public final static native long announce_infohash_get_next_announce(long jarg1, announce_infohash jarg1_);
  public final static native long announce_infohash_get_min_announce(long jarg1, announce_infohash jarg1_);
  public final static native void delete_announce_infohash(long jarg1);
  public final static native long new_announce_endpoint();
  public final static native void announce_endpoint_local_endpoint_set(long jarg1, announce_endpoint jarg1_, long jarg2, tcp_endpoint jarg2_);
  public final static native long announce_endpoint_local_endpoint_get(long jarg1, announce_endpoint jarg1_);
  public final static native void announce_endpoint_enabled_set(long jarg1, announce_endpoint jarg1_, boolean jarg2);
  public final static native boolean announce_endpoint_enabled_get(long jarg1, announce_endpoint jarg1_);
  public final static native long announce_endpoint_get_infohash_v1(long jarg1, announce_endpoint jarg1_);
  public final static native long announce_endpoint_get_infohash_v2(long jarg1, announce_endpoint jarg1_);
  public final static native void delete_announce_endpoint(long jarg1);
  public final static native long new_announce_entry__SWIG_0();
  public final static native void delete_announce_entry(long jarg1);
  public final static native long new_announce_entry__SWIG_1(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_url_set(long jarg1, announce_entry jarg1_, String jarg2);
  public final static native String announce_entry_url_get(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_trackerid_set(long jarg1, announce_entry jarg1_, String jarg2);
  public final static native String announce_entry_trackerid_get(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_endpoints_set(long jarg1, announce_entry jarg1_, long jarg2, announce_endpoint_vector jarg2_);
  public final static native long announce_entry_endpoints_get(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_tier_set(long jarg1, announce_entry jarg1_, short jarg2);
  public final static native short announce_entry_tier_get(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_fail_limit_set(long jarg1, announce_entry jarg1_, short jarg2);
  public final static native short announce_entry_fail_limit_get(long jarg1, announce_entry jarg1_);
  public final static native int announce_entry_source_torrent_get();
  public final static native int announce_entry_source_client_get();
  public final static native int announce_entry_source_magnet_link_get();
  public final static native int announce_entry_source_tex_get();
  public final static native void announce_entry_source_set(long jarg1, announce_entry jarg1_, short jarg2);
  public final static native short announce_entry_source_get(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_verified_set(long jarg1, announce_entry jarg1_, boolean jarg2);
  public final static native boolean announce_entry_verified_get(long jarg1, announce_entry jarg1_);
  public final static native long new_announce_entry__SWIG_2(String jarg1);
  public final static native long new_announce_entry__SWIG_3(long jarg1, byte_vector jarg1_);
  public final static native long announce_entry_get_url(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_set_url(long jarg1, announce_entry jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long announce_entry_get_trackerid(long jarg1, announce_entry jarg1_);
  public final static native void announce_entry_set_trackerid(long jarg1, announce_entry jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long block_info_peer(long jarg1, block_info jarg1_);
  public final static native void block_info_bytes_progress_set(long jarg1, block_info jarg1_, long jarg2);
  public final static native long block_info_bytes_progress_get(long jarg1, block_info jarg1_);
  public final static native void block_info_block_size_set(long jarg1, block_info jarg1_, long jarg2);
  public final static native long block_info_block_size_get(long jarg1, block_info jarg1_);
  public final static native void block_info_state_set(long jarg1, block_info jarg1_, long jarg2);
  public final static native long block_info_state_get(long jarg1, block_info jarg1_);
  public final static native void block_info_num_peers_set(long jarg1, block_info jarg1_, long jarg2);
  public final static native long block_info_num_peers_get(long jarg1, block_info jarg1_);
  public final static native long new_block_info();
  public final static native void delete_block_info(long jarg1);
  public final static native void partial_piece_info_piece_index_set(long jarg1, partial_piece_info jarg1_, int jarg2);
  public final static native int partial_piece_info_piece_index_get(long jarg1, partial_piece_info jarg1_);
  public final static native void partial_piece_info_blocks_in_piece_set(long jarg1, partial_piece_info jarg1_, int jarg2);
  public final static native int partial_piece_info_blocks_in_piece_get(long jarg1, partial_piece_info jarg1_);
  public final static native void partial_piece_info_finished_set(long jarg1, partial_piece_info jarg1_, int jarg2);
  public final static native int partial_piece_info_finished_get(long jarg1, partial_piece_info jarg1_);
  public final static native void partial_piece_info_writing_set(long jarg1, partial_piece_info jarg1_, int jarg2);
  public final static native int partial_piece_info_writing_get(long jarg1, partial_piece_info jarg1_);
  public final static native void partial_piece_info_requested_set(long jarg1, partial_piece_info jarg1_, int jarg2);
  public final static native int partial_piece_info_requested_get(long jarg1, partial_piece_info jarg1_);
  public final static native long new_partial_piece_info();
  public final static native void delete_partial_piece_info(long jarg1);
  public final static native long torrent_handle_overwrite_existing_get();
  public final static native void torrent_handle_read_piece(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native boolean torrent_handle_have_piece(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_post_peer_info(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_get_peer_info(long jarg1, torrent_handle jarg1_, long jarg2);
  public final static native long torrent_handle_query_distributed_copies_get();
  public final static native long torrent_handle_query_accurate_download_counters_get();
  public final static native long torrent_handle_query_last_seen_complete_get();
  public final static native long torrent_handle_query_pieces_get();
  public final static native long torrent_handle_query_verified_pieces_get();
  public final static native long torrent_handle_query_torrent_file_get();
  public final static native long torrent_handle_query_name_get();
  public final static native long torrent_handle_query_save_path_get();
  public final static native long torrent_handle_status__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native long torrent_handle_status__SWIG_1(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_post_status__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native void torrent_handle_post_status__SWIG_1(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_post_download_queue(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_get_download_queue__SWIG_0(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_get_download_queue__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2, partial_piece_info_vector jarg2_);
  public final static native long torrent_handle_alert_when_available_get();
  public final static native void torrent_handle_set_piece_deadline__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3, long jarg4, deadline_flags_t jarg4_);
  public final static native void torrent_handle_set_piece_deadline__SWIG_1(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3);
  public final static native void torrent_handle_reset_piece_deadline(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_clear_piece_deadlines(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_piece_granularity_get();
  public final static native void torrent_handle_file_progress__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, int64_vector jarg2_, long jarg3, file_progress_flags_t jarg3_);
  public final static native void torrent_handle_file_progress__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2, int64_vector jarg2_);
  public final static native long torrent_handle_file_progress__SWIG_2(long jarg1, torrent_handle jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native long torrent_handle_file_progress__SWIG_3(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_post_file_progress(long jarg1, torrent_handle jarg1_, long jarg2, file_progress_flags_t jarg2_);
  public final static native void torrent_handle_clear_error(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_trackers(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_replace_trackers(long jarg1, torrent_handle jarg1_, long jarg2, announce_entry_vector jarg2_);
  public final static native void torrent_handle_add_tracker(long jarg1, torrent_handle jarg1_, long jarg2, announce_entry jarg2_);
  public final static native void torrent_handle_post_trackers(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_add_url_seed(long jarg1, torrent_handle jarg1_, String jarg2);
  public final static native void torrent_handle_remove_url_seed(long jarg1, torrent_handle jarg1_, String jarg2);
  public final static native void torrent_handle_add_http_seed(long jarg1, torrent_handle jarg1_, String jarg2);
  public final static native void torrent_handle_remove_http_seed(long jarg1, torrent_handle jarg1_, String jarg2);
  public final static native boolean torrent_handle_is_valid(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_graceful_pause_get();
  public final static native void torrent_handle_pause__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, pause_flags_t jarg2_);
  public final static native void torrent_handle_pause__SWIG_1(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_resume(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_flags(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_flags__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, long jarg3);
  public final static native void torrent_handle_set_flags__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2);
  public final static native void torrent_handle_unset_flags(long jarg1, torrent_handle jarg1_, long jarg2);
  public final static native void torrent_handle_flush_cache(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_force_recheck(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_flush_disk_cache_get();
  public final static native long torrent_handle_save_info_dict_get();
  public final static native long torrent_handle_only_if_modified_get();
  public final static native long torrent_handle_if_counters_changed_get();
  public final static native long torrent_handle_if_download_progress_get();
  public final static native long torrent_handle_if_config_changed_get();
  public final static native long torrent_handle_if_state_changed_get();
  public final static native long torrent_handle_if_metadata_changed_get();
  public final static native void torrent_handle_save_resume_data__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native void torrent_handle_save_resume_data__SWIG_1(long jarg1, torrent_handle jarg1_);
  public final static native boolean torrent_handle_need_save_resume_data__SWIG_0(long jarg1, torrent_handle jarg1_);
  public final static native boolean torrent_handle_need_save_resume_data__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2, resume_data_flags_t jarg2_);
  public final static native void torrent_handle_queue_position_up(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_queue_position_down(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_queue_position_top(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_queue_position_bottom(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_ssl_certificate__SWIG_0(long jarg1, torrent_handle jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native void torrent_handle_set_ssl_certificate__SWIG_1(long jarg1, torrent_handle jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long torrent_handle_torrent_file_with_hashes(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_piece_layers(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_post_piece_availability(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_piece_availability(long jarg1, torrent_handle jarg1_, long jarg2, int_vector jarg2_);
  public final static native long torrent_handle_ignore_min_interval_get();
  public final static native void torrent_handle_force_reannounce__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3, long jarg4, reannounce_flags_t jarg4_);
  public final static native void torrent_handle_force_reannounce__SWIG_1(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3);
  public final static native void torrent_handle_force_reannounce__SWIG_2(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_force_reannounce__SWIG_3(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_force_dht_announce(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_force_lsd_announce(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_scrape_tracker__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_scrape_tracker__SWIG_1(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_upload_limit(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native int torrent_handle_upload_limit(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_download_limit(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native int torrent_handle_download_limit(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_connect_peer__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, tcp_endpoint jarg2_, long jarg3, long jarg4);
  public final static native void torrent_handle_connect_peer__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2, tcp_endpoint jarg2_, long jarg3);
  public final static native void torrent_handle_connect_peer__SWIG_2(long jarg1, torrent_handle jarg1_, long jarg2, tcp_endpoint jarg2_);
  public final static native void torrent_handle_clear_peers(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_max_uploads(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native int torrent_handle_max_uploads(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_max_connections(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native int torrent_handle_max_connections(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_move_storage__SWIG_0(long jarg1, torrent_handle jarg1_, String jarg2, int jarg3);
  public final static native void torrent_handle_move_storage__SWIG_1(long jarg1, torrent_handle jarg1_, String jarg2);
  public final static native void torrent_handle_rename_file(long jarg1, torrent_handle jarg1_, int jarg2, String jarg3);
  public final static native long torrent_handle_info_hash(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_info_hashes(long jarg1, torrent_handle jarg1_);
  public final static native boolean torrent_handle_op_eq(long jarg1, torrent_handle jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native boolean torrent_handle_op_ne(long jarg1, torrent_handle jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native boolean torrent_handle_op_lt(long jarg1, torrent_handle jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native long torrent_handle_id(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_userdata(long jarg1, torrent_handle jarg1_);
  public final static native boolean torrent_handle_in_session(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_add_piece_bytes__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2, long jarg3, byte_vector jarg3_, long jarg4, add_piece_flags_t jarg4_);
  public final static native void torrent_handle_add_piece_bytes__SWIG_1(long jarg1, torrent_handle jarg1_, int jarg2, long jarg3, byte_vector jarg3_);
  public final static native long torrent_handle_torrent_file_ptr(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_torrent_file_with_hashes_ptr(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_get_url_seeds(long jarg1, torrent_handle jarg1_);
  public final static native long torrent_handle_get_http_seeds(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_set_ssl_certificate_buffer2(long jarg1, torrent_handle jarg1_, long jarg2, byte_vector jarg2_, long jarg3, byte_vector jarg3_, long jarg4, byte_vector jarg4_);
  public final static native int torrent_handle_queue_position2(long jarg1, torrent_handle jarg1_);
  public final static native void torrent_handle_queue_position_set2(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native int torrent_handle_piece_priority2__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_piece_priority2__SWIG_1(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3);
  public final static native void torrent_handle_prioritize_pieces2__SWIG_0(long jarg1, torrent_handle jarg1_, long jarg2, int_vector jarg2_);
  public final static native void torrent_handle_prioritize_pieces2__SWIG_1(long jarg1, torrent_handle jarg1_, long jarg2, piece_index_int_pair_vector jarg2_);
  public final static native long torrent_handle_get_piece_priorities2(long jarg1, torrent_handle jarg1_);
  public final static native int torrent_handle_file_priority2__SWIG_0(long jarg1, torrent_handle jarg1_, int jarg2);
  public final static native void torrent_handle_file_priority2__SWIG_1(long jarg1, torrent_handle jarg1_, int jarg2, int jarg3);
  public final static native void torrent_handle_prioritize_files2(long jarg1, torrent_handle jarg1_, long jarg2, int_vector jarg2_);
  public final static native long torrent_handle_get_file_priorities2(long jarg1, torrent_handle jarg1_);
  public final static native void delete_torrent_handle(long jarg1);
  public final static native long new_session_handle__SWIG_0();
  public final static native long new_session_handle__SWIG_1(long jarg1, session_handle jarg1_);
  public final static native boolean session_handle_is_valid(long jarg1, session_handle jarg1_);
  public final static native long session_handle_save_settings_get();
  public final static native long session_handle_save_dht_state_get();
  public final static native long session_handle_save_extension_state_get();
  public final static native long session_handle_save_ip_filter_get();
  public final static native long session_handle_session_state__SWIG_0(long jarg1, session_handle jarg1_, long jarg2);
  public final static native long session_handle_session_state__SWIG_1(long jarg1, session_handle jarg1_);
  public final static native void session_handle_refresh_torrent_status__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, long jarg3, status_flags_t jarg3_);
  public final static native void session_handle_refresh_torrent_status__SWIG_1(long jarg1, session_handle jarg1_, long jarg2);
  public final static native void session_handle_post_torrent_updates__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, status_flags_t jarg2_);
  public final static native void session_handle_post_torrent_updates__SWIG_1(long jarg1, session_handle jarg1_);
  public final static native void session_handle_post_session_stats(long jarg1, session_handle jarg1_);
  public final static native void session_handle_post_dht_stats(long jarg1, session_handle jarg1_);
  public final static native void session_handle_set_dht_state__SWIG_0(long jarg1, session_handle jarg1_, long jarg2);
  public final static native long session_handle_find_torrent(long jarg1, session_handle jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native long session_handle_get_torrents(long jarg1, session_handle jarg1_);
  public final static native long session_handle_add_torrent(long jarg1, session_handle jarg1_, long jarg2, long jarg3);
  public final static native void session_handle_async_add_torrent(long jarg1, session_handle jarg1_, long jarg2);
  public final static native void session_handle_pause(long jarg1, session_handle jarg1_);
  public final static native void session_handle_resume(long jarg1, session_handle jarg1_);
  public final static native boolean session_handle_is_paused(long jarg1, session_handle jarg1_);
  public final static native boolean session_handle_is_dht_running(long jarg1, session_handle jarg1_);
  public final static native void session_handle_add_dht_node(long jarg1, session_handle jarg1_, long jarg2, string_int_pair jarg2_);
  public final static native void session_handle_dht_get_item__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native long session_handle_dht_put_item__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, entry jarg2_);
  public final static native void session_handle_dht_get_peers(long jarg1, session_handle jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void session_handle_dht_live_nodes(long jarg1, session_handle jarg1_, long jarg2, sha1_hash jarg2_);
  public final static native void session_handle_dht_sample_infohashes(long jarg1, session_handle jarg1_, long jarg2, udp_endpoint jarg2_, long jarg3, sha1_hash jarg3_);
  public final static native void session_handle_dht_direct_request__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, udp_endpoint jarg2_, long jarg3, entry jarg3_, long jarg4);
  public final static native void session_handle_dht_direct_request__SWIG_1(long jarg1, session_handle jarg1_, long jarg2, udp_endpoint jarg2_, long jarg3, entry jarg3_);
  public final static native void session_handle_set_ip_filter(long jarg1, session_handle jarg1_, long jarg2, ip_filter jarg2_);
  public final static native long session_handle_get_ip_filter(long jarg1, session_handle jarg1_);
  public final static native void session_handle_set_port_filter(long jarg1, session_handle jarg1_, long jarg2, port_filter jarg2_);
  public final static native int session_handle_listen_port(long jarg1, session_handle jarg1_);
  public final static native int session_handle_ssl_listen_port(long jarg1, session_handle jarg1_);
  public final static native boolean session_handle_is_listening(long jarg1, session_handle jarg1_);
  public final static native void session_handle_set_peer_class_filter(long jarg1, session_handle jarg1_, long jarg2, ip_filter jarg2_);
  public final static native long session_handle_get_peer_class_filter(long jarg1, session_handle jarg1_);
  public final static native void session_handle_set_peer_class_type_filter(long jarg1, session_handle jarg1_, long jarg2);
  public final static native long session_handle_get_peer_class_type_filter(long jarg1, session_handle jarg1_);
  public final static native long session_handle_delete_files_get();
  public final static native long session_handle_delete_partfile_get();
  public final static native long session_handle_paused_get();
  public final static native void session_handle_remove_torrent__SWIG_0(long jarg1, session_handle jarg1_, long jarg2, torrent_handle jarg2_, long jarg3);
  public final static native void session_handle_remove_torrent__SWIG_1(long jarg1, session_handle jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native void session_handle_apply_settings(long jarg1, session_handle jarg1_, long jarg2);
  public final static native long session_handle_get_settings(long jarg1, session_handle jarg1_);
  public final static native void session_handle_pop_alerts(long jarg1, session_handle jarg1_, long jarg2);
  public final static native int session_handle_udp_get();
  public final static native int session_handle_tcp_get();
  public final static native long session_handle_reopen_map_ports_get();
  public final static native void session_handle_reopen_network_sockets__SWIG_0(long jarg1, session_handle jarg1_, long jarg2);
  public final static native void session_handle_reopen_network_sockets__SWIG_1(long jarg1, session_handle jarg1_);
  public final static native void session_handle_dht_get_item__SWIG_1(long jarg1, session_handle jarg1_, long jarg2, byte_vector jarg2_, long jarg3, byte_vector jarg3_);
  public final static native void session_handle_dht_put_item__SWIG_1(long jarg1, session_handle jarg1_, long jarg2, byte_vector jarg2_, long jarg3, byte_vector jarg3_, long jarg4, entry jarg4_, long jarg5, byte_vector jarg5_);
  public final static native void session_handle_dht_direct_request__SWIG_2(long jarg1, session_handle jarg1_, long jarg2, udp_endpoint jarg2_, long jarg3, entry jarg3_, long jarg4);
  public final static native long session_handle_wait_for_alert_ms(long jarg1, session_handle jarg1_, long jarg2);
  public final static native void session_handle_set_alert_notify_callback(long jarg1, session_handle jarg1_, long jarg2, alert_notify_callback jarg2_);
  public final static native void delete_session_handle(long jarg1);
  public final static native int bdecode_no_error_get();
  public final static native long new_bdecode_node__SWIG_0();
  public final static native long new_bdecode_node__SWIG_1(long jarg1, bdecode_node jarg1_);
  public final static native int bdecode_node_type(long jarg1, bdecode_node jarg1_);
  public final static native boolean bdecode_node_op_bool(long jarg1, bdecode_node jarg1_);
  public final static native long bdecode_node_data_offset(long jarg1, bdecode_node jarg1_);
  public final static native long bdecode_node_list_at(long jarg1, bdecode_node jarg1_, int jarg2);
  public final static native long bdecode_node_list_int_value_at__SWIG_0(long jarg1, bdecode_node jarg1_, int jarg2, long jarg3);
  public final static native long bdecode_node_list_int_value_at__SWIG_1(long jarg1, bdecode_node jarg1_, int jarg2);
  public final static native int bdecode_node_list_size(long jarg1, bdecode_node jarg1_);
  public final static native long bdecode_node_dict_at_node(long jarg1, bdecode_node jarg1_, int jarg2);
  public final static native int bdecode_node_dict_size(long jarg1, bdecode_node jarg1_);
  public final static native long bdecode_node_int_value(long jarg1, bdecode_node jarg1_);
  public final static native int bdecode_node_string_length(long jarg1, bdecode_node jarg1_);
  public final static native long bdecode_node_string_offset(long jarg1, bdecode_node jarg1_);
  public final static native void bdecode_node_clear(long jarg1, bdecode_node jarg1_);
  public final static native String bdecode_node_list_string_value_at_s__SWIG_0(long jarg1, bdecode_node jarg1_, int jarg2, String jarg3);
  public final static native String bdecode_node_list_string_value_at_s__SWIG_1(long jarg1, bdecode_node jarg1_, int jarg2);
  public final static native long bdecode_node_dict_find_s(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native long bdecode_node_dict_find_dict_s(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native long bdecode_node_dict_find_list_s(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native long bdecode_node_dict_find_string_s(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native long bdecode_node_dict_find_int_s(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native String bdecode_node_dict_find_string_value_s__SWIG_0(long jarg1, bdecode_node jarg1_, String jarg2, String jarg3);
  public final static native String bdecode_node_dict_find_string_value_s__SWIG_1(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native long bdecode_node_dict_find_int_value_s__SWIG_0(long jarg1, bdecode_node jarg1_, String jarg2, long jarg3);
  public final static native long bdecode_node_dict_find_int_value_s__SWIG_1(long jarg1, bdecode_node jarg1_, String jarg2);
  public final static native String bdecode_node_string_value_s(long jarg1, bdecode_node jarg1_);
  public final static native String bdecode_node_string_value_ex(long jarg1, bdecode_node jarg1_);
  public final static native String bdecode_node_to_string(long jarg1, bdecode_node jarg1_, boolean jarg2, int jarg3);
  public final static native int bdecode_node_bdecode(long jarg1, byte_vector jarg1_, long jarg2, bdecode_node jarg2_, long jarg3, error_code jarg3_);
  public final static native void delete_bdecode_node(long jarg1);
  public final static native long new_web_seed_entry__SWIG_0(String jarg1, int jarg2, String jarg3, long jarg4, string_string_pair_vector jarg4_);
  public final static native long new_web_seed_entry__SWIG_1(String jarg1, int jarg2, String jarg3);
  public final static native long new_web_seed_entry__SWIG_2(String jarg1, int jarg2);
  public final static native boolean web_seed_entry_op_eq(long jarg1, web_seed_entry jarg1_, long jarg2, web_seed_entry jarg2_);
  public final static native boolean web_seed_entry_op_lt(long jarg1, web_seed_entry jarg1_, long jarg2, web_seed_entry jarg2_);
  public final static native void web_seed_entry_url_set(long jarg1, web_seed_entry jarg1_, String jarg2);
  public final static native String web_seed_entry_url_get(long jarg1, web_seed_entry jarg1_);
  public final static native void web_seed_entry_auth_set(long jarg1, web_seed_entry jarg1_, String jarg2);
  public final static native String web_seed_entry_auth_get(long jarg1, web_seed_entry jarg1_);
  public final static native void web_seed_entry_extra_headers_set(long jarg1, web_seed_entry jarg1_, long jarg2, string_string_pair_vector jarg2_);
  public final static native long web_seed_entry_extra_headers_get(long jarg1, web_seed_entry jarg1_);
  public final static native void web_seed_entry_type_set(long jarg1, web_seed_entry jarg1_, short jarg2);
  public final static native short web_seed_entry_type_get(long jarg1, web_seed_entry jarg1_);
  public final static native void delete_web_seed_entry(long jarg1);
  public final static native void load_torrent_limits_max_buffer_size_set(long jarg1, load_torrent_limits jarg1_, int jarg2);
  public final static native int load_torrent_limits_max_buffer_size_get(long jarg1, load_torrent_limits jarg1_);
  public final static native void load_torrent_limits_max_pieces_set(long jarg1, load_torrent_limits jarg1_, int jarg2);
  public final static native int load_torrent_limits_max_pieces_get(long jarg1, load_torrent_limits jarg1_);
  public final static native void load_torrent_limits_max_decode_depth_set(long jarg1, load_torrent_limits jarg1_, int jarg2);
  public final static native int load_torrent_limits_max_decode_depth_get(long jarg1, load_torrent_limits jarg1_);
  public final static native void load_torrent_limits_max_decode_tokens_set(long jarg1, load_torrent_limits jarg1_, int jarg2);
  public final static native int load_torrent_limits_max_decode_tokens_get(long jarg1, load_torrent_limits jarg1_);
  public final static native long new_load_torrent_limits();
  public final static native void delete_load_torrent_limits(long jarg1);
  public final static native long new_torrent_info__SWIG_0(long jarg1, torrent_info jarg1_);
  public final static native long new_torrent_info__SWIG_1(long jarg1);
  public final static native long new_torrent_info__SWIG_2(long jarg1, bdecode_node jarg1_, long jarg2, error_code jarg2_);
  public final static native long new_torrent_info__SWIG_3(String jarg1, long jarg2, error_code jarg2_);
  public final static native void delete_torrent_info(long jarg1);
  public final static native long torrent_info_files(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_orig_files(long jarg1, torrent_info jarg1_);
  public final static native void torrent_info_rename_file(long jarg1, torrent_info jarg1_, int jarg2, String jarg3);
  public final static native void torrent_info_remap_files(long jarg1, torrent_info jarg1_, long jarg2);
  public final static native void torrent_info_add_tracker__SWIG_0(long jarg1, torrent_info jarg1_, String jarg2, int jarg3);
  public final static native void torrent_info_add_tracker__SWIG_1(long jarg1, torrent_info jarg1_, String jarg2);
  public final static native void torrent_info_add_tracker__SWIG_2(long jarg1, torrent_info jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native long torrent_info_trackers(long jarg1, torrent_info jarg1_);
  public final static native void torrent_info_clear_trackers(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_similar_torrents(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_collections(long jarg1, torrent_info jarg1_);
  public final static native void torrent_info_add_url_seed__SWIG_0(long jarg1, torrent_info jarg1_, String jarg2, String jarg3, long jarg4, string_string_pair_vector jarg4_);
  public final static native void torrent_info_add_url_seed__SWIG_1(long jarg1, torrent_info jarg1_, String jarg2, String jarg3);
  public final static native void torrent_info_add_url_seed__SWIG_2(long jarg1, torrent_info jarg1_, String jarg2);
  public final static native void torrent_info_add_http_seed__SWIG_0(long jarg1, torrent_info jarg1_, String jarg2, String jarg3, long jarg4, string_string_pair_vector jarg4_);
  public final static native void torrent_info_add_http_seed__SWIG_1(long jarg1, torrent_info jarg1_, String jarg2, String jarg3);
  public final static native void torrent_info_add_http_seed__SWIG_2(long jarg1, torrent_info jarg1_, String jarg2);
  public final static native long torrent_info_web_seeds(long jarg1, torrent_info jarg1_);
  public final static native void torrent_info_set_web_seeds(long jarg1, torrent_info jarg1_, long jarg2, web_seed_entry_vector jarg2_);
  public final static native long torrent_info_total_size(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_piece_length(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_num_pieces(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_blocks_per_piece(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_last_piece(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_end_piece(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_info_hash(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_info_hashes(long jarg1, torrent_info jarg1_);
  public final static native boolean torrent_info_v1(long jarg1, torrent_info jarg1_);
  public final static native boolean torrent_info_v2(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_num_files(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_map_block(long jarg1, torrent_info jarg1_, int jarg2, long jarg3, int jarg4);
  public final static native long torrent_info_map_file(long jarg1, torrent_info jarg1_, int jarg2, long jarg3, int jarg4);
  public final static native boolean torrent_info_is_valid(long jarg1, torrent_info jarg1_);
  public final static native boolean torrent_info_priv(long jarg1, torrent_info jarg1_);
  public final static native boolean torrent_info_is_i2p(long jarg1, torrent_info jarg1_);
  public final static native int torrent_info_piece_size(long jarg1, torrent_info jarg1_, int jarg2);
  public final static native long torrent_info_hash_for_piece(long jarg1, torrent_info jarg1_, int jarg2);
  public final static native boolean torrent_info_is_loaded(long jarg1, torrent_info jarg1_);
  public final static native String torrent_info_name(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_creation_date(long jarg1, torrent_info jarg1_);
  public final static native String torrent_info_creator(long jarg1, torrent_info jarg1_);
  public final static native String torrent_info_comment(long jarg1, torrent_info jarg1_);
  public final static native long torrent_info_nodes(long jarg1, torrent_info jarg1_);
  public final static native void torrent_info_add_node(long jarg1, torrent_info jarg1_, long jarg2, string_int_pair jarg2_);
  public final static native long torrent_info_info(long jarg1, torrent_info jarg1_, String jarg2);
  public final static native void torrent_info_free_piece_layers(long jarg1, torrent_info jarg1_);
  public final static native long new_torrent_info__SWIG_4(long jarg1, int jarg2, long jarg3, error_code jarg3_);
  public final static native long torrent_info_get_info_section(long jarg1, torrent_info jarg1_);
  public final static native long new_session_params__SWIG_0(long jarg1);
  public final static native long new_session_params__SWIG_1();
  public final static native void delete_session_params(long jarg1);
  public final static native long new_session_params__SWIG_2(long jarg1, session_params jarg1_);
  public final static native void session_params_settings_set(long jarg1, session_params jarg1_, long jarg2);
  public final static native long session_params_settings_get(long jarg1, session_params jarg1_);
  public final static native void session_params_dht_state_set(long jarg1, session_params jarg1_, long jarg2);
  public final static native long session_params_dht_state_get(long jarg1, session_params jarg1_);
  public final static native void session_params_ext_state_set(long jarg1, session_params jarg1_, long jarg2);
  public final static native long session_params_ext_state_get(long jarg1, session_params jarg1_);
  public final static native void session_params_ip_filter_set(long jarg1, session_params jarg1_, long jarg2, ip_filter jarg2_);
  public final static native long session_params_ip_filter_get(long jarg1, session_params jarg1_);
  public final static native long session_params_read_session_params__SWIG_0(long jarg1, long jarg2);
  public final static native long session_params_read_session_params__SWIG_1(long jarg1);
  public final static native long session_params_write_session_params__SWIG_0(long jarg1, long jarg2);
  public final static native long session_params_write_session_params__SWIG_1(long jarg1);
  public final static native long session_params_write_session_params_buf__SWIG_0(long jarg1, long jarg2);
  public final static native long session_params_write_session_params_buf__SWIG_1(long jarg1);
  public final static native void session_params_set_posix_disk_io_constructor(long jarg1, session_params jarg1_);
  public final static native void session_params_set_default_disk_io_constructor(long jarg1, session_params jarg1_);
  public final static native long new_peer_connection_handle(long jarg1);
  public final static native int peer_connection_handle_type(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_is_seed(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_upload_only(long jarg1, peer_connection_handle jarg1_);
  public final static native long peer_connection_handle_pid(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_has_piece(long jarg1, peer_connection_handle jarg1_, int jarg2);
  public final static native boolean peer_connection_handle_is_interesting(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_is_choked(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_is_peer_interested(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_has_peer_choked(long jarg1, peer_connection_handle jarg1_);
  public final static native void peer_connection_handle_choke_this_peer(long jarg1, peer_connection_handle jarg1_);
  public final static native void peer_connection_handle_maybe_unchoke_this_peer(long jarg1, peer_connection_handle jarg1_);
  public final static native void peer_connection_handle_get_peer_info(long jarg1, peer_connection_handle jarg1_, long jarg2);
  public final static native long peer_connection_handle_associated_torrent(long jarg1, peer_connection_handle jarg1_);
  public final static native long peer_connection_handle_remote(long jarg1, peer_connection_handle jarg1_);
  public final static native long peer_connection_handle_local_endpoint(long jarg1, peer_connection_handle jarg1_);
  public final static native void peer_connection_handle_disconnect__SWIG_0(long jarg1, peer_connection_handle jarg1_, long jarg2, error_code jarg2_, long jarg3, int jarg4);
  public final static native void peer_connection_handle_disconnect__SWIG_1(long jarg1, peer_connection_handle jarg1_, long jarg2, error_code jarg2_, long jarg3);
  public final static native boolean peer_connection_handle_is_disconnecting(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_is_connecting(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_is_outgoing(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_on_local_network(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_ignore_unchoke_slots(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_failed(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_can_disconnect(long jarg1, peer_connection_handle jarg1_, long jarg2, error_code jarg2_);
  public final static native boolean peer_connection_handle_has_metadata(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_in_handshake(long jarg1, peer_connection_handle jarg1_);
  public final static native void peer_connection_handle_send_buffer(long jarg1, peer_connection_handle jarg1_, String jarg2, int jarg3);
  public final static native long peer_connection_handle_last_seen_complete(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean peer_connection_handle_op_eq(long jarg1, peer_connection_handle jarg1_, long jarg2, peer_connection_handle jarg2_);
  public final static native boolean peer_connection_handle_op_ne(long jarg1, peer_connection_handle jarg1_, long jarg2, peer_connection_handle jarg2_);
  public final static native boolean peer_connection_handle_op_lt(long jarg1, peer_connection_handle jarg1_, long jarg2, peer_connection_handle jarg2_);
  public final static native long peer_connection_handle_get_time_of_last_unchoke(long jarg1, peer_connection_handle jarg1_);
  public final static native void delete_peer_connection_handle(long jarg1);
  public final static native long new_bt_peer_connection_handle(long jarg1, peer_connection_handle jarg1_);
  public final static native boolean bt_peer_connection_handle_packet_finished(long jarg1, bt_peer_connection_handle jarg1_);
  public final static native boolean bt_peer_connection_handle_support_extensions(long jarg1, bt_peer_connection_handle jarg1_);
  public final static native boolean bt_peer_connection_handle_supports_encryption(long jarg1, bt_peer_connection_handle jarg1_);
  public final static native void delete_bt_peer_connection_handle(long jarg1);
  public final static native long new_torrent_status__SWIG_0();
  public final static native void delete_torrent_status(long jarg1);
  public final static native long new_torrent_status__SWIG_1(long jarg1, torrent_status jarg1_);
  public final static native boolean torrent_status_op_eq(long jarg1, torrent_status jarg1_, long jarg2, torrent_status jarg2_);
  public final static native void torrent_status_handle_set(long jarg1, torrent_status jarg1_, long jarg2, torrent_handle jarg2_);
  public final static native long torrent_status_handle_get(long jarg1, torrent_status jarg1_);
  public final static native int torrent_status_checking_files_get();
  public final static native int torrent_status_checking_resume_data_get();
  public final static native void torrent_status_errc_set(long jarg1, torrent_status jarg1_, long jarg2, error_code jarg2_);
  public final static native long torrent_status_errc_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_error_file_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_error_file_get(long jarg1, torrent_status jarg1_);
  public final static native int torrent_status_error_file_none_get();
  public final static native int torrent_status_error_file_ssl_ctx_get();
  public final static native int torrent_status_error_file_metadata_get();
  public final static native int torrent_status_error_file_exception_get();
  public final static native int torrent_status_error_file_partfile_get();
  public final static native void torrent_status_save_path_set(long jarg1, torrent_status jarg1_, String jarg2);
  public final static native String torrent_status_save_path_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_name_set(long jarg1, torrent_status jarg1_, String jarg2);
  public final static native String torrent_status_name_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_current_tracker_set(long jarg1, torrent_status jarg1_, String jarg2);
  public final static native String torrent_status_current_tracker_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_download_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_download_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_upload_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_upload_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_payload_download_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_payload_download_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_payload_upload_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_payload_upload_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_failed_bytes_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_failed_bytes_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_redundant_bytes_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_redundant_bytes_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_pieces_set(long jarg1, torrent_status jarg1_, long jarg2, piece_index_bitfield jarg2_);
  public final static native long torrent_status_pieces_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_verified_pieces_set(long jarg1, torrent_status jarg1_, long jarg2, piece_index_bitfield jarg2_);
  public final static native long torrent_status_verified_pieces_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_done_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_done_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_wanted_done_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_wanted_done_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_total_wanted_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_total_wanted_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_all_time_upload_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_all_time_upload_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_all_time_download_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_all_time_download_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_added_time_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_added_time_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_completed_time_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_completed_time_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_last_seen_complete_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_last_seen_complete_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_storage_mode_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_storage_mode_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_progress_set(long jarg1, torrent_status jarg1_, float jarg2);
  public final static native float torrent_status_progress_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_progress_ppm_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_progress_ppm_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_download_rate_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_download_rate_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_upload_rate_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_upload_rate_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_download_payload_rate_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_download_payload_rate_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_upload_payload_rate_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_upload_payload_rate_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_seeds_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_seeds_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_peers_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_peers_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_complete_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_complete_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_incomplete_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_incomplete_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_list_seeds_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_list_seeds_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_list_peers_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_list_peers_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_connect_candidates_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_connect_candidates_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_pieces_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_pieces_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_distributed_full_copies_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_distributed_full_copies_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_distributed_fraction_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_distributed_fraction_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_distributed_copies_set(long jarg1, torrent_status jarg1_, float jarg2);
  public final static native float torrent_status_distributed_copies_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_block_size_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_block_size_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_uploads_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_uploads_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_num_connections_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_num_connections_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_uploads_limit_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_uploads_limit_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_connections_limit_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_connections_limit_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_up_bandwidth_queue_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_up_bandwidth_queue_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_down_bandwidth_queue_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_down_bandwidth_queue_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_seed_rank_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_seed_rank_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_state_set(long jarg1, torrent_status jarg1_, int jarg2);
  public final static native int torrent_status_state_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_need_save_resume_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_need_save_resume_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_is_seeding_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_is_seeding_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_is_finished_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_is_finished_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_has_metadata_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_has_metadata_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_has_incoming_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_has_incoming_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_moving_storage_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_moving_storage_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_announcing_to_trackers_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_announcing_to_trackers_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_announcing_to_lsd_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_announcing_to_lsd_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_announcing_to_dht_set(long jarg1, torrent_status jarg1_, boolean jarg2);
  public final static native boolean torrent_status_announcing_to_dht_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_info_hashes_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_info_hashes_get(long jarg1, torrent_status jarg1_);
  public final static native void torrent_status_flags_set(long jarg1, torrent_status jarg1_, long jarg2);
  public final static native long torrent_status_flags_get(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_torrent_file_ptr(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_next_announce(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_last_upload(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_last_download(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_active_duration(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_finished_duration(long jarg1, torrent_status jarg1_);
  public final static native long torrent_status_get_seeding_duration(long jarg1, torrent_status jarg1_);
  public final static native int torrent_status_get_queue_position(long jarg1, torrent_status jarg1_);
  public final static native long ed25519_create_seed();
  public final static native long ed25519_create_keypair(long jarg1, byte_vector jarg1_);
  public final static native long ed25519_sign(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_, long jarg3, byte_vector jarg3_);
  public final static native boolean ed25519_verify(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_, long jarg3, byte_vector jarg3_);
  public final static native long ed25519_add_scalar_public(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ed25519_add_scalar_secret(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ed25519_key_exchange(long jarg1, byte_vector jarg1_, long jarg2, byte_vector jarg2_);
  public final static native void delete_alert_notify_callback(long jarg1);
  public final static native void alert_notify_callback_on_alert(long jarg1, alert_notify_callback jarg1_);
  public final static native void alert_notify_callback_on_alertSwigExplicitalert_notify_callback(long jarg1, alert_notify_callback jarg1_);
  public final static native long new_alert_notify_callback();
  public final static native void alert_notify_callback_director_connect(alert_notify_callback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void alert_notify_callback_change_ownership(alert_notify_callback obj, long cptr, boolean take_or_release);
  public final static native void delete_add_files_listener(long jarg1);
  public final static native boolean add_files_listener_pred(long jarg1, add_files_listener jarg1_, String jarg2);
  public final static native boolean add_files_listener_predSwigExplicitadd_files_listener(long jarg1, add_files_listener jarg1_, String jarg2);
  public final static native long new_add_files_listener();
  public final static native void add_files_listener_director_connect(add_files_listener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void add_files_listener_change_ownership(add_files_listener obj, long cptr, boolean take_or_release);
  public final static native void add_files_ex(long jarg1, String jarg2, long jarg3, add_files_listener jarg3_, long jarg4);
  public final static native void delete_set_piece_hashes_listener(long jarg1);
  public final static native void set_piece_hashes_listener_progress(long jarg1, set_piece_hashes_listener jarg1_, int jarg2);
  public final static native void set_piece_hashes_listener_progressSwigExplicitset_piece_hashes_listener(long jarg1, set_piece_hashes_listener jarg1_, int jarg2);
  public final static native long new_set_piece_hashes_listener();
  public final static native void set_piece_hashes_listener_director_connect(set_piece_hashes_listener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void set_piece_hashes_listener_change_ownership(set_piece_hashes_listener obj, long cptr, boolean take_or_release);
  public final static native void set_piece_hashes_ex(long jarg1, String jarg2, long jarg3, set_piece_hashes_listener jarg3_, long jarg4, error_code jarg4_);
  public final static native int boost_version();
  public final static native String boost_lib_version();
  public final static native int openssl_version_number();
  public final static native String openssl_version_text();
  public final static native int find_metric_idx_s(String jarg1);
  public final static native void ip_interface_interface_address_set(long jarg1, ip_interface jarg1_, long jarg2, address jarg2_);
  public final static native long ip_interface_interface_address_get(long jarg1, ip_interface jarg1_);
  public final static native void ip_interface_netmask_set(long jarg1, ip_interface jarg1_, long jarg2, address jarg2_);
  public final static native long ip_interface_netmask_get(long jarg1, ip_interface jarg1_);
  public final static native void ip_interface_name_set(long jarg1, ip_interface jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ip_interface_name_get(long jarg1, ip_interface jarg1_);
  public final static native void ip_interface_friendly_name_set(long jarg1, ip_interface jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ip_interface_friendly_name_get(long jarg1, ip_interface jarg1_);
  public final static native void ip_interface_description_set(long jarg1, ip_interface jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ip_interface_description_get(long jarg1, ip_interface jarg1_);
  public final static native void ip_interface_preferred_set(long jarg1, ip_interface jarg1_, boolean jarg2);
  public final static native boolean ip_interface_preferred_get(long jarg1, ip_interface jarg1_);
  public final static native long new_ip_interface();
  public final static native void delete_ip_interface(long jarg1);
  public final static native void ip_route_destination_set(long jarg1, ip_route jarg1_, long jarg2, address jarg2_);
  public final static native long ip_route_destination_get(long jarg1, ip_route jarg1_);
  public final static native void ip_route_netmask_set(long jarg1, ip_route jarg1_, long jarg2, address jarg2_);
  public final static native long ip_route_netmask_get(long jarg1, ip_route jarg1_);
  public final static native void ip_route_gateway_set(long jarg1, ip_route jarg1_, long jarg2, address jarg2_);
  public final static native long ip_route_gateway_get(long jarg1, ip_route jarg1_);
  public final static native void ip_route_source_hint_set(long jarg1, ip_route jarg1_, long jarg2, address jarg2_);
  public final static native long ip_route_source_hint_get(long jarg1, ip_route jarg1_);
  public final static native void ip_route_name_set(long jarg1, ip_route jarg1_, long jarg2, byte_vector jarg2_);
  public final static native long ip_route_name_get(long jarg1, ip_route jarg1_);
  public final static native void ip_route_mtu_set(long jarg1, ip_route jarg1_, int jarg2);
  public final static native int ip_route_mtu_get(long jarg1, ip_route jarg1_);
  public final static native long new_ip_route();
  public final static native void delete_ip_route(long jarg1);
  public final static native long enum_net_interfaces(long jarg1);
  public final static native long enum_routes(long jarg1);
  public final static native void mem_copy(long jarg1, byte_vector jarg1_, String jarg2, long jarg3);
  public final static native void copy_byte_vector_to_char_array(long jarg1, byte_vector jarg1_, String jarg2, long jarg3);
  public final static native long get_gateway(long jarg1, ip_interface jarg1_, long jarg2, ip_route_vector jarg2_);
  public final static native String device_for_address(long jarg1, long jarg2, address jarg2_, long jarg3, error_code jarg3_);
  public final static native void delete_list_files_listener(long jarg1);
  public final static native boolean list_files_listener_pred(long jarg1, list_files_listener jarg1_, String jarg2);
  public final static native long new_list_files_listener();
  public final static native boolean arm_neon_support();
  public final static native void posix_stat_t_size_set(long jarg1, posix_stat_t jarg1_, long jarg2);
  public final static native long posix_stat_t_size_get(long jarg1, posix_stat_t jarg1_);
  public final static native void posix_stat_t_atime_set(long jarg1, posix_stat_t jarg1_, long jarg2);
  public final static native long posix_stat_t_atime_get(long jarg1, posix_stat_t jarg1_);
  public final static native void posix_stat_t_mtime_set(long jarg1, posix_stat_t jarg1_, long jarg2);
  public final static native long posix_stat_t_mtime_get(long jarg1, posix_stat_t jarg1_);
  public final static native void posix_stat_t_ctime_set(long jarg1, posix_stat_t jarg1_, long jarg2);
  public final static native long posix_stat_t_ctime_get(long jarg1, posix_stat_t jarg1_);
  public final static native void posix_stat_t_mode_set(long jarg1, posix_stat_t jarg1_, int jarg2);
  public final static native int posix_stat_t_mode_get(long jarg1, posix_stat_t jarg1_);
  public final static native long new_posix_stat_t();
  public final static native void delete_posix_stat_t(long jarg1);
  public final static native void delete_posix_wrapper(long jarg1);
  public final static native int posix_wrapper_open(long jarg1, posix_wrapper jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native int posix_wrapper_openSwigExplicitposix_wrapper(long jarg1, posix_wrapper jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native int posix_wrapper_stat(long jarg1, posix_wrapper jarg1_, String jarg2, long jarg3, posix_stat_t jarg3_);
  public final static native int posix_wrapper_statSwigExplicitposix_wrapper(long jarg1, posix_wrapper jarg1_, String jarg2, long jarg3, posix_stat_t jarg3_);
  public final static native int posix_wrapper_mkdir(long jarg1, posix_wrapper jarg1_, String jarg2, int jarg3);
  public final static native int posix_wrapper_mkdirSwigExplicitposix_wrapper(long jarg1, posix_wrapper jarg1_, String jarg2, int jarg3);
  public final static native int posix_wrapper_rename(long jarg1, posix_wrapper jarg1_, String jarg2, String jarg3);
  public final static native int posix_wrapper_renameSwigExplicitposix_wrapper(long jarg1, posix_wrapper jarg1_, String jarg2, String jarg3);
  public final static native int posix_wrapper_remove(long jarg1, posix_wrapper jarg1_, String jarg2);
  public final static native int posix_wrapper_removeSwigExplicitposix_wrapper(long jarg1, posix_wrapper jarg1_, String jarg2);
  public final static native long new_posix_wrapper();
  public final static native void posix_wrapper_director_connect(posix_wrapper obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void posix_wrapper_change_ownership(posix_wrapper obj, long cptr, boolean take_or_release);
  public final static native void set_posix_wrapper(long jarg1, posix_wrapper jarg1_);
  public final static native long bt_peer_connection_handle_SWIGUpcast(long jarg1);

  public static void SwigDirector_alert_notify_callback_on_alert(alert_notify_callback jself) {
    jself.on_alert();
  }
  public static boolean SwigDirector_add_files_listener_pred(add_files_listener jself, String p) {
    return jself.pred(p);
  }
  public static void SwigDirector_set_piece_hashes_listener_progress(set_piece_hashes_listener jself, int i) {
    jself.progress(i);
  }
  public static int SwigDirector_posix_wrapper_open(posix_wrapper jself, String path, int flags, int mode) {
    return jself.open(path, flags, mode);
  }
  public static int SwigDirector_posix_wrapper_stat(posix_wrapper jself, String path, long buf) {
    return jself.stat(path, (buf == 0) ? null : new posix_stat_t(buf, false));
  }
  public static int SwigDirector_posix_wrapper_mkdir(posix_wrapper jself, String path, int mode) {
    return jself.mkdir(path, mode);
  }
  public static int SwigDirector_posix_wrapper_rename(posix_wrapper jself, String oldpath, String newpath) {
    return jself.rename(oldpath, newpath);
  }
  public static int SwigDirector_posix_wrapper_remove(posix_wrapper jself, String path) {
    return jself.remove(path);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
